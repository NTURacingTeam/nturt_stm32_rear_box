
2022_NTUR_RearBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000720c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007320  08007320  00017320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800776c  0800776c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800776c  0800776c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800776c  0800776c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001dc  08007950  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08007950  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d806  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002458  00000000  00000000  0002da0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00030b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ee2  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f531  00000000  00000000  0003464a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da07  00000000  00000000  00043b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1582  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004524  00000000  00000000  000d15d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007304 	.word	0x08007304

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007304 	.word	0x08007304

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fd74 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f80f 	bl	8000ab2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f950 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a98:	f000 f938 	bl	8000d0c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a9c:	f000 f90c 	bl	8000cb8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000aa0:	f000 f858 	bl	8000b54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000aa4:	f000 f8da 	bl	8000c5c <MX_I2C1_Init>
  MX_CAN_Init();
 8000aa8:	f000 f8a2 	bl	8000bf0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  user_main();
 8000aac:	f000 fcb0 	bl	8001410 <user_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <main+0x28>

08000ab2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b094      	sub	sp, #80	; 0x50
 8000ab6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abc:	2228      	movs	r2, #40	; 0x28
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fe95 	bl	80047f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aea:	2310      	movs	r3, #16
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fca8 	bl	800344c <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000b02:	f000 f9a7 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 ff15 	bl	8003950 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b2c:	f000 f992 	bl	8000e54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 f8a0 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b46:	f000 f985 	bl	8000e54 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000b66:	4a21      	ldr	r2, [pc, #132]	; (8000bec <MX_ADC1_Init+0x98>)
 8000b68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000b80:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b92:	4815      	ldr	r0, [pc, #84]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000b94:	f000 fd76 	bl	8001684 <HAL_ADC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b9e:	f000 f959 	bl	8000e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000baa:	2304      	movs	r3, #4
 8000bac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000bb4:	f000 ff38 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f949 	bl	8000e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bc2:	2309      	movs	r3, #9
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_ADC1_Init+0x94>)
 8000bd0:	f000 ff2a 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bda:	f000 f93b 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001f8 	.word	0x200001f8
 8000bec:	40012400 	.word	0x40012400

08000bf0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_CAN_Init+0x64>)
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <MX_CAN_Init+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_CAN_Init+0x64>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c0e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000c12:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c16:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000c1a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_CAN_Init+0x64>)
 8000c42:	f001 f8ea 	bl	8001e1a <HAL_CAN_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c4c:	f000 f902 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000026c 	.word	0x2000026c
 8000c58:	40006400 	.word	0x40006400

08000c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_I2C1_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_I2C1_Init+0x58>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c9a:	f002 fa93 	bl	80031c4 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 f8d6 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000294 	.word	0x20000294
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_USART1_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cf0:	f003 f87c 	bl	8003dec <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f000 f8ab 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200002e8 	.word	0x200002e8
 8000d08:	40013800 	.word	0x40013800

08000d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_DMA_Init+0x28>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <MX_DMA_Init+0x28>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <MX_DMA_Init+0x28>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a3b      	ldr	r2, [pc, #236]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a35      	ldr	r2, [pc, #212]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9a:	482a      	ldr	r0, [pc, #168]	; (8000e44 <MX_GPIO_Init+0x10c>)
 8000d9c:	f002 f9c8 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da6:	4828      	ldr	r0, [pc, #160]	; (8000e48 <MX_GPIO_Init+0x110>)
 8000da8:	f002 f9c2 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	481f      	ldr	r0, [pc, #124]	; (8000e44 <MX_GPIO_Init+0x10c>)
 8000dc6:	f002 f82f 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_GPIO_Init+0x114>)
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481c      	ldr	r0, [pc, #112]	; (8000e50 <MX_GPIO_Init+0x118>)
 8000dde:	f002 f823 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4813      	ldr	r0, [pc, #76]	; (8000e48 <MX_GPIO_Init+0x110>)
 8000dfc:	f002 f814 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e00:	2320      	movs	r3, #32
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_GPIO_Init+0x114>)
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_GPIO_Init+0x110>)
 8000e14:	f002 f808 	bl	8002e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f001 fe34 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e22:	200a      	movs	r0, #10
 8000e24:	f001 fe4d 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2017      	movs	r0, #23
 8000e2e:	f001 fe2c 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e32:	2017      	movs	r0, #23
 8000e34:	f001 fe45 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40011000 	.word	0x40011000
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	10210000 	.word	0x10210000
 8000e50:	40010800 	.word	0x40010800

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8000e5c:	20c8      	movs	r0, #200	; 0xc8
 8000e5e:	f000 fbed 	bl	800163c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <Error_Handler+0x1c>)
 8000e68:	f002 f97a 	bl	8003160 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000e6c:	e7f6      	b.n	8000e5c <Error_Handler+0x8>
 8000e6e:	bf00      	nop
 8000e70:	40011000 	.word	0x40011000

08000e74 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8000e7c:	1d39      	adds	r1, r7, #4
 8000e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e82:	2201      	movs	r2, #1
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <__io_putchar+0x20>)
 8000e86:	f002 fffe 	bl	8003e86 <HAL_UART_Transmit>
	return ch;
 8000e8a:	687b      	ldr	r3, [r7, #4]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200002e8 	.word	0x200002e8

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_MspInit+0x60>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_MspInit+0x60>)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000

08000efc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d15f      	bne.n	8000fdc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a2b      	ldr	r2, [pc, #172]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a25      	ldr	r2, [pc, #148]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f64:	2308      	movs	r3, #8
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4619      	mov	r1, r3
 8000f72:	481e      	ldr	r0, [pc, #120]	; (8000fec <HAL_ADC_MspInit+0xf0>)
 8000f74:	f001 ff58 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4619      	mov	r1, r3
 8000f86:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <HAL_ADC_MspInit+0xf4>)
 8000f88:	f001 ff4e 	bl	8002e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <HAL_ADC_MspInit+0xfc>)
 8000f90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000faa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000fc2:	f001 fd99 	bl	8002af8 <HAL_DMA_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000fcc:	f7ff ff42 	bl	8000e54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000fd4:	621a      	str	r2, [r3, #32]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	; 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40012400 	.word	0x40012400
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	20000228 	.word	0x20000228
 8000ff8:	40020008 	.word	0x40020008

08000ffc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a29      	ldr	r2, [pc, #164]	; (80010bc <HAL_CAN_MspInit+0xc0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d14b      	bne.n	80010b4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_CAN_MspInit+0xc4>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_CAN_MspInit+0xc4>)
 8001022:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001026:	61d3      	str	r3, [r2, #28]
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_CAN_MspInit+0xc4>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_CAN_MspInit+0xc4>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_CAN_MspInit+0xc4>)
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <HAL_CAN_MspInit+0xc4>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800104c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <HAL_CAN_MspInit+0xc8>)
 8001062:	f001 fee1 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <HAL_CAN_MspInit+0xc8>)
 800107c:	f001 fed4 	bl	8002e28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_CAN_MspInit+0xcc>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_CAN_MspInit+0xcc>)
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2014      	movs	r0, #20
 80010aa:	f001 fcee 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80010ae:	2014      	movs	r0, #20
 80010b0:	f001 fd07 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40006400 	.word	0x40006400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40010000 	.word	0x40010000

080010cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <HAL_I2C_MspInit+0x70>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d123      	bne.n	8001134 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_I2C_MspInit+0x74>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_I2C_MspInit+0x74>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_I2C_MspInit+0x74>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001104:	23c0      	movs	r3, #192	; 0xc0
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001108:	2312      	movs	r3, #18
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <HAL_I2C_MspInit+0x78>)
 8001118:	f001 fe86 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_I2C_MspInit+0x74>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_I2C_MspInit+0x74>)
 8001122:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001126:	61d3      	str	r3, [r2, #28]
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_I2C_MspInit+0x74>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40005400 	.word	0x40005400
 8001140:	40021000 	.word	0x40021000
 8001144:	40010c00 	.word	0x40010c00

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_UART_MspInit+0x9c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d139      	bne.n	80011dc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_UART_MspInit+0xa0>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_UART_MspInit+0xa0>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_UART_MspInit+0xa0>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_UART_MspInit+0xa0>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0xa0>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_UART_MspInit+0xa0>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	480f      	ldr	r0, [pc, #60]	; (80011ec <HAL_UART_MspInit+0xa4>)
 80011ae:	f001 fe3b 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <HAL_UART_MspInit+0xa4>)
 80011c8:	f001 fe2e 	bl	8002e28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2025      	movs	r0, #37	; 0x25
 80011d2:	f001 fc5a 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011d6:	2025      	movs	r0, #37	; 0x25
 80011d8:	f001 fc73 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010800 	.word	0x40010800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f9e5 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}

0800123e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001242:	2010      	movs	r0, #16
 8001244:	f001 ffa6 	bl	8003194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001252:	f001 f920 	bl	8002496 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000026c 	.word	0x2000026c

08001260 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001264:	2020      	movs	r0, #32
 8001266:	f001 ff95 	bl	8003194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <USART1_IRQHandler+0x10>)
 8001276:	f002 fe99 	bl	8003fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200002e8 	.word	0x200002e8

08001284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	return 1;
 8001288:	2301      	movs	r3, #1
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <_kill>:

int _kill(int pid, int sig)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800129c:	f003 fa7e 	bl	800479c <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2216      	movs	r2, #22
 80012a4:	601a      	str	r2, [r3, #0]
	return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_exit>:

void _exit (int status)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012ba:	f04f 31ff 	mov.w	r1, #4294967295
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffe7 	bl	8001292 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012c4:	e7fe      	b.n	80012c4 <_exit+0x12>

080012c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e00a      	b.n	80012ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012d8:	f3af 8000 	nop.w
 80012dc:	4601      	mov	r1, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	60ba      	str	r2, [r7, #8]
 80012e4:	b2ca      	uxtb	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf0      	blt.n	80012d8 <_read+0x12>
	}

return len;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e009      	b.n	8001326 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	60ba      	str	r2, [r7, #8]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fdaa 	bl	8000e74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	dbf1      	blt.n	8001312 <_write+0x12>
	}
	return len;
 800132e:	687b      	ldr	r3, [r7, #4]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_close>:

int _close(int file)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	return -1;
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135e:	605a      	str	r2, [r3, #4]
	return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <_isatty>:

int _isatty(int file)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	return 1;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f003 f9e8 	bl	800479c <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20005000 	.word	0x20005000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	2000032c 	.word	0x2000032c
 8001400:	20000370 	.word	0x20000370

08001404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <user_main>:
  * 		including the super loop.
  * 		Should be called once after all auto-gererated init functions in main()
  * @param  None
  * @retval None
  */
void user_main(void){
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
	/*Starting the ADC with DMA*/
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_value,2);
 8001416:	2202      	movs	r2, #2
 8001418:	4912      	ldr	r1, [pc, #72]	; (8001464 <user_main+0x54>)
 800141a:	4813      	ldr	r0, [pc, #76]	; (8001468 <user_main+0x58>)
 800141c:	f000 fa0a 	bl	8001834 <HAL_ADC_Start_DMA>

	/*setting up the CAN receive filter*/
	CAN_FilterTypeDef canfilterconfig = {
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <user_main+0x5c>)
 8001422:	463c      	mov	r4, r7
 8001424:	461d      	mov	r5, r3
 8001426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001432:	e884 0003 	stmia.w	r4, {r0, r1}
			.FilterIdHigh = 0x080AD092>>13,
			.FilterIdLow = (0x080AD092<<3) & 0x0000FFFF,
			.FilterMaskIdHigh = 0xFFFF,
			.FilterMaskIdLow = 0xFFFF&(~0b111)
	};
	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!=HAL_OK){
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <user_main+0x60>)
 800143c:	f000 fde8 	bl	8002010 <HAL_CAN_ConfigFilter>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <user_main+0x3a>
		Error_Handler();
 8001446:	f7ff fd05 	bl	8000e54 <Error_Handler>
	}
	/*turning on receive interrupt mask, then start the CAN peripheral*/
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800144a:	2102      	movs	r1, #2
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <user_main+0x60>)
 800144e:	f000 fffd 	bl	800244c <HAL_CAN_ActivateNotification>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <user_main+0x4c>
		Error_Handler();
 8001458:	f7ff fcfc 	bl	8000e54 <Error_Handler>
	}
	HAL_CAN_Start(&hcan);
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <user_main+0x60>)
 800145e:	f000 fea0 	bl	80021a2 <HAL_CAN_Start>

	/*superloop*/
	for(;/*ever*/;){
 8001462:	e7fe      	b.n	8001462 <user_main+0x52>
 8001464:	20000330 	.word	0x20000330
 8001468:	200001f8 	.word	0x200001f8
 800146c:	08007320 	.word	0x08007320
 8001470:	2000026c 	.word	0x2000026c

08001474 <HAL_GPIO_EXTI_Callback>:
  * @brief  User defined EXTI interrupt callback function, namely EXTI ISR.
  * 		Shall only be called by HAL interrupt handlers
  * @param  GPIO_PIN: the GPIO pin that generated the interrupt.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <HAL_GPIO_EXTI_Callback+0x38>)
 8001484:	f001 fe6c 	bl	8003160 <HAL_GPIO_TogglePin>
	if(GPIO_PIN==GPIO_PIN_5){
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	2b20      	cmp	r3, #32
 800148c:	d103      	bne.n	8001496 <HAL_GPIO_EXTI_Callback+0x22>
		printf("right wheelspeed\n");
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001490:	f003 fe84 	bl	800519c <puts>
	}
	else if(GPIO_PIN==GPIO_PIN_4){
		printf("left wheelspeed\n");
	}
	return;
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_EXTI_Callback+0x30>
	else if(GPIO_PIN==GPIO_PIN_4){
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2b10      	cmp	r3, #16
 800149a:	d103      	bne.n	80014a4 <HAL_GPIO_EXTI_Callback+0x30>
		printf("left wheelspeed\n");
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_GPIO_EXTI_Callback+0x40>)
 800149e:	f003 fe7d 	bl	800519c <puts>
	return;
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
}
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40011000 	.word	0x40011000
 80014b0:	08007348 	.word	0x08007348
 80014b4:	0800735c 	.word	0x0800735c

080014b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  User defined CAN receiving interrupt callback function, namely CAN receiving ISR.
  * 		Shall only be called by HAL interrupt handlers
  * @param  hcan: the can handle structure that received the message.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	/*for rearbox, only 0x080AD092(front box 2) should pass through*/
  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK){
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 feaf 	bl	800222a <HAL_CAN_GetRxMessage>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    Error_Handler();
 80014d2:	f7ff fcbf 	bl	8000e54 <Error_Handler>
  }

  /*checks bit1 on byte8 for brake pedal state, turns on the brake light if it is set*/
  if(CAN_RxData[7]&(1u<<1)){
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80014d8:	79db      	ldrb	r3, [r3, #7]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00c      	beq.n	80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e8:	480e      	ldr	r0, [pc, #56]	; (8001524 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80014ea:	f001 fe21 	bl	8003130 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80014f6:	f001 fe1b 	bl	8003130 <HAL_GPIO_WritePin>
  }
  else{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
  }
  return;
 80014fa:	e00c      	b.n	8001516 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001504:	f001 fe14 	bl	8003130 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001510:	f001 fe0e 	bl	8003130 <HAL_GPIO_WritePin>
  return;
 8001514:	bf00      	nop
}
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000354 	.word	0x20000354
 8001520:	20000338 	.word	0x20000338
 8001524:	40010c00 	.word	0x40010c00
 8001528:	40011000 	.word	0x40011000

0800152c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001552:	f7ff ff57 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f003 f927 	bl	80047a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155a:	f7ff fa95 	bl	8000a88 <main>
  bx lr
 800155e:	4770      	bx	lr
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001568:	08007774 	.word	0x08007774
  ldr r2, =_sbss
 800156c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001570:	20000370 	.word	0x20000370

08001574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_2_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x28>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x28>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f001 fa73 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fc80 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fa8b 	bl	8002ade <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f001 fa53 	bl	8002a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_IncTick+0x1c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x20>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <HAL_IncTick+0x20>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000008 	.word	0x20000008
 8001624:	2000035c 	.word	0x2000035c

08001628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <HAL_GetTick+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	2000035c 	.word	0x2000035c

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fff0 	bl	8001628 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffe0 	bl	8001628 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0be      	b.n	8001824 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d109      	bne.n	80016c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fc1a 	bl	8000efc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 faff 	bl	8001ccc <ADC_ConversionStop_Disable>
 80016ce:	4603      	mov	r3, r0
 80016d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 8099 	bne.w	8001812 <HAL_ADC_Init+0x18e>
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 8095 	bne.w	8001812 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f0:	f023 0302 	bic.w	r3, r3, #2
 80016f4:	f043 0202 	orr.w	r2, r3, #2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001704:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7b1b      	ldrb	r3, [r3, #12]
 800170a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800170c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	4313      	orrs	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800171c:	d003      	beq.n	8001726 <HAL_ADC_Init+0xa2>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <HAL_ADC_Init+0xa8>
 8001726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172a:	e000      	b.n	800172e <HAL_ADC_Init+0xaa>
 800172c:	2300      	movs	r3, #0
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7d1b      	ldrb	r3, [r3, #20]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d119      	bne.n	8001770 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7b1b      	ldrb	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	3b01      	subs	r3, #1
 800174a:	035a      	lsls	r2, r3, #13
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	e00b      	b.n	8001770 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	f043 0220 	orr.w	r2, r3, #32
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <HAL_ADC_Init+0x1a8>)
 800178c:	4013      	ands	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	430b      	orrs	r3, r1
 8001796:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a0:	d003      	beq.n	80017aa <HAL_ADC_Init+0x126>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d104      	bne.n	80017b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	051b      	lsls	r3, r3, #20
 80017b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_ADC_Init+0x1ac>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d10b      	bne.n	80017f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	f023 0303 	bic.w	r3, r3, #3
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017ee:	e018      	b.n	8001822 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f023 0312 	bic.w	r3, r3, #18
 80017f8:	f043 0210 	orr.w	r2, r3, #16
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001810:	e007      	b.n	8001822 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f043 0210 	orr.w	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001822:	7dfb      	ldrb	r3, [r7, #23]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	ffe1f7fd 	.word	0xffe1f7fd
 8001830:	ff1f0efe 	.word	0xff1f0efe

08001834 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a64      	ldr	r2, [pc, #400]	; (80019dc <HAL_ADC_Start_DMA+0x1a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d004      	beq.n	8001858 <HAL_ADC_Start_DMA+0x24>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d106      	bne.n	8001866 <HAL_ADC_Start_DMA+0x32>
 8001858:	4b60      	ldr	r3, [pc, #384]	; (80019dc <HAL_ADC_Start_DMA+0x1a8>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 80b3 	bne.w	80019cc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_ADC_Start_DMA+0x40>
 8001870:	2302      	movs	r3, #2
 8001872:	e0ae      	b.n	80019d2 <HAL_ADC_Start_DMA+0x19e>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f9cb 	bl	8001c18 <ADC_Enable>
 8001882:	4603      	mov	r3, r0
 8001884:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 809a 	bne.w	80019c2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4e      	ldr	r2, [pc, #312]	; (80019e0 <HAL_ADC_Start_DMA+0x1ac>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d105      	bne.n	80018b8 <HAL_ADC_Start_DMA+0x84>
 80018ac:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <HAL_ADC_Start_DMA+0x1a8>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d115      	bne.n	80018e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d026      	beq.n	8001920 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e2:	e01d      	b.n	8001920 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a39      	ldr	r2, [pc, #228]	; (80019dc <HAL_ADC_Start_DMA+0x1a8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d004      	beq.n	8001904 <HAL_ADC_Start_DMA+0xd0>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d10d      	bne.n	8001920 <HAL_ADC_Start_DMA+0xec>
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_ADC_Start_DMA+0x1a8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d007      	beq.n	8001920 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001918:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	f023 0206 	bic.w	r2, r3, #6
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
 8001938:	e002      	b.n	8001940 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <HAL_ADC_Start_DMA+0x1b0>)
 800194e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <HAL_ADC_Start_DMA+0x1b4>)
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <HAL_ADC_Start_DMA+0x1b8>)
 800195e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0202 	mvn.w	r2, #2
 8001968:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001978:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a18      	ldr	r0, [r3, #32]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	334c      	adds	r3, #76	; 0x4c
 8001984:	4619      	mov	r1, r3
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f001 f90f 	bl	8002bac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001998:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800199c:	d108      	bne.n	80019b0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019ac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80019ae:	e00f      	b.n	80019d0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019be:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80019c0:	e006      	b.n	80019d0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80019ca:	e001      	b.n	80019d0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012400 	.word	0x40012400
 80019e0:	40012800 	.word	0x40012800
 80019e4:	08001d4f 	.word	0x08001d4f
 80019e8:	08001dcb 	.word	0x08001dcb
 80019ec:	08001de7 	.word	0x08001de7

080019f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x20>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0dc      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1da>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b06      	cmp	r3, #6
 8001a56:	d81c      	bhi.n	8001a92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b05      	subs	r3, #5
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4019      	ands	r1, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b05      	subs	r3, #5
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a90:	e03c      	b.n	8001b0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d81c      	bhi.n	8001ad4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b23      	subs	r3, #35	; 0x23
 8001aac:	221f      	movs	r2, #31
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4019      	ands	r1, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b23      	subs	r3, #35	; 0x23
 8001ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad2:	e01b      	b.n	8001b0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b41      	subs	r3, #65	; 0x41
 8001ae6:	221f      	movs	r2, #31
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4019      	ands	r1, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b41      	subs	r3, #65	; 0x41
 8001b00:	fa00 f203 	lsl.w	r2, r0, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d91c      	bls.n	8001b4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68d9      	ldr	r1, [r3, #12]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	3b1e      	subs	r3, #30
 8001b26:	2207      	movs	r2, #7
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b1e      	subs	r3, #30
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	e019      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6919      	ldr	r1, [r3, #16]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	2207      	movs	r2, #7
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4019      	ands	r1, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6898      	ldr	r0, [r3, #8]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d003      	beq.n	8001b92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b8e:	2b11      	cmp	r3, #17
 8001b90:	d132      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_ADC_ConfigChannel+0x1e4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d125      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d126      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bb8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9a      	lsrs	r2, r3, #18
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f9      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x1b2>
 8001be6:	e007      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	f043 0220 	orr.w	r2, r3, #32
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40012400 	.word	0x40012400
 8001c10:	20000000 	.word	0x20000000
 8001c14:	431bde83 	.word	0x431bde83

08001c18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d040      	beq.n	8001cb8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <ADC_Enable+0xac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <ADC_Enable+0xb0>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c54:	e002      	b.n	8001c5c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f9      	bne.n	8001c56 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c62:	f7ff fce1 	bl	8001628 <HAL_GetTick>
 8001c66:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c68:	e01f      	b.n	8001caa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c6a:	f7ff fcdd 	bl	8001628 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d918      	bls.n	8001caa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d011      	beq.n	8001caa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	f043 0210 	orr.w	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e007      	b.n	8001cba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d1d8      	bne.n	8001c6a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	431bde83 	.word	0x431bde83

08001ccc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d12e      	bne.n	8001d44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cf6:	f7ff fc97 	bl	8001628 <HAL_GetTick>
 8001cfa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cfc:	e01b      	b.n	8001d36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cfe:	f7ff fc93 	bl	8001628 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d914      	bls.n	8001d36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10d      	bne.n	8001d36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e007      	b.n	8001d46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d0dc      	beq.n	8001cfe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d127      	bne.n	8001db8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d7e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d82:	d115      	bne.n	8001db0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff fe1d 	bl	80019f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001db6:	e004      	b.n	8001dc2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff fe12 	bl	8001a02 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff fe01 	bl	8001a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0ed      	b.n	8002008 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff f8df 	bl	8000ffc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e4e:	f7ff fbeb 	bl	8001628 <HAL_GetTick>
 8001e52:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e54:	e012      	b.n	8001e7c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e56:	f7ff fbe7 	bl	8001628 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b0a      	cmp	r3, #10
 8001e62:	d90b      	bls.n	8001e7c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2205      	movs	r2, #5
 8001e74:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0c5      	b.n	8002008 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0e5      	beq.n	8001e56 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0202 	bic.w	r2, r2, #2
 8001e98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e9a:	f7ff fbc5 	bl	8001628 <HAL_GetTick>
 8001e9e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ea0:	e012      	b.n	8001ec8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea2:	f7ff fbc1 	bl	8001628 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b0a      	cmp	r3, #10
 8001eae:	d90b      	bls.n	8001ec8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e09f      	b.n	8002008 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1e5      	bne.n	8001ea2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7e1b      	ldrb	r3, [r3, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d108      	bne.n	8001ef0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e007      	b.n	8001f00 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e5b      	ldrb	r3, [r3, #25]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d108      	bne.n	8001f1a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7e9b      	ldrb	r3, [r3, #26]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e007      	b.n	8001f54 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0220 	bic.w	r2, r2, #32
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7edb      	ldrb	r3, [r3, #27]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0210 	bic.w	r2, r2, #16
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e007      	b.n	8001f7e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0210 	orr.w	r2, r2, #16
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7f1b      	ldrb	r3, [r3, #28]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0208 	orr.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0208 	bic.w	r2, r2, #8
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7f5b      	ldrb	r3, [r3, #29]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0204 	orr.w	r2, r2, #4
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e007      	b.n	8001fd2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0204 	bic.w	r2, r2, #4
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	ea42 0103 	orr.w	r1, r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002026:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d003      	beq.n	8002036 <HAL_CAN_ConfigFilter+0x26>
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	2b02      	cmp	r3, #2
 8002032:	f040 80aa 	bne.w	800218a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2201      	movs	r2, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	401a      	ands	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d123      	bne.n	80020b8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002092:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3248      	adds	r2, #72	; 0x48
 8002098:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020ae:	6979      	ldr	r1, [r7, #20]
 80020b0:	3348      	adds	r3, #72	; 0x48
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d122      	bne.n	8002106 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3248      	adds	r2, #72	; 0x48
 80020e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020fc:	6979      	ldr	r1, [r7, #20]
 80020fe:	3348      	adds	r3, #72	; 0x48
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	401a      	ands	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002120:	e007      	b.n	8002132 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	431a      	orrs	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	401a      	ands	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800214c:	e007      	b.n	800215e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	431a      	orrs	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800217c:	f023 0201 	bic.w	r2, r3, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e006      	b.n	8002198 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
  }
}
 8002198:	4618      	mov	r0, r3
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d12e      	bne.n	8002214 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021ce:	f7ff fa2b 	bl	8001628 <HAL_GetTick>
 80021d2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021d4:	e012      	b.n	80021fc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d6:	f7ff fa27 	bl	8001628 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b0a      	cmp	r3, #10
 80021e2:	d90b      	bls.n	80021fc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2205      	movs	r2, #5
 80021f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e012      	b.n	8002222 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1e5      	bne.n	80021d6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e006      	b.n	8002222 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800222a:	b480      	push	{r7}
 800222c:	b087      	sub	sp, #28
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d003      	beq.n	800224e <HAL_CAN_GetRxMessage+0x24>
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b02      	cmp	r3, #2
 800224a:	f040 80f3 	bne.w	8002434 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10e      	bne.n	8002272 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0e7      	b.n	8002442 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d107      	bne.n	8002290 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d8      	b.n	8002442 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	331b      	adds	r3, #27
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	4413      	add	r3, r2
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0204 	and.w	r2, r3, #4
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	331b      	adds	r3, #27
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	4413      	add	r3, r2
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0d5b      	lsrs	r3, r3, #21
 80022be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	331b      	adds	r3, #27
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	331b      	adds	r3, #27
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0202 	and.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	331b      	adds	r3, #27
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 020f 	and.w	r2, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	331b      	adds	r3, #27
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	4413      	add	r3, r2
 800231a:	3304      	adds	r3, #4
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	b2da      	uxtb	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	331b      	adds	r3, #27
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	3304      	adds	r3, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0c1b      	lsrs	r3, r3, #16
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	4413      	add	r3, r2
 8002348:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4413      	add	r3, r2
 800235e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0a1a      	lsrs	r2, r3, #8
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	4413      	add	r3, r2
 8002378:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0c1a      	lsrs	r2, r3, #16
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	3302      	adds	r3, #2
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	4413      	add	r3, r2
 8002392:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e1a      	lsrs	r2, r3, #24
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	3303      	adds	r3, #3
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	3304      	adds	r3, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0a1a      	lsrs	r2, r3, #8
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	3305      	adds	r3, #5
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	4413      	add	r3, r2
 80023de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0c1a      	lsrs	r2, r3, #16
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	3306      	adds	r3, #6
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e1a      	lsrs	r2, r3, #24
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	3307      	adds	r3, #7
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d108      	bne.n	8002420 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0220 	orr.w	r2, r2, #32
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	e007      	b.n	8002430 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0220 	orr.w	r2, r2, #32
 800242e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e006      	b.n	8002442 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d002      	beq.n	800246a <HAL_CAN_ActivateNotification+0x1e>
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d109      	bne.n	800247e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6959      	ldr	r1, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e006      	b.n	800248c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b08a      	sub	sp, #40	; 0x28
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d07c      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d023      	beq.n	800252e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f983 	bl	8002804 <HAL_CAN_TxMailbox0CompleteCallback>
 80024fe:	e016      	b.n	800252e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	e00c      	b.n	800252e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	e002      	b.n	800252e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f986 	bl	800283a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d024      	beq.n	8002582 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002540:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f962 	bl	8002816 <HAL_CAN_TxMailbox1CompleteCallback>
 8002552:	e016      	b.n	8002582 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	e00c      	b.n	8002582 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
 800257a:	e002      	b.n	8002582 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f965 	bl	800284c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d024      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002594:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f941 	bl	8002828 <HAL_CAN_TxMailbox2CompleteCallback>
 80025a6:	e016      	b.n	80025d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	e00c      	b.n	80025d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	e002      	b.n	80025d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f944 	bl	800285e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00c      	beq.n	80025fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2210      	movs	r2, #16
 80025f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00b      	beq.n	800261c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2208      	movs	r2, #8
 8002614:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f92a 	bl	8002870 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe ff3f 	bl	80014b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00c      	beq.n	800265e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002654:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2210      	movs	r2, #16
 800265c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2208      	movs	r2, #8
 8002678:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f90a 	bl	8002894 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f8f2 	bl	8002882 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00b      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2210      	movs	r2, #16
 80026b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f8f3 	bl	80028a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8eb 	bl	80028b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d07b      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d072      	beq.n	80027dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002750:	2b00      	cmp	r3, #0
 8002752:	d043      	beq.n	80027dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d03e      	beq.n	80027dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002764:	2b60      	cmp	r3, #96	; 0x60
 8002766:	d02b      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x32a>
 8002768:	2b60      	cmp	r3, #96	; 0x60
 800276a:	d82e      	bhi.n	80027ca <HAL_CAN_IRQHandler+0x334>
 800276c:	2b50      	cmp	r3, #80	; 0x50
 800276e:	d022      	beq.n	80027b6 <HAL_CAN_IRQHandler+0x320>
 8002770:	2b50      	cmp	r3, #80	; 0x50
 8002772:	d82a      	bhi.n	80027ca <HAL_CAN_IRQHandler+0x334>
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d019      	beq.n	80027ac <HAL_CAN_IRQHandler+0x316>
 8002778:	2b40      	cmp	r3, #64	; 0x40
 800277a:	d826      	bhi.n	80027ca <HAL_CAN_IRQHandler+0x334>
 800277c:	2b30      	cmp	r3, #48	; 0x30
 800277e:	d010      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x30c>
 8002780:	2b30      	cmp	r3, #48	; 0x30
 8002782:	d822      	bhi.n	80027ca <HAL_CAN_IRQHandler+0x334>
 8002784:	2b10      	cmp	r3, #16
 8002786:	d002      	beq.n	800278e <HAL_CAN_IRQHandler+0x2f8>
 8002788:	2b20      	cmp	r3, #32
 800278a:	d005      	beq.n	8002798 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800278c:	e01d      	b.n	80027ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002796:	e019      	b.n	80027cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f043 0310 	orr.w	r3, r3, #16
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a0:	e014      	b.n	80027cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f043 0320 	orr.w	r3, r3, #32
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027aa:	e00f      	b.n	80027cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b4:	e00a      	b.n	80027cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027be:	e005      	b.n	80027cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c8:	e000      	b.n	80027cc <HAL_CAN_IRQHandler+0x336>
            break;
 80027ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2204      	movs	r2, #4
 80027e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f867 	bl	80028ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027fc:	bf00      	nop
 80027fe:	3728      	adds	r7, #40	; 0x28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4906      	ldr	r1, [pc, #24]	; (8002974 <__NVIC_EnableIRQ+0x34>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f7ff ff90 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff2d 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff42 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff90 	bl	80029cc <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5f 	bl	8002978 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff35 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa2 	bl	8002a30 <SysTick_Config>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e043      	b.n	8002b96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_DMA_Init+0xa8>)
 8002b16:	4413      	add	r3, r2
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_DMA_Init+0xac>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <HAL_DMA_Init+0xb0>)
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	bffdfff8 	.word	0xbffdfff8
 8002ba4:	cccccccd 	.word	0xcccccccd
 8002ba8:	40020000 	.word	0x40020000

08002bac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_DMA_Start_IT+0x20>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e04a      	b.n	8002c62 <HAL_DMA_Start_IT+0xb6>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d13a      	bne.n	8002c54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f8e2 	bl	8002dcc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 020e 	orr.w	r2, r2, #14
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e00f      	b.n	8002c42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0204 	bic.w	r2, r2, #4
 8002c30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 020a 	orr.w	r2, r2, #10
 8002c40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e005      	b.n	8002c60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d008      	beq.n	8002c92 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2204      	movs	r2, #4
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e020      	b.n	8002cd4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 020e 	bic.w	r2, r2, #14
 8002ca0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d005      	beq.n	8002d02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e051      	b.n	8002da6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 020e 	bic.w	r2, r2, #14
 8002d10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <HAL_DMA_Abort_IT+0xd0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d029      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xa0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <HAL_DMA_Abort_IT+0xd4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d022      	beq.n	8002d7c <HAL_DMA_Abort_IT+0x9c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_DMA_Abort_IT+0xd8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d01a      	beq.n	8002d76 <HAL_DMA_Abort_IT+0x96>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_DMA_Abort_IT+0xdc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d012      	beq.n	8002d70 <HAL_DMA_Abort_IT+0x90>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_DMA_Abort_IT+0xe0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00a      	beq.n	8002d6a <HAL_DMA_Abort_IT+0x8a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_DMA_Abort_IT+0xe4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d102      	bne.n	8002d64 <HAL_DMA_Abort_IT+0x84>
 8002d5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d62:	e00e      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d68:	e00b      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d6e:	e008      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d74:	e005      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7a:	e002      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	e000      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d80:	2301      	movs	r3, #1
 8002d82:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <HAL_DMA_Abort_IT+0xe8>)
 8002d84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
    } 
  }
  return status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40020008 	.word	0x40020008
 8002db4:	4002001c 	.word	0x4002001c
 8002db8:	40020030 	.word	0x40020030
 8002dbc:	40020044 	.word	0x40020044
 8002dc0:	40020058 	.word	0x40020058
 8002dc4:	4002006c 	.word	0x4002006c
 8002dc8:	40020000 	.word	0x40020000

08002dcc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d108      	bne.n	8002e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e0a:	e007      	b.n	8002e1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b08b      	sub	sp, #44	; 0x2c
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e32:	2300      	movs	r3, #0
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3a:	e169      	b.n	8003110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f040 8158 	bne.w	800310a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a9a      	ldr	r2, [pc, #616]	; (80030c8 <HAL_GPIO_Init+0x2a0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d05e      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e64:	4a98      	ldr	r2, [pc, #608]	; (80030c8 <HAL_GPIO_Init+0x2a0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d875      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e6a:	4a98      	ldr	r2, [pc, #608]	; (80030cc <HAL_GPIO_Init+0x2a4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d058      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e70:	4a96      	ldr	r2, [pc, #600]	; (80030cc <HAL_GPIO_Init+0x2a4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d86f      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e76:	4a96      	ldr	r2, [pc, #600]	; (80030d0 <HAL_GPIO_Init+0x2a8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d052      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e7c:	4a94      	ldr	r2, [pc, #592]	; (80030d0 <HAL_GPIO_Init+0x2a8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d869      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e82:	4a94      	ldr	r2, [pc, #592]	; (80030d4 <HAL_GPIO_Init+0x2ac>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d04c      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e88:	4a92      	ldr	r2, [pc, #584]	; (80030d4 <HAL_GPIO_Init+0x2ac>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d863      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e8e:	4a92      	ldr	r2, [pc, #584]	; (80030d8 <HAL_GPIO_Init+0x2b0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d046      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e94:	4a90      	ldr	r2, [pc, #576]	; (80030d8 <HAL_GPIO_Init+0x2b0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d85d      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e9a:	2b12      	cmp	r3, #18
 8002e9c:	d82a      	bhi.n	8002ef4 <HAL_GPIO_Init+0xcc>
 8002e9e:	2b12      	cmp	r3, #18
 8002ea0:	d859      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <HAL_GPIO_Init+0x80>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002f23 	.word	0x08002f23
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	08002f0f 	.word	0x08002f0f
 8002eb4:	08002f51 	.word	0x08002f51
 8002eb8:	08002f57 	.word	0x08002f57
 8002ebc:	08002f57 	.word	0x08002f57
 8002ec0:	08002f57 	.word	0x08002f57
 8002ec4:	08002f57 	.word	0x08002f57
 8002ec8:	08002f57 	.word	0x08002f57
 8002ecc:	08002f57 	.word	0x08002f57
 8002ed0:	08002f57 	.word	0x08002f57
 8002ed4:	08002f57 	.word	0x08002f57
 8002ed8:	08002f57 	.word	0x08002f57
 8002edc:	08002f57 	.word	0x08002f57
 8002ee0:	08002f57 	.word	0x08002f57
 8002ee4:	08002f57 	.word	0x08002f57
 8002ee8:	08002f57 	.word	0x08002f57
 8002eec:	08002f05 	.word	0x08002f05
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	4a79      	ldr	r2, [pc, #484]	; (80030dc <HAL_GPIO_Init+0x2b4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002efa:	e02c      	b.n	8002f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	623b      	str	r3, [r7, #32]
          break;
 8002f02:	e029      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	623b      	str	r3, [r7, #32]
          break;
 8002f0c:	e024      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	3308      	adds	r3, #8
 8002f14:	623b      	str	r3, [r7, #32]
          break;
 8002f16:	e01f      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	623b      	str	r3, [r7, #32]
          break;
 8002f20:	e01a      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	623b      	str	r3, [r7, #32]
          break;
 8002f2e:	e013      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	611a      	str	r2, [r3, #16]
          break;
 8002f42:	e009      	b.n	8002f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f44:	2308      	movs	r3, #8
 8002f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	615a      	str	r2, [r3, #20]
          break;
 8002f4e:	e003      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f50:	2300      	movs	r3, #0
 8002f52:	623b      	str	r3, [r7, #32]
          break;
 8002f54:	e000      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          break;
 8002f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	d801      	bhi.n	8002f62 <HAL_GPIO_Init+0x13a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	e001      	b.n	8002f66 <HAL_GPIO_Init+0x13e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2bff      	cmp	r3, #255	; 0xff
 8002f6c:	d802      	bhi.n	8002f74 <HAL_GPIO_Init+0x14c>
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	e002      	b.n	8002f7a <HAL_GPIO_Init+0x152>
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	3b08      	subs	r3, #8
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	210f      	movs	r1, #15
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	431a      	orrs	r2, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80b1 	beq.w	800310a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fa8:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	4a4c      	ldr	r2, [pc, #304]	; (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6193      	str	r3, [r2, #24]
 8002fb4:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fc0:	4a48      	ldr	r2, [pc, #288]	; (80030e4 <HAL_GPIO_Init+0x2bc>)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a40      	ldr	r2, [pc, #256]	; (80030e8 <HAL_GPIO_Init+0x2c0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <HAL_GPIO_Init+0x1ec>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3f      	ldr	r2, [pc, #252]	; (80030ec <HAL_GPIO_Init+0x2c4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00d      	beq.n	8003010 <HAL_GPIO_Init+0x1e8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <HAL_GPIO_Init+0x2c8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d007      	beq.n	800300c <HAL_GPIO_Init+0x1e4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3d      	ldr	r2, [pc, #244]	; (80030f4 <HAL_GPIO_Init+0x2cc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_GPIO_Init+0x1e0>
 8003004:	2303      	movs	r3, #3
 8003006:	e006      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003008:	2304      	movs	r3, #4
 800300a:	e004      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 800300c:	2302      	movs	r3, #2
 800300e:	e002      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003014:	2300      	movs	r3, #0
 8003016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003018:	f002 0203 	and.w	r2, r2, #3
 800301c:	0092      	lsls	r2, r2, #2
 800301e:	4093      	lsls	r3, r2
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003026:	492f      	ldr	r1, [pc, #188]	; (80030e4 <HAL_GPIO_Init+0x2bc>)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3302      	adds	r3, #2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	492c      	ldr	r1, [pc, #176]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e006      	b.n	800305c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	43db      	mvns	r3, r3
 8003056:	4928      	ldr	r1, [pc, #160]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003058:	4013      	ands	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003068:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4922      	ldr	r1, [pc, #136]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	43db      	mvns	r3, r3
 800307e:	491e      	ldr	r1, [pc, #120]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003080:	4013      	ands	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	4918      	ldr	r1, [pc, #96]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	608b      	str	r3, [r1, #8]
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4914      	ldr	r1, [pc, #80]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d021      	beq.n	80030fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60cb      	str	r3, [r1, #12]
 80030c4:	e021      	b.n	800310a <HAL_GPIO_Init+0x2e2>
 80030c6:	bf00      	nop
 80030c8:	10320000 	.word	0x10320000
 80030cc:	10310000 	.word	0x10310000
 80030d0:	10220000 	.word	0x10220000
 80030d4:	10210000 	.word	0x10210000
 80030d8:	10120000 	.word	0x10120000
 80030dc:	10110000 	.word	0x10110000
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40010800 	.word	0x40010800
 80030ec:	40010c00 	.word	0x40010c00
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40011400 	.word	0x40011400
 80030f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_GPIO_Init+0x304>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	43db      	mvns	r3, r3
 8003104:	4909      	ldr	r1, [pc, #36]	; (800312c <HAL_GPIO_Init+0x304>)
 8003106:	4013      	ands	r3, r2
 8003108:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	3301      	adds	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	f47f ae8e 	bne.w	8002e3c <HAL_GPIO_Init+0x14>
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	372c      	adds	r7, #44	; 0x2c
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	40010400 	.word	0x40010400

08003130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
 800313c:	4613      	mov	r3, r2
 800313e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003140:	787b      	ldrb	r3, [r7, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800314c:	e003      	b.n	8003156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	041a      	lsls	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	041a      	lsls	r2, r3, #16
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43d9      	mvns	r1, r3
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	400b      	ands	r3, r1
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	611a      	str	r2, [r3, #16]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
	...

08003194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe f95e 	bl	8001474 <HAL_GPIO_EXTI_Callback>
  }
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40010400 	.word	0x40010400

080031c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e12b      	b.n	800342e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fd ff6e 	bl	80010cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	; 0x24
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003228:	f000 fce4 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 800322c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4a81      	ldr	r2, [pc, #516]	; (8003438 <HAL_I2C_Init+0x274>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d807      	bhi.n	8003248 <HAL_I2C_Init+0x84>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a80      	ldr	r2, [pc, #512]	; (800343c <HAL_I2C_Init+0x278>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e006      	b.n	8003256 <HAL_I2C_Init+0x92>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a7d      	ldr	r2, [pc, #500]	; (8003440 <HAL_I2C_Init+0x27c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	bf94      	ite	ls
 8003250:	2301      	movls	r3, #1
 8003252:	2300      	movhi	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0e7      	b.n	800342e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a78      	ldr	r2, [pc, #480]	; (8003444 <HAL_I2C_Init+0x280>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_I2C_Init+0x274>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d802      	bhi.n	8003298 <HAL_I2C_Init+0xd4>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3301      	adds	r3, #1
 8003296:	e009      	b.n	80032ac <HAL_I2C_Init+0xe8>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4a69      	ldr	r2, [pc, #420]	; (8003448 <HAL_I2C_Init+0x284>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	3301      	adds	r3, #1
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	495c      	ldr	r1, [pc, #368]	; (8003438 <HAL_I2C_Init+0x274>)
 80032c8:	428b      	cmp	r3, r1
 80032ca:	d819      	bhi.n	8003300 <HAL_I2C_Init+0x13c>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e59      	subs	r1, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032e0:	400b      	ands	r3, r1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_I2C_Init+0x138>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e59      	subs	r1, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fa:	e051      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e04f      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <HAL_I2C_Init+0x168>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e58      	subs	r0, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e012      	b.n	8003352 <HAL_I2C_Init+0x18e>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e58      	subs	r0, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	0099      	lsls	r1, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x196>
 8003356:	2301      	movs	r3, #1
 8003358:	e022      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10e      	bne.n	8003380 <HAL_I2C_Init+0x1bc>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e58      	subs	r0, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	440b      	add	r3, r1
 8003370:	fbb0 f3f3 	udiv	r3, r0, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	e00f      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	0099      	lsls	r1, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	6809      	ldr	r1, [r1, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6911      	ldr	r1, [r2, #16]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68d2      	ldr	r2, [r2, #12]
 80033da:	4311      	orrs	r1, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	000186a0 	.word	0x000186a0
 800343c:	001e847f 	.word	0x001e847f
 8003440:	003d08ff 	.word	0x003d08ff
 8003444:	431bde83 	.word	0x431bde83
 8003448:	10624dd3 	.word	0x10624dd3

0800344c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e272      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8087 	beq.w	800357a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800346c:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b04      	cmp	r3, #4
 8003476:	d00c      	beq.n	8003492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003478:	4b8f      	ldr	r3, [pc, #572]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d112      	bne.n	80034aa <HAL_RCC_OscConfig+0x5e>
 8003484:	4b8c      	ldr	r3, [pc, #560]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d10b      	bne.n	80034aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003492:	4b89      	ldr	r3, [pc, #548]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d06c      	beq.n	8003578 <HAL_RCC_OscConfig+0x12c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d168      	bne.n	8003578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e24c      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x76>
 80034b4:	4b80      	ldr	r3, [pc, #512]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a7f      	ldr	r2, [pc, #508]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e02e      	b.n	8003520 <HAL_RCC_OscConfig+0xd4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x98>
 80034ca:	4b7b      	ldr	r3, [pc, #492]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7a      	ldr	r2, [pc, #488]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a77      	ldr	r2, [pc, #476]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e01d      	b.n	8003520 <HAL_RCC_OscConfig+0xd4>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0xbc>
 80034ee:	4b72      	ldr	r3, [pc, #456]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a71      	ldr	r2, [pc, #452]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b6f      	ldr	r3, [pc, #444]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0xd4>
 8003508:	4b6b      	ldr	r3, [pc, #428]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a6a      	ldr	r2, [pc, #424]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b68      	ldr	r3, [pc, #416]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a67      	ldr	r2, [pc, #412]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe f87e 	bl	8001628 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fe f87a 	bl	8001628 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e200      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0xe4>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe f86a 	bl	8001628 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe f866 	bl	8001628 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e1ec      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x10c>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d063      	beq.n	800364e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003586:	4b4c      	ldr	r3, [pc, #304]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003592:	4b49      	ldr	r3, [pc, #292]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b08      	cmp	r3, #8
 800359c:	d11c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x18c>
 800359e:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d116      	bne.n	80035d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x176>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e1c0      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4939      	ldr	r1, [pc, #228]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	e03a      	b.n	800364e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7fe f81f 	bl	8001628 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe f81b 	bl	8001628 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e1a1      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4927      	ldr	r1, [pc, #156]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e015      	b.n	800364e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd fffe 	bl	8001628 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003630:	f7fd fffa 	bl	8001628 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e180      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03a      	beq.n	80036d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d019      	beq.n	8003696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003668:	f7fd ffde 	bl	8001628 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7fd ffda 	bl	8001628 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e160      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800368e:	2001      	movs	r0, #1
 8003690:	f000 fad8 	bl	8003c44 <RCC_Delay>
 8003694:	e01c      	b.n	80036d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369c:	f7fd ffc4 	bl	8001628 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a2:	e00f      	b.n	80036c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fd ffc0 	bl	8001628 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d908      	bls.n	80036c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e146      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	42420000 	.word	0x42420000
 80036c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	4b92      	ldr	r3, [pc, #584]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e9      	bne.n	80036a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80a6 	beq.w	800382a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e2:	4b8b      	ldr	r3, [pc, #556]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	4b88      	ldr	r3, [pc, #544]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4a87      	ldr	r2, [pc, #540]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	61d3      	str	r3, [r2, #28]
 80036fa:	4b85      	ldr	r3, [pc, #532]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	4b82      	ldr	r3, [pc, #520]	; (8003914 <HAL_RCC_OscConfig+0x4c8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d118      	bne.n	8003748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003716:	4b7f      	ldr	r3, [pc, #508]	; (8003914 <HAL_RCC_OscConfig+0x4c8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a7e      	ldr	r2, [pc, #504]	; (8003914 <HAL_RCC_OscConfig+0x4c8>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003722:	f7fd ff81 	bl	8001628 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372a:	f7fd ff7d 	bl	8001628 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b64      	cmp	r3, #100	; 0x64
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e103      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b75      	ldr	r3, [pc, #468]	; (8003914 <HAL_RCC_OscConfig+0x4c8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x312>
 8003750:	4b6f      	ldr	r3, [pc, #444]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4a6e      	ldr	r2, [pc, #440]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6213      	str	r3, [r2, #32]
 800375c:	e02d      	b.n	80037ba <HAL_RCC_OscConfig+0x36e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x334>
 8003766:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4a69      	ldr	r2, [pc, #420]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	6213      	str	r3, [r2, #32]
 8003772:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4a66      	ldr	r2, [pc, #408]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f023 0304 	bic.w	r3, r3, #4
 800377c:	6213      	str	r3, [r2, #32]
 800377e:	e01c      	b.n	80037ba <HAL_RCC_OscConfig+0x36e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d10c      	bne.n	80037a2 <HAL_RCC_OscConfig+0x356>
 8003788:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a60      	ldr	r2, [pc, #384]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	6213      	str	r3, [r2, #32]
 8003794:	4b5e      	ldr	r3, [pc, #376]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a5d      	ldr	r2, [pc, #372]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6213      	str	r3, [r2, #32]
 80037a0:	e00b      	b.n	80037ba <HAL_RCC_OscConfig+0x36e>
 80037a2:	4b5b      	ldr	r3, [pc, #364]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	4a5a      	ldr	r2, [pc, #360]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6213      	str	r3, [r2, #32]
 80037ae:	4b58      	ldr	r3, [pc, #352]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a57      	ldr	r2, [pc, #348]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d015      	beq.n	80037ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c2:	f7fd ff31 	bl	8001628 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fd ff2d 	bl	8001628 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0b1      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	4b4b      	ldr	r3, [pc, #300]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ee      	beq.n	80037ca <HAL_RCC_OscConfig+0x37e>
 80037ec:	e014      	b.n	8003818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ee:	f7fd ff1b 	bl	8001628 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fd ff17 	bl	8001628 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e09b      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380c:	4b40      	ldr	r3, [pc, #256]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ee      	bne.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d105      	bne.n	800382a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381e:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4a3b      	ldr	r2, [pc, #236]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8087 	beq.w	8003942 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d061      	beq.n	8003904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d146      	bne.n	80038d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003848:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_RCC_OscConfig+0x4cc>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384e:	f7fd feeb 	bl	8001628 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003856:	f7fd fee7 	bl	8001628 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e06d      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003868:	4b29      	ldr	r3, [pc, #164]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f0      	bne.n	8003856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d108      	bne.n	8003890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4921      	ldr	r1, [pc, #132]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003890:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a19      	ldr	r1, [r3, #32]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	430b      	orrs	r3, r1
 80038a2:	491b      	ldr	r1, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fd febb 	bl	8001628 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fd feb7 	bl	8001628 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e03d      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x46a>
 80038d4:	e035      	b.n	8003942 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fd fea4 	bl	8001628 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fd fea0 	bl	8001628 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e026      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x498>
 8003902:	e01e      	b.n	8003942 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e019      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
 8003910:	40021000 	.word	0x40021000
 8003914:	40007000 	.word	0x40007000
 8003918:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_OscConfig+0x500>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	429a      	cmp	r2, r3
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000

08003950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0d0      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b6a      	ldr	r3, [pc, #424]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d910      	bls.n	8003994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b67      	ldr	r3, [pc, #412]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4965      	ldr	r1, [pc, #404]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0b8      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ac:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c4:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d0:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	494d      	ldr	r1, [pc, #308]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d040      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d115      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e07f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e073      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06b      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f023 0203 	bic.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4936      	ldr	r1, [pc, #216]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a40:	f7fd fdf2 	bl	8001628 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fd fdee 	bl	8001628 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e053      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 020c 	and.w	r2, r3, #12
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1eb      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a70:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d210      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 0207 	bic.w	r2, r3, #7
 8003a86:	4922      	ldr	r1, [pc, #136]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e032      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4916      	ldr	r1, [pc, #88]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490e      	ldr	r1, [pc, #56]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ade:	f000 f821 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	490a      	ldr	r1, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1cc>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1d0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fd50 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40021000 	.word	0x40021000
 8003b18:	0800737c 	.word	0x0800737c
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	20000004 	.word	0x20000004

08003b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	b490      	push	{r4, r7}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b2a:	4b29      	ldr	r3, [pc, #164]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b2c:	1d3c      	adds	r4, r7, #4
 8003b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b34:	f240 2301 	movw	r3, #513	; 0x201
 8003b38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d002      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x40>
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x46>
 8003b62:	e02b      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b66:	623b      	str	r3, [r7, #32]
      break;
 8003b68:	e02b      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	0c9b      	lsrs	r3, r3, #18
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3328      	adds	r3, #40	; 0x28
 8003b74:	443b      	add	r3, r7
 8003b76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d012      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	0c5b      	lsrs	r3, r3, #17
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	3328      	adds	r3, #40	; 0x28
 8003b92:	443b      	add	r3, r7
 8003b94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	4a0e      	ldr	r2, [pc, #56]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	e004      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	623b      	str	r3, [r7, #32]
      break;
 8003bba:	e002      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bbe:	623b      	str	r3, [r7, #32]
      break;
 8003bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3728      	adds	r7, #40	; 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc90      	pop	{r4, r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	0800736c 	.word	0x0800736c
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	007a1200 	.word	0x007a1200
 8003bdc:	003d0900 	.word	0x003d0900

08003be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b02      	ldr	r3, [pc, #8]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bf8:	f7ff fff2 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	0800738c 	.word	0x0800738c

08003c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c20:	f7ff ffde 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	0adb      	lsrs	r3, r3, #11
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4903      	ldr	r1, [pc, #12]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	0800738c 	.word	0x0800738c

08003c44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <RCC_Delay+0x34>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <RCC_Delay+0x38>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0a5b      	lsrs	r3, r3, #9
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c60:	bf00      	nop
  }
  while (Delay --);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	60fa      	str	r2, [r7, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f9      	bne.n	8003c60 <RCC_Delay+0x1c>
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	10624dd3 	.word	0x10624dd3

08003c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d07d      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10d      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b4c      	ldr	r3, [pc, #304]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4a4b      	ldr	r2, [pc, #300]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	61d3      	str	r3, [r2, #28]
 8003cb8:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc8:	4b46      	ldr	r3, [pc, #280]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d118      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd4:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a42      	ldr	r2, [pc, #264]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce0:	f7fd fca2 	bl	8001628 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce6:	e008      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce8:	f7fd fc9e 	bl	8001628 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e06d      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d06:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d02e      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d027      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d24:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d2e:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d3a:	4a29      	ldr	r2, [pc, #164]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fd fc6d 	bl	8001628 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fd fc69 	bl	8001628 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e036      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d68:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ee      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4917      	ldr	r1, [pc, #92]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	490b      	ldr	r1, [pc, #44]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4904      	ldr	r1, [pc, #16]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40007000 	.word	0x40007000
 8003de8:	42420440 	.word	0x42420440

08003dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e03f      	b.n	8003e7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd f998 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	; 0x24
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fc25 	bl	8004680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b08a      	sub	sp, #40	; 0x28
 8003e8a:	af02      	add	r7, sp, #8
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d17c      	bne.n	8003fa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_UART_Transmit+0x2c>
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e075      	b.n	8003fa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_UART_Transmit+0x3e>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e06e      	b.n	8003fa2 <HAL_UART_Transmit+0x11c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2221      	movs	r2, #33	; 0x21
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eda:	f7fd fba5 	bl	8001628 <HAL_GetTick>
 8003ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	88fa      	ldrh	r2, [r7, #6]
 8003ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef4:	d108      	bne.n	8003f08 <HAL_UART_Transmit+0x82>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	e003      	b.n	8003f10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f18:	e02a      	b.n	8003f70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2180      	movs	r1, #128	; 0x80
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fa11 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e036      	b.n	8003fa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e007      	b.n	8003f62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1cf      	bne.n	8003f1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2140      	movs	r1, #64	; 0x40
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f9e1 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e006      	b.n	8003fa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3720      	adds	r7, #32
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_UART_IRQHandler+0x52>
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa99 	bl	800452e <UART_Receive_IT>
      return;
 8003ffc:	e17b      	b.n	80042f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80b1 	beq.w	8004168 <HAL_UART_IRQHandler+0x1bc>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_UART_IRQHandler+0x70>
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80a6 	beq.w	8004168 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_UART_IRQHandler+0x90>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_UART_IRQHandler+0xb0>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f043 0202 	orr.w	r2, r3, #2
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_UART_IRQHandler+0xd0>
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f043 0204 	orr.w	r2, r3, #4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00f      	beq.n	80040a6 <HAL_UART_IRQHandler+0xfa>
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_UART_IRQHandler+0xee>
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f043 0208 	orr.w	r2, r3, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 811e 	beq.w	80042ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_UART_IRQHandler+0x11e>
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fa32 	bl	800452e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <HAL_UART_IRQHandler+0x146>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d031      	beq.n	8004156 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f974 	bl	80043e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d023      	beq.n	800414e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	2b00      	cmp	r3, #0
 800411c:	d013      	beq.n	8004146 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	4a76      	ldr	r2, [pc, #472]	; (80042fc <HAL_UART_IRQHandler+0x350>)
 8004124:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fdd8 	bl	8002ce0 <HAL_DMA_Abort_IT>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004140:	4610      	mov	r0, r2
 8004142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e00e      	b.n	8004164 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8ec 	bl	8004324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e00a      	b.n	8004164 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8e8 	bl	8004324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e006      	b.n	8004164 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f8e4 	bl	8004324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004162:	e0c3      	b.n	80042ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	bf00      	nop
    return;
 8004166:	e0c1      	b.n	80042ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 80a1 	bne.w	80042b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 809b 	beq.w	80042b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8095 	beq.w	80042b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d04e      	beq.n	800424c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80041b8:	8a3b      	ldrh	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8098 	beq.w	80042f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041c4:	8a3a      	ldrh	r2, [r7, #16]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	f080 8092 	bcs.w	80042f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8a3a      	ldrh	r2, [r7, #16]
 80041d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d02b      	beq.n	8004234 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0210 	bic.w	r2, r2, #16
 8004228:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fd1b 	bl	8002c6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800423c:	b29b      	uxth	r3, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	b29b      	uxth	r3, r3
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f876 	bl	8004336 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800424a:	e051      	b.n	80042f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004254:	b29b      	uxth	r3, r3
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d047      	beq.n	80042f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004264:	8a7b      	ldrh	r3, [r7, #18]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d044      	beq.n	80042f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004278:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0210 	bic.w	r2, r2, #16
 80042a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042a8:	8a7b      	ldrh	r3, [r7, #18]
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f842 	bl	8004336 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042b2:	e01f      	b.n	80042f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_UART_IRQHandler+0x324>
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f8c9 	bl	8004460 <UART_Transmit_IT>
    return;
 80042ce:	e012      	b.n	80042f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00d      	beq.n	80042f6 <HAL_UART_IRQHandler+0x34a>
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f90a 	bl	80044fe <UART_EndTransmit_IT>
    return;
 80042ea:	e004      	b.n	80042f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80042ec:	bf00      	nop
 80042ee:	e002      	b.n	80042f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80042f4:	bf00      	nop
  }
}
 80042f6:	3728      	adds	r7, #40	; 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08004439 	.word	0x08004439

08004300 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr

08004312 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435c:	e02c      	b.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d028      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x30>
 800436c:	f7fd f95c 	bl	8001628 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d21d      	bcs.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800438a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e00f      	b.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4013      	ands	r3, r2
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d0c3      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0210 	bic.w	r2, r2, #16
 800441e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff ff66 	bl	8004324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b21      	cmp	r3, #33	; 0x21
 8004472:	d13e      	bne.n	80044f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447c:	d114      	bne.n	80044a8 <UART_Transmit_IT+0x48>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d110      	bne.n	80044a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]
 80044a6:	e008      	b.n	80044ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	1c59      	adds	r1, r3, #1
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6211      	str	r1, [r2, #32]
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4619      	mov	r1, r3
 80044c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004514:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff feee 	bl	8004300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b22      	cmp	r3, #34	; 0x22
 8004540:	f040 8099 	bne.w	8004676 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d117      	bne.n	800457e <UART_Receive_IT+0x50>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d113      	bne.n	800457e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456c:	b29a      	uxth	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	1c9a      	adds	r2, r3, #2
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
 800457c:	e026      	b.n	80045cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	d007      	beq.n	80045a2 <UART_Receive_IT+0x74>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <UART_Receive_IT+0x82>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e008      	b.n	80045c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4619      	mov	r1, r3
 80045da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d148      	bne.n	8004672 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0220 	bic.w	r2, r2, #32
 80045ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	2b01      	cmp	r3, #1
 800461e:	d123      	bne.n	8004668 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0210 	bic.w	r2, r2, #16
 8004634:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d10a      	bne.n	800465a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fe68 	bl	8004336 <HAL_UARTEx_RxEventCallback>
 8004666:	e002      	b.n	800466e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fe52 	bl	8004312 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e002      	b.n	8004678 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ba:	f023 030c 	bic.w	r3, r3, #12
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <UART_SetConfig+0x114>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046e8:	f7ff fa98 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	e002      	b.n	80046f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7ff fa80 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80046f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009a      	lsls	r2, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	4a22      	ldr	r2, [pc, #136]	; (8004798 <UART_SetConfig+0x118>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	0119      	lsls	r1, r3, #4
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	fbb2 f2f3 	udiv	r2, r2, r3
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <UART_SetConfig+0x118>)
 800472e:	fba3 0302 	umull	r0, r3, r3, r2
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2064      	movs	r0, #100	; 0x64
 8004736:	fb00 f303 	mul.w	r3, r0, r3
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	3332      	adds	r3, #50	; 0x32
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <UART_SetConfig+0x118>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474c:	4419      	add	r1, r3
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009a      	lsls	r2, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	fbb2 f2f3 	udiv	r2, r2, r3
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <UART_SetConfig+0x118>)
 8004766:	fba3 0302 	umull	r0, r3, r3, r2
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	2064      	movs	r0, #100	; 0x64
 800476e:	fb00 f303 	mul.w	r3, r0, r3
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	3332      	adds	r3, #50	; 0x32
 8004778:	4a07      	ldr	r2, [pc, #28]	; (8004798 <UART_SetConfig+0x118>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	f003 020f 	and.w	r2, r3, #15
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	440a      	add	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40013800 	.word	0x40013800
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <__errno>:
 800479c:	4b01      	ldr	r3, [pc, #4]	; (80047a4 <__errno+0x8>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000000c 	.word	0x2000000c

080047a8 <__libc_init_array>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	2600      	movs	r6, #0
 80047ac:	4d0c      	ldr	r5, [pc, #48]	; (80047e0 <__libc_init_array+0x38>)
 80047ae:	4c0d      	ldr	r4, [pc, #52]	; (80047e4 <__libc_init_array+0x3c>)
 80047b0:	1b64      	subs	r4, r4, r5
 80047b2:	10a4      	asrs	r4, r4, #2
 80047b4:	42a6      	cmp	r6, r4
 80047b6:	d109      	bne.n	80047cc <__libc_init_array+0x24>
 80047b8:	f002 fda4 	bl	8007304 <_init>
 80047bc:	2600      	movs	r6, #0
 80047be:	4d0a      	ldr	r5, [pc, #40]	; (80047e8 <__libc_init_array+0x40>)
 80047c0:	4c0a      	ldr	r4, [pc, #40]	; (80047ec <__libc_init_array+0x44>)
 80047c2:	1b64      	subs	r4, r4, r5
 80047c4:	10a4      	asrs	r4, r4, #2
 80047c6:	42a6      	cmp	r6, r4
 80047c8:	d105      	bne.n	80047d6 <__libc_init_array+0x2e>
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d0:	4798      	blx	r3
 80047d2:	3601      	adds	r6, #1
 80047d4:	e7ee      	b.n	80047b4 <__libc_init_array+0xc>
 80047d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047da:	4798      	blx	r3
 80047dc:	3601      	adds	r6, #1
 80047de:	e7f2      	b.n	80047c6 <__libc_init_array+0x1e>
 80047e0:	0800776c 	.word	0x0800776c
 80047e4:	0800776c 	.word	0x0800776c
 80047e8:	0800776c 	.word	0x0800776c
 80047ec:	08007770 	.word	0x08007770

080047f0 <memset>:
 80047f0:	4603      	mov	r3, r0
 80047f2:	4402      	add	r2, r0
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d100      	bne.n	80047fa <memset+0xa>
 80047f8:	4770      	bx	lr
 80047fa:	f803 1b01 	strb.w	r1, [r3], #1
 80047fe:	e7f9      	b.n	80047f4 <memset+0x4>

08004800 <__cvt>:
 8004800:	2b00      	cmp	r3, #0
 8004802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004806:	461f      	mov	r7, r3
 8004808:	bfbb      	ittet	lt
 800480a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800480e:	461f      	movlt	r7, r3
 8004810:	2300      	movge	r3, #0
 8004812:	232d      	movlt	r3, #45	; 0x2d
 8004814:	b088      	sub	sp, #32
 8004816:	4614      	mov	r4, r2
 8004818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800481a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800481c:	7013      	strb	r3, [r2, #0]
 800481e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004820:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004824:	f023 0820 	bic.w	r8, r3, #32
 8004828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800482c:	d005      	beq.n	800483a <__cvt+0x3a>
 800482e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004832:	d100      	bne.n	8004836 <__cvt+0x36>
 8004834:	3501      	adds	r5, #1
 8004836:	2302      	movs	r3, #2
 8004838:	e000      	b.n	800483c <__cvt+0x3c>
 800483a:	2303      	movs	r3, #3
 800483c:	aa07      	add	r2, sp, #28
 800483e:	9204      	str	r2, [sp, #16]
 8004840:	aa06      	add	r2, sp, #24
 8004842:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004846:	e9cd 3500 	strd	r3, r5, [sp]
 800484a:	4622      	mov	r2, r4
 800484c:	463b      	mov	r3, r7
 800484e:	f000 fdfb 	bl	8005448 <_dtoa_r>
 8004852:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004856:	4606      	mov	r6, r0
 8004858:	d102      	bne.n	8004860 <__cvt+0x60>
 800485a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800485c:	07db      	lsls	r3, r3, #31
 800485e:	d522      	bpl.n	80048a6 <__cvt+0xa6>
 8004860:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004864:	eb06 0905 	add.w	r9, r6, r5
 8004868:	d110      	bne.n	800488c <__cvt+0x8c>
 800486a:	7833      	ldrb	r3, [r6, #0]
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d10a      	bne.n	8004886 <__cvt+0x86>
 8004870:	2200      	movs	r2, #0
 8004872:	2300      	movs	r3, #0
 8004874:	4620      	mov	r0, r4
 8004876:	4639      	mov	r1, r7
 8004878:	f7fc f896 	bl	80009a8 <__aeabi_dcmpeq>
 800487c:	b918      	cbnz	r0, 8004886 <__cvt+0x86>
 800487e:	f1c5 0501 	rsb	r5, r5, #1
 8004882:	f8ca 5000 	str.w	r5, [sl]
 8004886:	f8da 3000 	ldr.w	r3, [sl]
 800488a:	4499      	add	r9, r3
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	4620      	mov	r0, r4
 8004892:	4639      	mov	r1, r7
 8004894:	f7fc f888 	bl	80009a8 <__aeabi_dcmpeq>
 8004898:	b108      	cbz	r0, 800489e <__cvt+0x9e>
 800489a:	f8cd 901c 	str.w	r9, [sp, #28]
 800489e:	2230      	movs	r2, #48	; 0x30
 80048a0:	9b07      	ldr	r3, [sp, #28]
 80048a2:	454b      	cmp	r3, r9
 80048a4:	d307      	bcc.n	80048b6 <__cvt+0xb6>
 80048a6:	4630      	mov	r0, r6
 80048a8:	9b07      	ldr	r3, [sp, #28]
 80048aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048ac:	1b9b      	subs	r3, r3, r6
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	b008      	add	sp, #32
 80048b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b6:	1c59      	adds	r1, r3, #1
 80048b8:	9107      	str	r1, [sp, #28]
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e7f0      	b.n	80048a0 <__cvt+0xa0>

080048be <__exponent>:
 80048be:	4603      	mov	r3, r0
 80048c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048c2:	2900      	cmp	r1, #0
 80048c4:	f803 2b02 	strb.w	r2, [r3], #2
 80048c8:	bfb6      	itet	lt
 80048ca:	222d      	movlt	r2, #45	; 0x2d
 80048cc:	222b      	movge	r2, #43	; 0x2b
 80048ce:	4249      	neglt	r1, r1
 80048d0:	2909      	cmp	r1, #9
 80048d2:	7042      	strb	r2, [r0, #1]
 80048d4:	dd2b      	ble.n	800492e <__exponent+0x70>
 80048d6:	f10d 0407 	add.w	r4, sp, #7
 80048da:	46a4      	mov	ip, r4
 80048dc:	270a      	movs	r7, #10
 80048de:	fb91 f6f7 	sdiv	r6, r1, r7
 80048e2:	460a      	mov	r2, r1
 80048e4:	46a6      	mov	lr, r4
 80048e6:	fb07 1516 	mls	r5, r7, r6, r1
 80048ea:	2a63      	cmp	r2, #99	; 0x63
 80048ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80048f0:	4631      	mov	r1, r6
 80048f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80048f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80048fa:	dcf0      	bgt.n	80048de <__exponent+0x20>
 80048fc:	3130      	adds	r1, #48	; 0x30
 80048fe:	f1ae 0502 	sub.w	r5, lr, #2
 8004902:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004906:	4629      	mov	r1, r5
 8004908:	1c44      	adds	r4, r0, #1
 800490a:	4561      	cmp	r1, ip
 800490c:	d30a      	bcc.n	8004924 <__exponent+0x66>
 800490e:	f10d 0209 	add.w	r2, sp, #9
 8004912:	eba2 020e 	sub.w	r2, r2, lr
 8004916:	4565      	cmp	r5, ip
 8004918:	bf88      	it	hi
 800491a:	2200      	movhi	r2, #0
 800491c:	4413      	add	r3, r2
 800491e:	1a18      	subs	r0, r3, r0
 8004920:	b003      	add	sp, #12
 8004922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004924:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004928:	f804 2f01 	strb.w	r2, [r4, #1]!
 800492c:	e7ed      	b.n	800490a <__exponent+0x4c>
 800492e:	2330      	movs	r3, #48	; 0x30
 8004930:	3130      	adds	r1, #48	; 0x30
 8004932:	7083      	strb	r3, [r0, #2]
 8004934:	70c1      	strb	r1, [r0, #3]
 8004936:	1d03      	adds	r3, r0, #4
 8004938:	e7f1      	b.n	800491e <__exponent+0x60>
	...

0800493c <_printf_float>:
 800493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004940:	b091      	sub	sp, #68	; 0x44
 8004942:	460c      	mov	r4, r1
 8004944:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004948:	4616      	mov	r6, r2
 800494a:	461f      	mov	r7, r3
 800494c:	4605      	mov	r5, r0
 800494e:	f001 fd1d 	bl	800638c <_localeconv_r>
 8004952:	6803      	ldr	r3, [r0, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	9309      	str	r3, [sp, #36]	; 0x24
 8004958:	f7fb fbfa 	bl	8000150 <strlen>
 800495c:	2300      	movs	r3, #0
 800495e:	930e      	str	r3, [sp, #56]	; 0x38
 8004960:	f8d8 3000 	ldr.w	r3, [r8]
 8004964:	900a      	str	r0, [sp, #40]	; 0x28
 8004966:	3307      	adds	r3, #7
 8004968:	f023 0307 	bic.w	r3, r3, #7
 800496c:	f103 0208 	add.w	r2, r3, #8
 8004970:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004974:	f8d4 b000 	ldr.w	fp, [r4]
 8004978:	f8c8 2000 	str.w	r2, [r8]
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004984:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004988:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800498c:	930b      	str	r3, [sp, #44]	; 0x2c
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	4640      	mov	r0, r8
 8004994:	4b9c      	ldr	r3, [pc, #624]	; (8004c08 <_printf_float+0x2cc>)
 8004996:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004998:	f7fc f838 	bl	8000a0c <__aeabi_dcmpun>
 800499c:	bb70      	cbnz	r0, 80049fc <_printf_float+0xc0>
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	4640      	mov	r0, r8
 80049a4:	4b98      	ldr	r3, [pc, #608]	; (8004c08 <_printf_float+0x2cc>)
 80049a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049a8:	f7fc f812 	bl	80009d0 <__aeabi_dcmple>
 80049ac:	bb30      	cbnz	r0, 80049fc <_printf_float+0xc0>
 80049ae:	2200      	movs	r2, #0
 80049b0:	2300      	movs	r3, #0
 80049b2:	4640      	mov	r0, r8
 80049b4:	4651      	mov	r1, sl
 80049b6:	f7fc f801 	bl	80009bc <__aeabi_dcmplt>
 80049ba:	b110      	cbz	r0, 80049c2 <_printf_float+0x86>
 80049bc:	232d      	movs	r3, #45	; 0x2d
 80049be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c2:	4b92      	ldr	r3, [pc, #584]	; (8004c0c <_printf_float+0x2d0>)
 80049c4:	4892      	ldr	r0, [pc, #584]	; (8004c10 <_printf_float+0x2d4>)
 80049c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80049ca:	bf94      	ite	ls
 80049cc:	4698      	movls	r8, r3
 80049ce:	4680      	movhi	r8, r0
 80049d0:	2303      	movs	r3, #3
 80049d2:	f04f 0a00 	mov.w	sl, #0
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	f02b 0304 	bic.w	r3, fp, #4
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	4633      	mov	r3, r6
 80049e0:	4621      	mov	r1, r4
 80049e2:	4628      	mov	r0, r5
 80049e4:	9700      	str	r7, [sp, #0]
 80049e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80049e8:	f000 f9d4 	bl	8004d94 <_printf_common>
 80049ec:	3001      	adds	r0, #1
 80049ee:	f040 8090 	bne.w	8004b12 <_printf_float+0x1d6>
 80049f2:	f04f 30ff 	mov.w	r0, #4294967295
 80049f6:	b011      	add	sp, #68	; 0x44
 80049f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fc:	4642      	mov	r2, r8
 80049fe:	4653      	mov	r3, sl
 8004a00:	4640      	mov	r0, r8
 8004a02:	4651      	mov	r1, sl
 8004a04:	f7fc f802 	bl	8000a0c <__aeabi_dcmpun>
 8004a08:	b148      	cbz	r0, 8004a1e <_printf_float+0xe2>
 8004a0a:	f1ba 0f00 	cmp.w	sl, #0
 8004a0e:	bfb8      	it	lt
 8004a10:	232d      	movlt	r3, #45	; 0x2d
 8004a12:	4880      	ldr	r0, [pc, #512]	; (8004c14 <_printf_float+0x2d8>)
 8004a14:	bfb8      	it	lt
 8004a16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a1a:	4b7f      	ldr	r3, [pc, #508]	; (8004c18 <_printf_float+0x2dc>)
 8004a1c:	e7d3      	b.n	80049c6 <_printf_float+0x8a>
 8004a1e:	6863      	ldr	r3, [r4, #4]
 8004a20:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	d142      	bne.n	8004aae <_printf_float+0x172>
 8004a28:	2306      	movs	r3, #6
 8004a2a:	6063      	str	r3, [r4, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	9206      	str	r2, [sp, #24]
 8004a30:	aa0e      	add	r2, sp, #56	; 0x38
 8004a32:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004a36:	aa0d      	add	r2, sp, #52	; 0x34
 8004a38:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a3c:	9203      	str	r2, [sp, #12]
 8004a3e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	4642      	mov	r2, r8
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4628      	mov	r0, r5
 8004a50:	4653      	mov	r3, sl
 8004a52:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a54:	f7ff fed4 	bl	8004800 <__cvt>
 8004a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a5a:	4680      	mov	r8, r0
 8004a5c:	2947      	cmp	r1, #71	; 0x47
 8004a5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a60:	d108      	bne.n	8004a74 <_printf_float+0x138>
 8004a62:	1cc8      	adds	r0, r1, #3
 8004a64:	db02      	blt.n	8004a6c <_printf_float+0x130>
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	dd40      	ble.n	8004aee <_printf_float+0x1b2>
 8004a6c:	f1a9 0902 	sub.w	r9, r9, #2
 8004a70:	fa5f f989 	uxtb.w	r9, r9
 8004a74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a78:	d81f      	bhi.n	8004aba <_printf_float+0x17e>
 8004a7a:	464a      	mov	r2, r9
 8004a7c:	3901      	subs	r1, #1
 8004a7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a82:	910d      	str	r1, [sp, #52]	; 0x34
 8004a84:	f7ff ff1b 	bl	80048be <__exponent>
 8004a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a8a:	4682      	mov	sl, r0
 8004a8c:	1813      	adds	r3, r2, r0
 8004a8e:	2a01      	cmp	r2, #1
 8004a90:	6123      	str	r3, [r4, #16]
 8004a92:	dc02      	bgt.n	8004a9a <_printf_float+0x15e>
 8004a94:	6822      	ldr	r2, [r4, #0]
 8004a96:	07d2      	lsls	r2, r2, #31
 8004a98:	d501      	bpl.n	8004a9e <_printf_float+0x162>
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	6123      	str	r3, [r4, #16]
 8004a9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d09b      	beq.n	80049de <_printf_float+0xa2>
 8004aa6:	232d      	movs	r3, #45	; 0x2d
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	e797      	b.n	80049de <_printf_float+0xa2>
 8004aae:	2947      	cmp	r1, #71	; 0x47
 8004ab0:	d1bc      	bne.n	8004a2c <_printf_float+0xf0>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1ba      	bne.n	8004a2c <_printf_float+0xf0>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e7b7      	b.n	8004a2a <_printf_float+0xee>
 8004aba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004abe:	d118      	bne.n	8004af2 <_printf_float+0x1b6>
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	6863      	ldr	r3, [r4, #4]
 8004ac4:	dd0b      	ble.n	8004ade <_printf_float+0x1a2>
 8004ac6:	6121      	str	r1, [r4, #16]
 8004ac8:	b913      	cbnz	r3, 8004ad0 <_printf_float+0x194>
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	07d0      	lsls	r0, r2, #31
 8004ace:	d502      	bpl.n	8004ad6 <_printf_float+0x19a>
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	440b      	add	r3, r1
 8004ad4:	6123      	str	r3, [r4, #16]
 8004ad6:	f04f 0a00 	mov.w	sl, #0
 8004ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8004adc:	e7df      	b.n	8004a9e <_printf_float+0x162>
 8004ade:	b913      	cbnz	r3, 8004ae6 <_printf_float+0x1aa>
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	07d2      	lsls	r2, r2, #31
 8004ae4:	d501      	bpl.n	8004aea <_printf_float+0x1ae>
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	e7f4      	b.n	8004ad4 <_printf_float+0x198>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e7f2      	b.n	8004ad4 <_printf_float+0x198>
 8004aee:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af4:	4299      	cmp	r1, r3
 8004af6:	db05      	blt.n	8004b04 <_printf_float+0x1c8>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	6121      	str	r1, [r4, #16]
 8004afc:	07d8      	lsls	r0, r3, #31
 8004afe:	d5ea      	bpl.n	8004ad6 <_printf_float+0x19a>
 8004b00:	1c4b      	adds	r3, r1, #1
 8004b02:	e7e7      	b.n	8004ad4 <_printf_float+0x198>
 8004b04:	2900      	cmp	r1, #0
 8004b06:	bfcc      	ite	gt
 8004b08:	2201      	movgt	r2, #1
 8004b0a:	f1c1 0202 	rsble	r2, r1, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	e7e0      	b.n	8004ad4 <_printf_float+0x198>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	055a      	lsls	r2, r3, #21
 8004b16:	d407      	bmi.n	8004b28 <_printf_float+0x1ec>
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	d12b      	bne.n	8004b7e <_printf_float+0x242>
 8004b26:	e764      	b.n	80049f2 <_printf_float+0xb6>
 8004b28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b2c:	f240 80dd 	bls.w	8004cea <_printf_float+0x3ae>
 8004b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b34:	2200      	movs	r2, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	f7fb ff36 	bl	80009a8 <__aeabi_dcmpeq>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d033      	beq.n	8004ba8 <_printf_float+0x26c>
 8004b40:	2301      	movs	r3, #1
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	4a35      	ldr	r2, [pc, #212]	; (8004c1c <_printf_float+0x2e0>)
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f af51 	beq.w	80049f2 <_printf_float+0xb6>
 8004b50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b54:	429a      	cmp	r2, r3
 8004b56:	db02      	blt.n	8004b5e <_printf_float+0x222>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	07d8      	lsls	r0, r3, #31
 8004b5c:	d50f      	bpl.n	8004b7e <_printf_float+0x242>
 8004b5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b62:	4631      	mov	r1, r6
 8004b64:	4628      	mov	r0, r5
 8004b66:	47b8      	blx	r7
 8004b68:	3001      	adds	r0, #1
 8004b6a:	f43f af42 	beq.w	80049f2 <_printf_float+0xb6>
 8004b6e:	f04f 0800 	mov.w	r8, #0
 8004b72:	f104 091a 	add.w	r9, r4, #26
 8004b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	4543      	cmp	r3, r8
 8004b7c:	dc09      	bgt.n	8004b92 <_printf_float+0x256>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	079b      	lsls	r3, r3, #30
 8004b82:	f100 8102 	bmi.w	8004d8a <_printf_float+0x44e>
 8004b86:	68e0      	ldr	r0, [r4, #12]
 8004b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	bfb8      	it	lt
 8004b8e:	4618      	movlt	r0, r3
 8004b90:	e731      	b.n	80049f6 <_printf_float+0xba>
 8004b92:	2301      	movs	r3, #1
 8004b94:	464a      	mov	r2, r9
 8004b96:	4631      	mov	r1, r6
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b8      	blx	r7
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	f43f af28 	beq.w	80049f2 <_printf_float+0xb6>
 8004ba2:	f108 0801 	add.w	r8, r8, #1
 8004ba6:	e7e6      	b.n	8004b76 <_printf_float+0x23a>
 8004ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dc38      	bgt.n	8004c20 <_printf_float+0x2e4>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <_printf_float+0x2e0>)
 8004bb6:	47b8      	blx	r7
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f43f af1a 	beq.w	80049f2 <_printf_float+0xb6>
 8004bbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	d102      	bne.n	8004bcc <_printf_float+0x290>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	07d9      	lsls	r1, r3, #31
 8004bca:	d5d8      	bpl.n	8004b7e <_printf_float+0x242>
 8004bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	f43f af0b 	beq.w	80049f2 <_printf_float+0xb6>
 8004bdc:	f04f 0900 	mov.w	r9, #0
 8004be0:	f104 0a1a 	add.w	sl, r4, #26
 8004be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004be6:	425b      	negs	r3, r3
 8004be8:	454b      	cmp	r3, r9
 8004bea:	dc01      	bgt.n	8004bf0 <_printf_float+0x2b4>
 8004bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bee:	e794      	b.n	8004b1a <_printf_float+0x1de>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4652      	mov	r2, sl
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	47b8      	blx	r7
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	f43f aef9 	beq.w	80049f2 <_printf_float+0xb6>
 8004c00:	f109 0901 	add.w	r9, r9, #1
 8004c04:	e7ee      	b.n	8004be4 <_printf_float+0x2a8>
 8004c06:	bf00      	nop
 8004c08:	7fefffff 	.word	0x7fefffff
 8004c0c:	08007398 	.word	0x08007398
 8004c10:	0800739c 	.word	0x0800739c
 8004c14:	080073a4 	.word	0x080073a4
 8004c18:	080073a0 	.word	0x080073a0
 8004c1c:	080073a8 	.word	0x080073a8
 8004c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c24:	429a      	cmp	r2, r3
 8004c26:	bfa8      	it	ge
 8004c28:	461a      	movge	r2, r3
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	4691      	mov	r9, r2
 8004c2e:	dc37      	bgt.n	8004ca0 <_printf_float+0x364>
 8004c30:	f04f 0b00 	mov.w	fp, #0
 8004c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c38:	f104 021a 	add.w	r2, r4, #26
 8004c3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c40:	ebaa 0309 	sub.w	r3, sl, r9
 8004c44:	455b      	cmp	r3, fp
 8004c46:	dc33      	bgt.n	8004cb0 <_printf_float+0x374>
 8004c48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	db3b      	blt.n	8004cc8 <_printf_float+0x38c>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	07da      	lsls	r2, r3, #31
 8004c54:	d438      	bmi.n	8004cc8 <_printf_float+0x38c>
 8004c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c5a:	eba3 020a 	sub.w	r2, r3, sl
 8004c5e:	eba3 0901 	sub.w	r9, r3, r1
 8004c62:	4591      	cmp	r9, r2
 8004c64:	bfa8      	it	ge
 8004c66:	4691      	movge	r9, r2
 8004c68:	f1b9 0f00 	cmp.w	r9, #0
 8004c6c:	dc34      	bgt.n	8004cd8 <_printf_float+0x39c>
 8004c6e:	f04f 0800 	mov.w	r8, #0
 8004c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c76:	f104 0a1a 	add.w	sl, r4, #26
 8004c7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	eba3 0309 	sub.w	r3, r3, r9
 8004c84:	4543      	cmp	r3, r8
 8004c86:	f77f af7a 	ble.w	8004b7e <_printf_float+0x242>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4652      	mov	r2, sl
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f aeac 	beq.w	80049f2 <_printf_float+0xb6>
 8004c9a:	f108 0801 	add.w	r8, r8, #1
 8004c9e:	e7ec      	b.n	8004c7a <_printf_float+0x33e>
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	47b8      	blx	r7
 8004caa:	3001      	adds	r0, #1
 8004cac:	d1c0      	bne.n	8004c30 <_printf_float+0x2f4>
 8004cae:	e6a0      	b.n	80049f2 <_printf_float+0xb6>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f ae99 	beq.w	80049f2 <_printf_float+0xb6>
 8004cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cc2:	f10b 0b01 	add.w	fp, fp, #1
 8004cc6:	e7b9      	b.n	8004c3c <_printf_float+0x300>
 8004cc8:	4631      	mov	r1, r6
 8004cca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d1bf      	bne.n	8004c56 <_printf_float+0x31a>
 8004cd6:	e68c      	b.n	80049f2 <_printf_float+0xb6>
 8004cd8:	464b      	mov	r3, r9
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4628      	mov	r0, r5
 8004cde:	eb08 020a 	add.w	r2, r8, sl
 8004ce2:	47b8      	blx	r7
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d1c2      	bne.n	8004c6e <_printf_float+0x332>
 8004ce8:	e683      	b.n	80049f2 <_printf_float+0xb6>
 8004cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cec:	2a01      	cmp	r2, #1
 8004cee:	dc01      	bgt.n	8004cf4 <_printf_float+0x3b8>
 8004cf0:	07db      	lsls	r3, r3, #31
 8004cf2:	d537      	bpl.n	8004d64 <_printf_float+0x428>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f ae77 	beq.w	80049f2 <_printf_float+0xb6>
 8004d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f ae6f 	beq.w	80049f2 <_printf_float+0xb6>
 8004d14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f7fb fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8004d20:	b9d8      	cbnz	r0, 8004d5a <_printf_float+0x41e>
 8004d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d24:	f108 0201 	add.w	r2, r8, #1
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	d10e      	bne.n	8004d52 <_printf_float+0x416>
 8004d34:	e65d      	b.n	80049f2 <_printf_float+0xb6>
 8004d36:	2301      	movs	r3, #1
 8004d38:	464a      	mov	r2, r9
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f ae56 	beq.w	80049f2 <_printf_float+0xb6>
 8004d46:	f108 0801 	add.w	r8, r8, #1
 8004d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	4543      	cmp	r3, r8
 8004d50:	dcf1      	bgt.n	8004d36 <_printf_float+0x3fa>
 8004d52:	4653      	mov	r3, sl
 8004d54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d58:	e6e0      	b.n	8004b1c <_printf_float+0x1e0>
 8004d5a:	f04f 0800 	mov.w	r8, #0
 8004d5e:	f104 091a 	add.w	r9, r4, #26
 8004d62:	e7f2      	b.n	8004d4a <_printf_float+0x40e>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4642      	mov	r2, r8
 8004d68:	e7df      	b.n	8004d2a <_printf_float+0x3ee>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	464a      	mov	r2, r9
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	f43f ae3c 	beq.w	80049f2 <_printf_float+0xb6>
 8004d7a:	f108 0801 	add.w	r8, r8, #1
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d82:	1a5b      	subs	r3, r3, r1
 8004d84:	4543      	cmp	r3, r8
 8004d86:	dcf0      	bgt.n	8004d6a <_printf_float+0x42e>
 8004d88:	e6fd      	b.n	8004b86 <_printf_float+0x24a>
 8004d8a:	f04f 0800 	mov.w	r8, #0
 8004d8e:	f104 0919 	add.w	r9, r4, #25
 8004d92:	e7f4      	b.n	8004d7e <_printf_float+0x442>

08004d94 <_printf_common>:
 8004d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d98:	4616      	mov	r6, r2
 8004d9a:	4699      	mov	r9, r3
 8004d9c:	688a      	ldr	r2, [r1, #8]
 8004d9e:	690b      	ldr	r3, [r1, #16]
 8004da0:	4607      	mov	r7, r0
 8004da2:	4293      	cmp	r3, r2
 8004da4:	bfb8      	it	lt
 8004da6:	4613      	movlt	r3, r2
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dae:	460c      	mov	r4, r1
 8004db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004db4:	b10a      	cbz	r2, 8004dba <_printf_common+0x26>
 8004db6:	3301      	adds	r3, #1
 8004db8:	6033      	str	r3, [r6, #0]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	0699      	lsls	r1, r3, #26
 8004dbe:	bf42      	ittt	mi
 8004dc0:	6833      	ldrmi	r3, [r6, #0]
 8004dc2:	3302      	addmi	r3, #2
 8004dc4:	6033      	strmi	r3, [r6, #0]
 8004dc6:	6825      	ldr	r5, [r4, #0]
 8004dc8:	f015 0506 	ands.w	r5, r5, #6
 8004dcc:	d106      	bne.n	8004ddc <_printf_common+0x48>
 8004dce:	f104 0a19 	add.w	sl, r4, #25
 8004dd2:	68e3      	ldr	r3, [r4, #12]
 8004dd4:	6832      	ldr	r2, [r6, #0]
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	42ab      	cmp	r3, r5
 8004dda:	dc28      	bgt.n	8004e2e <_printf_common+0x9a>
 8004ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004de0:	1e13      	subs	r3, r2, #0
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	bf18      	it	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	0692      	lsls	r2, r2, #26
 8004dea:	d42d      	bmi.n	8004e48 <_printf_common+0xb4>
 8004dec:	4649      	mov	r1, r9
 8004dee:	4638      	mov	r0, r7
 8004df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d020      	beq.n	8004e3c <_printf_common+0xa8>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	68e5      	ldr	r5, [r4, #12]
 8004dfe:	f003 0306 	and.w	r3, r3, #6
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	bf18      	it	ne
 8004e06:	2500      	movne	r5, #0
 8004e08:	6832      	ldr	r2, [r6, #0]
 8004e0a:	f04f 0600 	mov.w	r6, #0
 8004e0e:	68a3      	ldr	r3, [r4, #8]
 8004e10:	bf08      	it	eq
 8004e12:	1aad      	subeq	r5, r5, r2
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	bf08      	it	eq
 8004e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bfc4      	itt	gt
 8004e20:	1a9b      	subgt	r3, r3, r2
 8004e22:	18ed      	addgt	r5, r5, r3
 8004e24:	341a      	adds	r4, #26
 8004e26:	42b5      	cmp	r5, r6
 8004e28:	d11a      	bne.n	8004e60 <_printf_common+0xcc>
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e008      	b.n	8004e40 <_printf_common+0xac>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4652      	mov	r2, sl
 8004e32:	4649      	mov	r1, r9
 8004e34:	4638      	mov	r0, r7
 8004e36:	47c0      	blx	r8
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d103      	bne.n	8004e44 <_printf_common+0xb0>
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e44:	3501      	adds	r5, #1
 8004e46:	e7c4      	b.n	8004dd2 <_printf_common+0x3e>
 8004e48:	2030      	movs	r0, #48	; 0x30
 8004e4a:	18e1      	adds	r1, r4, r3
 8004e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e56:	4422      	add	r2, r4
 8004e58:	3302      	adds	r3, #2
 8004e5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e5e:	e7c5      	b.n	8004dec <_printf_common+0x58>
 8004e60:	2301      	movs	r3, #1
 8004e62:	4622      	mov	r2, r4
 8004e64:	4649      	mov	r1, r9
 8004e66:	4638      	mov	r0, r7
 8004e68:	47c0      	blx	r8
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d0e6      	beq.n	8004e3c <_printf_common+0xa8>
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7d9      	b.n	8004e26 <_printf_common+0x92>
	...

08004e74 <_printf_i>:
 8004e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	7e0f      	ldrb	r7, [r1, #24]
 8004e7a:	4691      	mov	r9, r2
 8004e7c:	2f78      	cmp	r7, #120	; 0x78
 8004e7e:	4680      	mov	r8, r0
 8004e80:	460c      	mov	r4, r1
 8004e82:	469a      	mov	sl, r3
 8004e84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e8a:	d807      	bhi.n	8004e9c <_printf_i+0x28>
 8004e8c:	2f62      	cmp	r7, #98	; 0x62
 8004e8e:	d80a      	bhi.n	8004ea6 <_printf_i+0x32>
 8004e90:	2f00      	cmp	r7, #0
 8004e92:	f000 80d9 	beq.w	8005048 <_printf_i+0x1d4>
 8004e96:	2f58      	cmp	r7, #88	; 0x58
 8004e98:	f000 80a4 	beq.w	8004fe4 <_printf_i+0x170>
 8004e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ea4:	e03a      	b.n	8004f1c <_printf_i+0xa8>
 8004ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eaa:	2b15      	cmp	r3, #21
 8004eac:	d8f6      	bhi.n	8004e9c <_printf_i+0x28>
 8004eae:	a101      	add	r1, pc, #4	; (adr r1, 8004eb4 <_printf_i+0x40>)
 8004eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eb4:	08004f0d 	.word	0x08004f0d
 8004eb8:	08004f21 	.word	0x08004f21
 8004ebc:	08004e9d 	.word	0x08004e9d
 8004ec0:	08004e9d 	.word	0x08004e9d
 8004ec4:	08004e9d 	.word	0x08004e9d
 8004ec8:	08004e9d 	.word	0x08004e9d
 8004ecc:	08004f21 	.word	0x08004f21
 8004ed0:	08004e9d 	.word	0x08004e9d
 8004ed4:	08004e9d 	.word	0x08004e9d
 8004ed8:	08004e9d 	.word	0x08004e9d
 8004edc:	08004e9d 	.word	0x08004e9d
 8004ee0:	0800502f 	.word	0x0800502f
 8004ee4:	08004f51 	.word	0x08004f51
 8004ee8:	08005011 	.word	0x08005011
 8004eec:	08004e9d 	.word	0x08004e9d
 8004ef0:	08004e9d 	.word	0x08004e9d
 8004ef4:	08005051 	.word	0x08005051
 8004ef8:	08004e9d 	.word	0x08004e9d
 8004efc:	08004f51 	.word	0x08004f51
 8004f00:	08004e9d 	.word	0x08004e9d
 8004f04:	08004e9d 	.word	0x08004e9d
 8004f08:	08005019 	.word	0x08005019
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	1d1a      	adds	r2, r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	602a      	str	r2, [r5, #0]
 8004f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0a4      	b.n	800506a <_printf_i+0x1f6>
 8004f20:	6820      	ldr	r0, [r4, #0]
 8004f22:	6829      	ldr	r1, [r5, #0]
 8004f24:	0606      	lsls	r6, r0, #24
 8004f26:	f101 0304 	add.w	r3, r1, #4
 8004f2a:	d50a      	bpl.n	8004f42 <_printf_i+0xce>
 8004f2c:	680e      	ldr	r6, [r1, #0]
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	2e00      	cmp	r6, #0
 8004f32:	da03      	bge.n	8004f3c <_printf_i+0xc8>
 8004f34:	232d      	movs	r3, #45	; 0x2d
 8004f36:	4276      	negs	r6, r6
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f3c:	230a      	movs	r3, #10
 8004f3e:	485e      	ldr	r0, [pc, #376]	; (80050b8 <_printf_i+0x244>)
 8004f40:	e019      	b.n	8004f76 <_printf_i+0x102>
 8004f42:	680e      	ldr	r6, [r1, #0]
 8004f44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f48:	602b      	str	r3, [r5, #0]
 8004f4a:	bf18      	it	ne
 8004f4c:	b236      	sxthne	r6, r6
 8004f4e:	e7ef      	b.n	8004f30 <_printf_i+0xbc>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	6820      	ldr	r0, [r4, #0]
 8004f54:	1d19      	adds	r1, r3, #4
 8004f56:	6029      	str	r1, [r5, #0]
 8004f58:	0601      	lsls	r1, r0, #24
 8004f5a:	d501      	bpl.n	8004f60 <_printf_i+0xec>
 8004f5c:	681e      	ldr	r6, [r3, #0]
 8004f5e:	e002      	b.n	8004f66 <_printf_i+0xf2>
 8004f60:	0646      	lsls	r6, r0, #25
 8004f62:	d5fb      	bpl.n	8004f5c <_printf_i+0xe8>
 8004f64:	881e      	ldrh	r6, [r3, #0]
 8004f66:	2f6f      	cmp	r7, #111	; 0x6f
 8004f68:	bf0c      	ite	eq
 8004f6a:	2308      	moveq	r3, #8
 8004f6c:	230a      	movne	r3, #10
 8004f6e:	4852      	ldr	r0, [pc, #328]	; (80050b8 <_printf_i+0x244>)
 8004f70:	2100      	movs	r1, #0
 8004f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f76:	6865      	ldr	r5, [r4, #4]
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	bfa8      	it	ge
 8004f7c:	6821      	ldrge	r1, [r4, #0]
 8004f7e:	60a5      	str	r5, [r4, #8]
 8004f80:	bfa4      	itt	ge
 8004f82:	f021 0104 	bicge.w	r1, r1, #4
 8004f86:	6021      	strge	r1, [r4, #0]
 8004f88:	b90e      	cbnz	r6, 8004f8e <_printf_i+0x11a>
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	d04d      	beq.n	800502a <_printf_i+0x1b6>
 8004f8e:	4615      	mov	r5, r2
 8004f90:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f94:	fb03 6711 	mls	r7, r3, r1, r6
 8004f98:	5dc7      	ldrb	r7, [r0, r7]
 8004f9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f9e:	4637      	mov	r7, r6
 8004fa0:	42bb      	cmp	r3, r7
 8004fa2:	460e      	mov	r6, r1
 8004fa4:	d9f4      	bls.n	8004f90 <_printf_i+0x11c>
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d10b      	bne.n	8004fc2 <_printf_i+0x14e>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	07de      	lsls	r6, r3, #31
 8004fae:	d508      	bpl.n	8004fc2 <_printf_i+0x14e>
 8004fb0:	6923      	ldr	r3, [r4, #16]
 8004fb2:	6861      	ldr	r1, [r4, #4]
 8004fb4:	4299      	cmp	r1, r3
 8004fb6:	bfde      	ittt	le
 8004fb8:	2330      	movle	r3, #48	; 0x30
 8004fba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fc2:	1b52      	subs	r2, r2, r5
 8004fc4:	6122      	str	r2, [r4, #16]
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	4621      	mov	r1, r4
 8004fca:	4640      	mov	r0, r8
 8004fcc:	f8cd a000 	str.w	sl, [sp]
 8004fd0:	aa03      	add	r2, sp, #12
 8004fd2:	f7ff fedf 	bl	8004d94 <_printf_common>
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d14c      	bne.n	8005074 <_printf_i+0x200>
 8004fda:	f04f 30ff 	mov.w	r0, #4294967295
 8004fde:	b004      	add	sp, #16
 8004fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe4:	4834      	ldr	r0, [pc, #208]	; (80050b8 <_printf_i+0x244>)
 8004fe6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fea:	6829      	ldr	r1, [r5, #0]
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ff2:	6029      	str	r1, [r5, #0]
 8004ff4:	061d      	lsls	r5, r3, #24
 8004ff6:	d514      	bpl.n	8005022 <_printf_i+0x1ae>
 8004ff8:	07df      	lsls	r7, r3, #31
 8004ffa:	bf44      	itt	mi
 8004ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8005000:	6023      	strmi	r3, [r4, #0]
 8005002:	b91e      	cbnz	r6, 800500c <_printf_i+0x198>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	f023 0320 	bic.w	r3, r3, #32
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	2310      	movs	r3, #16
 800500e:	e7af      	b.n	8004f70 <_printf_i+0xfc>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	f043 0320 	orr.w	r3, r3, #32
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	2378      	movs	r3, #120	; 0x78
 800501a:	4828      	ldr	r0, [pc, #160]	; (80050bc <_printf_i+0x248>)
 800501c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005020:	e7e3      	b.n	8004fea <_printf_i+0x176>
 8005022:	0659      	lsls	r1, r3, #25
 8005024:	bf48      	it	mi
 8005026:	b2b6      	uxthmi	r6, r6
 8005028:	e7e6      	b.n	8004ff8 <_printf_i+0x184>
 800502a:	4615      	mov	r5, r2
 800502c:	e7bb      	b.n	8004fa6 <_printf_i+0x132>
 800502e:	682b      	ldr	r3, [r5, #0]
 8005030:	6826      	ldr	r6, [r4, #0]
 8005032:	1d18      	adds	r0, r3, #4
 8005034:	6961      	ldr	r1, [r4, #20]
 8005036:	6028      	str	r0, [r5, #0]
 8005038:	0635      	lsls	r5, r6, #24
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	d501      	bpl.n	8005042 <_printf_i+0x1ce>
 800503e:	6019      	str	r1, [r3, #0]
 8005040:	e002      	b.n	8005048 <_printf_i+0x1d4>
 8005042:	0670      	lsls	r0, r6, #25
 8005044:	d5fb      	bpl.n	800503e <_printf_i+0x1ca>
 8005046:	8019      	strh	r1, [r3, #0]
 8005048:	2300      	movs	r3, #0
 800504a:	4615      	mov	r5, r2
 800504c:	6123      	str	r3, [r4, #16]
 800504e:	e7ba      	b.n	8004fc6 <_printf_i+0x152>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	2100      	movs	r1, #0
 8005054:	1d1a      	adds	r2, r3, #4
 8005056:	602a      	str	r2, [r5, #0]
 8005058:	681d      	ldr	r5, [r3, #0]
 800505a:	6862      	ldr	r2, [r4, #4]
 800505c:	4628      	mov	r0, r5
 800505e:	f001 fa09 	bl	8006474 <memchr>
 8005062:	b108      	cbz	r0, 8005068 <_printf_i+0x1f4>
 8005064:	1b40      	subs	r0, r0, r5
 8005066:	6060      	str	r0, [r4, #4]
 8005068:	6863      	ldr	r3, [r4, #4]
 800506a:	6123      	str	r3, [r4, #16]
 800506c:	2300      	movs	r3, #0
 800506e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005072:	e7a8      	b.n	8004fc6 <_printf_i+0x152>
 8005074:	462a      	mov	r2, r5
 8005076:	4649      	mov	r1, r9
 8005078:	4640      	mov	r0, r8
 800507a:	6923      	ldr	r3, [r4, #16]
 800507c:	47d0      	blx	sl
 800507e:	3001      	adds	r0, #1
 8005080:	d0ab      	beq.n	8004fda <_printf_i+0x166>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	079b      	lsls	r3, r3, #30
 8005086:	d413      	bmi.n	80050b0 <_printf_i+0x23c>
 8005088:	68e0      	ldr	r0, [r4, #12]
 800508a:	9b03      	ldr	r3, [sp, #12]
 800508c:	4298      	cmp	r0, r3
 800508e:	bfb8      	it	lt
 8005090:	4618      	movlt	r0, r3
 8005092:	e7a4      	b.n	8004fde <_printf_i+0x16a>
 8005094:	2301      	movs	r3, #1
 8005096:	4632      	mov	r2, r6
 8005098:	4649      	mov	r1, r9
 800509a:	4640      	mov	r0, r8
 800509c:	47d0      	blx	sl
 800509e:	3001      	adds	r0, #1
 80050a0:	d09b      	beq.n	8004fda <_printf_i+0x166>
 80050a2:	3501      	adds	r5, #1
 80050a4:	68e3      	ldr	r3, [r4, #12]
 80050a6:	9903      	ldr	r1, [sp, #12]
 80050a8:	1a5b      	subs	r3, r3, r1
 80050aa:	42ab      	cmp	r3, r5
 80050ac:	dcf2      	bgt.n	8005094 <_printf_i+0x220>
 80050ae:	e7eb      	b.n	8005088 <_printf_i+0x214>
 80050b0:	2500      	movs	r5, #0
 80050b2:	f104 0619 	add.w	r6, r4, #25
 80050b6:	e7f5      	b.n	80050a4 <_printf_i+0x230>
 80050b8:	080073aa 	.word	0x080073aa
 80050bc:	080073bb 	.word	0x080073bb

080050c0 <_puts_r>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	460e      	mov	r6, r1
 80050c4:	4605      	mov	r5, r0
 80050c6:	b118      	cbz	r0, 80050d0 <_puts_r+0x10>
 80050c8:	6983      	ldr	r3, [r0, #24]
 80050ca:	b90b      	cbnz	r3, 80050d0 <_puts_r+0x10>
 80050cc:	f001 f8c0 	bl	8006250 <__sinit>
 80050d0:	69ab      	ldr	r3, [r5, #24]
 80050d2:	68ac      	ldr	r4, [r5, #8]
 80050d4:	b913      	cbnz	r3, 80050dc <_puts_r+0x1c>
 80050d6:	4628      	mov	r0, r5
 80050d8:	f001 f8ba 	bl	8006250 <__sinit>
 80050dc:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <_puts_r+0xd0>)
 80050de:	429c      	cmp	r4, r3
 80050e0:	d120      	bne.n	8005124 <_puts_r+0x64>
 80050e2:	686c      	ldr	r4, [r5, #4]
 80050e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050e6:	07db      	lsls	r3, r3, #31
 80050e8:	d405      	bmi.n	80050f6 <_puts_r+0x36>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	0598      	lsls	r0, r3, #22
 80050ee:	d402      	bmi.n	80050f6 <_puts_r+0x36>
 80050f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050f2:	f001 f950 	bl	8006396 <__retarget_lock_acquire_recursive>
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	0719      	lsls	r1, r3, #28
 80050fa:	d51d      	bpl.n	8005138 <_puts_r+0x78>
 80050fc:	6923      	ldr	r3, [r4, #16]
 80050fe:	b1db      	cbz	r3, 8005138 <_puts_r+0x78>
 8005100:	3e01      	subs	r6, #1
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005108:	3b01      	subs	r3, #1
 800510a:	60a3      	str	r3, [r4, #8]
 800510c:	bb39      	cbnz	r1, 800515e <_puts_r+0x9e>
 800510e:	2b00      	cmp	r3, #0
 8005110:	da38      	bge.n	8005184 <_puts_r+0xc4>
 8005112:	4622      	mov	r2, r4
 8005114:	210a      	movs	r1, #10
 8005116:	4628      	mov	r0, r5
 8005118:	f000 f848 	bl	80051ac <__swbuf_r>
 800511c:	3001      	adds	r0, #1
 800511e:	d011      	beq.n	8005144 <_puts_r+0x84>
 8005120:	250a      	movs	r5, #10
 8005122:	e011      	b.n	8005148 <_puts_r+0x88>
 8005124:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <_puts_r+0xd4>)
 8005126:	429c      	cmp	r4, r3
 8005128:	d101      	bne.n	800512e <_puts_r+0x6e>
 800512a:	68ac      	ldr	r4, [r5, #8]
 800512c:	e7da      	b.n	80050e4 <_puts_r+0x24>
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <_puts_r+0xd8>)
 8005130:	429c      	cmp	r4, r3
 8005132:	bf08      	it	eq
 8005134:	68ec      	ldreq	r4, [r5, #12]
 8005136:	e7d5      	b.n	80050e4 <_puts_r+0x24>
 8005138:	4621      	mov	r1, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f000 f888 	bl	8005250 <__swsetup_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	d0dd      	beq.n	8005100 <_puts_r+0x40>
 8005144:	f04f 35ff 	mov.w	r5, #4294967295
 8005148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800514a:	07da      	lsls	r2, r3, #31
 800514c:	d405      	bmi.n	800515a <_puts_r+0x9a>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	059b      	lsls	r3, r3, #22
 8005152:	d402      	bmi.n	800515a <_puts_r+0x9a>
 8005154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005156:	f001 f91f 	bl	8006398 <__retarget_lock_release_recursive>
 800515a:	4628      	mov	r0, r5
 800515c:	bd70      	pop	{r4, r5, r6, pc}
 800515e:	2b00      	cmp	r3, #0
 8005160:	da04      	bge.n	800516c <_puts_r+0xac>
 8005162:	69a2      	ldr	r2, [r4, #24]
 8005164:	429a      	cmp	r2, r3
 8005166:	dc06      	bgt.n	8005176 <_puts_r+0xb6>
 8005168:	290a      	cmp	r1, #10
 800516a:	d004      	beq.n	8005176 <_puts_r+0xb6>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	6022      	str	r2, [r4, #0]
 8005172:	7019      	strb	r1, [r3, #0]
 8005174:	e7c5      	b.n	8005102 <_puts_r+0x42>
 8005176:	4622      	mov	r2, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 f817 	bl	80051ac <__swbuf_r>
 800517e:	3001      	adds	r0, #1
 8005180:	d1bf      	bne.n	8005102 <_puts_r+0x42>
 8005182:	e7df      	b.n	8005144 <_puts_r+0x84>
 8005184:	250a      	movs	r5, #10
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	6022      	str	r2, [r4, #0]
 800518c:	701d      	strb	r5, [r3, #0]
 800518e:	e7db      	b.n	8005148 <_puts_r+0x88>
 8005190:	0800747c 	.word	0x0800747c
 8005194:	0800749c 	.word	0x0800749c
 8005198:	0800745c 	.word	0x0800745c

0800519c <puts>:
 800519c:	4b02      	ldr	r3, [pc, #8]	; (80051a8 <puts+0xc>)
 800519e:	4601      	mov	r1, r0
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	f7ff bf8d 	b.w	80050c0 <_puts_r>
 80051a6:	bf00      	nop
 80051a8:	2000000c 	.word	0x2000000c

080051ac <__swbuf_r>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	460e      	mov	r6, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	4605      	mov	r5, r0
 80051b4:	b118      	cbz	r0, 80051be <__swbuf_r+0x12>
 80051b6:	6983      	ldr	r3, [r0, #24]
 80051b8:	b90b      	cbnz	r3, 80051be <__swbuf_r+0x12>
 80051ba:	f001 f849 	bl	8006250 <__sinit>
 80051be:	4b21      	ldr	r3, [pc, #132]	; (8005244 <__swbuf_r+0x98>)
 80051c0:	429c      	cmp	r4, r3
 80051c2:	d12b      	bne.n	800521c <__swbuf_r+0x70>
 80051c4:	686c      	ldr	r4, [r5, #4]
 80051c6:	69a3      	ldr	r3, [r4, #24]
 80051c8:	60a3      	str	r3, [r4, #8]
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	071a      	lsls	r2, r3, #28
 80051ce:	d52f      	bpl.n	8005230 <__swbuf_r+0x84>
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	b36b      	cbz	r3, 8005230 <__swbuf_r+0x84>
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	6820      	ldr	r0, [r4, #0]
 80051d8:	b2f6      	uxtb	r6, r6
 80051da:	1ac0      	subs	r0, r0, r3
 80051dc:	6963      	ldr	r3, [r4, #20]
 80051de:	4637      	mov	r7, r6
 80051e0:	4283      	cmp	r3, r0
 80051e2:	dc04      	bgt.n	80051ee <__swbuf_r+0x42>
 80051e4:	4621      	mov	r1, r4
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 ff9e 	bl	8006128 <_fflush_r>
 80051ec:	bb30      	cbnz	r0, 800523c <__swbuf_r+0x90>
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	3001      	adds	r0, #1
 80051f2:	3b01      	subs	r3, #1
 80051f4:	60a3      	str	r3, [r4, #8]
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	6022      	str	r2, [r4, #0]
 80051fc:	701e      	strb	r6, [r3, #0]
 80051fe:	6963      	ldr	r3, [r4, #20]
 8005200:	4283      	cmp	r3, r0
 8005202:	d004      	beq.n	800520e <__swbuf_r+0x62>
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	07db      	lsls	r3, r3, #31
 8005208:	d506      	bpl.n	8005218 <__swbuf_r+0x6c>
 800520a:	2e0a      	cmp	r6, #10
 800520c:	d104      	bne.n	8005218 <__swbuf_r+0x6c>
 800520e:	4621      	mov	r1, r4
 8005210:	4628      	mov	r0, r5
 8005212:	f000 ff89 	bl	8006128 <_fflush_r>
 8005216:	b988      	cbnz	r0, 800523c <__swbuf_r+0x90>
 8005218:	4638      	mov	r0, r7
 800521a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <__swbuf_r+0x9c>)
 800521e:	429c      	cmp	r4, r3
 8005220:	d101      	bne.n	8005226 <__swbuf_r+0x7a>
 8005222:	68ac      	ldr	r4, [r5, #8]
 8005224:	e7cf      	b.n	80051c6 <__swbuf_r+0x1a>
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <__swbuf_r+0xa0>)
 8005228:	429c      	cmp	r4, r3
 800522a:	bf08      	it	eq
 800522c:	68ec      	ldreq	r4, [r5, #12]
 800522e:	e7ca      	b.n	80051c6 <__swbuf_r+0x1a>
 8005230:	4621      	mov	r1, r4
 8005232:	4628      	mov	r0, r5
 8005234:	f000 f80c 	bl	8005250 <__swsetup_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	d0cb      	beq.n	80051d4 <__swbuf_r+0x28>
 800523c:	f04f 37ff 	mov.w	r7, #4294967295
 8005240:	e7ea      	b.n	8005218 <__swbuf_r+0x6c>
 8005242:	bf00      	nop
 8005244:	0800747c 	.word	0x0800747c
 8005248:	0800749c 	.word	0x0800749c
 800524c:	0800745c 	.word	0x0800745c

08005250 <__swsetup_r>:
 8005250:	4b32      	ldr	r3, [pc, #200]	; (800531c <__swsetup_r+0xcc>)
 8005252:	b570      	push	{r4, r5, r6, lr}
 8005254:	681d      	ldr	r5, [r3, #0]
 8005256:	4606      	mov	r6, r0
 8005258:	460c      	mov	r4, r1
 800525a:	b125      	cbz	r5, 8005266 <__swsetup_r+0x16>
 800525c:	69ab      	ldr	r3, [r5, #24]
 800525e:	b913      	cbnz	r3, 8005266 <__swsetup_r+0x16>
 8005260:	4628      	mov	r0, r5
 8005262:	f000 fff5 	bl	8006250 <__sinit>
 8005266:	4b2e      	ldr	r3, [pc, #184]	; (8005320 <__swsetup_r+0xd0>)
 8005268:	429c      	cmp	r4, r3
 800526a:	d10f      	bne.n	800528c <__swsetup_r+0x3c>
 800526c:	686c      	ldr	r4, [r5, #4]
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005274:	0719      	lsls	r1, r3, #28
 8005276:	d42c      	bmi.n	80052d2 <__swsetup_r+0x82>
 8005278:	06dd      	lsls	r5, r3, #27
 800527a:	d411      	bmi.n	80052a0 <__swsetup_r+0x50>
 800527c:	2309      	movs	r3, #9
 800527e:	6033      	str	r3, [r6, #0]
 8005280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005284:	f04f 30ff 	mov.w	r0, #4294967295
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	e03e      	b.n	800530a <__swsetup_r+0xba>
 800528c:	4b25      	ldr	r3, [pc, #148]	; (8005324 <__swsetup_r+0xd4>)
 800528e:	429c      	cmp	r4, r3
 8005290:	d101      	bne.n	8005296 <__swsetup_r+0x46>
 8005292:	68ac      	ldr	r4, [r5, #8]
 8005294:	e7eb      	b.n	800526e <__swsetup_r+0x1e>
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <__swsetup_r+0xd8>)
 8005298:	429c      	cmp	r4, r3
 800529a:	bf08      	it	eq
 800529c:	68ec      	ldreq	r4, [r5, #12]
 800529e:	e7e6      	b.n	800526e <__swsetup_r+0x1e>
 80052a0:	0758      	lsls	r0, r3, #29
 80052a2:	d512      	bpl.n	80052ca <__swsetup_r+0x7a>
 80052a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052a6:	b141      	cbz	r1, 80052ba <__swsetup_r+0x6a>
 80052a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052ac:	4299      	cmp	r1, r3
 80052ae:	d002      	beq.n	80052b6 <__swsetup_r+0x66>
 80052b0:	4630      	mov	r0, r6
 80052b2:	f001 fc91 	bl	8006bd8 <_free_r>
 80052b6:	2300      	movs	r3, #0
 80052b8:	6363      	str	r3, [r4, #52]	; 0x34
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052c0:	81a3      	strh	r3, [r4, #12]
 80052c2:	2300      	movs	r3, #0
 80052c4:	6063      	str	r3, [r4, #4]
 80052c6:	6923      	ldr	r3, [r4, #16]
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	f043 0308 	orr.w	r3, r3, #8
 80052d0:	81a3      	strh	r3, [r4, #12]
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	b94b      	cbnz	r3, 80052ea <__swsetup_r+0x9a>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e0:	d003      	beq.n	80052ea <__swsetup_r+0x9a>
 80052e2:	4621      	mov	r1, r4
 80052e4:	4630      	mov	r0, r6
 80052e6:	f001 f87d 	bl	80063e4 <__smakebuf_r>
 80052ea:	89a0      	ldrh	r0, [r4, #12]
 80052ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052f0:	f010 0301 	ands.w	r3, r0, #1
 80052f4:	d00a      	beq.n	800530c <__swsetup_r+0xbc>
 80052f6:	2300      	movs	r3, #0
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	6963      	ldr	r3, [r4, #20]
 80052fc:	425b      	negs	r3, r3
 80052fe:	61a3      	str	r3, [r4, #24]
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	b943      	cbnz	r3, 8005316 <__swsetup_r+0xc6>
 8005304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005308:	d1ba      	bne.n	8005280 <__swsetup_r+0x30>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	0781      	lsls	r1, r0, #30
 800530e:	bf58      	it	pl
 8005310:	6963      	ldrpl	r3, [r4, #20]
 8005312:	60a3      	str	r3, [r4, #8]
 8005314:	e7f4      	b.n	8005300 <__swsetup_r+0xb0>
 8005316:	2000      	movs	r0, #0
 8005318:	e7f7      	b.n	800530a <__swsetup_r+0xba>
 800531a:	bf00      	nop
 800531c:	2000000c 	.word	0x2000000c
 8005320:	0800747c 	.word	0x0800747c
 8005324:	0800749c 	.word	0x0800749c
 8005328:	0800745c 	.word	0x0800745c

0800532c <quorem>:
 800532c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005330:	6903      	ldr	r3, [r0, #16]
 8005332:	690c      	ldr	r4, [r1, #16]
 8005334:	4607      	mov	r7, r0
 8005336:	42a3      	cmp	r3, r4
 8005338:	f2c0 8082 	blt.w	8005440 <quorem+0x114>
 800533c:	3c01      	subs	r4, #1
 800533e:	f100 0514 	add.w	r5, r0, #20
 8005342:	f101 0814 	add.w	r8, r1, #20
 8005346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005354:	3301      	adds	r3, #1
 8005356:	429a      	cmp	r2, r3
 8005358:	fbb2 f6f3 	udiv	r6, r2, r3
 800535c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005360:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005364:	d331      	bcc.n	80053ca <quorem+0x9e>
 8005366:	f04f 0e00 	mov.w	lr, #0
 800536a:	4640      	mov	r0, r8
 800536c:	46ac      	mov	ip, r5
 800536e:	46f2      	mov	sl, lr
 8005370:	f850 2b04 	ldr.w	r2, [r0], #4
 8005374:	b293      	uxth	r3, r2
 8005376:	fb06 e303 	mla	r3, r6, r3, lr
 800537a:	0c12      	lsrs	r2, r2, #16
 800537c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005380:	b29b      	uxth	r3, r3
 8005382:	fb06 e202 	mla	r2, r6, r2, lr
 8005386:	ebaa 0303 	sub.w	r3, sl, r3
 800538a:	f8dc a000 	ldr.w	sl, [ip]
 800538e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005392:	fa1f fa8a 	uxth.w	sl, sl
 8005396:	4453      	add	r3, sl
 8005398:	f8dc a000 	ldr.w	sl, [ip]
 800539c:	b292      	uxth	r2, r2
 800539e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053ac:	4581      	cmp	r9, r0
 80053ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053b2:	f84c 3b04 	str.w	r3, [ip], #4
 80053b6:	d2db      	bcs.n	8005370 <quorem+0x44>
 80053b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80053bc:	b92b      	cbnz	r3, 80053ca <quorem+0x9e>
 80053be:	9b01      	ldr	r3, [sp, #4]
 80053c0:	3b04      	subs	r3, #4
 80053c2:	429d      	cmp	r5, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	d32f      	bcc.n	8005428 <quorem+0xfc>
 80053c8:	613c      	str	r4, [r7, #16]
 80053ca:	4638      	mov	r0, r7
 80053cc:	f001 faec 	bl	80069a8 <__mcmp>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	db25      	blt.n	8005420 <quorem+0xf4>
 80053d4:	4628      	mov	r0, r5
 80053d6:	f04f 0c00 	mov.w	ip, #0
 80053da:	3601      	adds	r6, #1
 80053dc:	f858 1b04 	ldr.w	r1, [r8], #4
 80053e0:	f8d0 e000 	ldr.w	lr, [r0]
 80053e4:	b28b      	uxth	r3, r1
 80053e6:	ebac 0303 	sub.w	r3, ip, r3
 80053ea:	fa1f f28e 	uxth.w	r2, lr
 80053ee:	4413      	add	r3, r2
 80053f0:	0c0a      	lsrs	r2, r1, #16
 80053f2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005400:	45c1      	cmp	r9, r8
 8005402:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005406:	f840 3b04 	str.w	r3, [r0], #4
 800540a:	d2e7      	bcs.n	80053dc <quorem+0xb0>
 800540c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005414:	b922      	cbnz	r2, 8005420 <quorem+0xf4>
 8005416:	3b04      	subs	r3, #4
 8005418:	429d      	cmp	r5, r3
 800541a:	461a      	mov	r2, r3
 800541c:	d30a      	bcc.n	8005434 <quorem+0x108>
 800541e:	613c      	str	r4, [r7, #16]
 8005420:	4630      	mov	r0, r6
 8005422:	b003      	add	sp, #12
 8005424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	3b04      	subs	r3, #4
 800542c:	2a00      	cmp	r2, #0
 800542e:	d1cb      	bne.n	80053c8 <quorem+0x9c>
 8005430:	3c01      	subs	r4, #1
 8005432:	e7c6      	b.n	80053c2 <quorem+0x96>
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	3b04      	subs	r3, #4
 8005438:	2a00      	cmp	r2, #0
 800543a:	d1f0      	bne.n	800541e <quorem+0xf2>
 800543c:	3c01      	subs	r4, #1
 800543e:	e7eb      	b.n	8005418 <quorem+0xec>
 8005440:	2000      	movs	r0, #0
 8005442:	e7ee      	b.n	8005422 <quorem+0xf6>
 8005444:	0000      	movs	r0, r0
	...

08005448 <_dtoa_r>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	4616      	mov	r6, r2
 800544e:	461f      	mov	r7, r3
 8005450:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005452:	b099      	sub	sp, #100	; 0x64
 8005454:	4605      	mov	r5, r0
 8005456:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800545a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800545e:	b974      	cbnz	r4, 800547e <_dtoa_r+0x36>
 8005460:	2010      	movs	r0, #16
 8005462:	f000 ffff 	bl	8006464 <malloc>
 8005466:	4602      	mov	r2, r0
 8005468:	6268      	str	r0, [r5, #36]	; 0x24
 800546a:	b920      	cbnz	r0, 8005476 <_dtoa_r+0x2e>
 800546c:	21ea      	movs	r1, #234	; 0xea
 800546e:	4ba8      	ldr	r3, [pc, #672]	; (8005710 <_dtoa_r+0x2c8>)
 8005470:	48a8      	ldr	r0, [pc, #672]	; (8005714 <_dtoa_r+0x2cc>)
 8005472:	f001 fcf3 	bl	8006e5c <__assert_func>
 8005476:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800547a:	6004      	str	r4, [r0, #0]
 800547c:	60c4      	str	r4, [r0, #12]
 800547e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	b151      	cbz	r1, 800549a <_dtoa_r+0x52>
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	2301      	movs	r3, #1
 8005488:	4093      	lsls	r3, r2
 800548a:	604a      	str	r2, [r1, #4]
 800548c:	608b      	str	r3, [r1, #8]
 800548e:	4628      	mov	r0, r5
 8005490:	f001 f84c 	bl	800652c <_Bfree>
 8005494:	2200      	movs	r2, #0
 8005496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	1e3b      	subs	r3, r7, #0
 800549c:	bfaf      	iteee	ge
 800549e:	2300      	movge	r3, #0
 80054a0:	2201      	movlt	r2, #1
 80054a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054a6:	9305      	strlt	r3, [sp, #20]
 80054a8:	bfa8      	it	ge
 80054aa:	f8c8 3000 	strge.w	r3, [r8]
 80054ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80054b2:	4b99      	ldr	r3, [pc, #612]	; (8005718 <_dtoa_r+0x2d0>)
 80054b4:	bfb8      	it	lt
 80054b6:	f8c8 2000 	strlt.w	r2, [r8]
 80054ba:	ea33 0309 	bics.w	r3, r3, r9
 80054be:	d119      	bne.n	80054f4 <_dtoa_r+0xac>
 80054c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80054c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054cc:	4333      	orrs	r3, r6
 80054ce:	f000 857f 	beq.w	8005fd0 <_dtoa_r+0xb88>
 80054d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054d4:	b953      	cbnz	r3, 80054ec <_dtoa_r+0xa4>
 80054d6:	4b91      	ldr	r3, [pc, #580]	; (800571c <_dtoa_r+0x2d4>)
 80054d8:	e022      	b.n	8005520 <_dtoa_r+0xd8>
 80054da:	4b91      	ldr	r3, [pc, #580]	; (8005720 <_dtoa_r+0x2d8>)
 80054dc:	9303      	str	r3, [sp, #12]
 80054de:	3308      	adds	r3, #8
 80054e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	9803      	ldr	r0, [sp, #12]
 80054e6:	b019      	add	sp, #100	; 0x64
 80054e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ec:	4b8b      	ldr	r3, [pc, #556]	; (800571c <_dtoa_r+0x2d4>)
 80054ee:	9303      	str	r3, [sp, #12]
 80054f0:	3303      	adds	r3, #3
 80054f2:	e7f5      	b.n	80054e0 <_dtoa_r+0x98>
 80054f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80054fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005500:	2200      	movs	r2, #0
 8005502:	2300      	movs	r3, #0
 8005504:	f7fb fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8005508:	4680      	mov	r8, r0
 800550a:	b158      	cbz	r0, 8005524 <_dtoa_r+0xdc>
 800550c:	2301      	movs	r3, #1
 800550e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8558 	beq.w	8005fca <_dtoa_r+0xb82>
 800551a:	4882      	ldr	r0, [pc, #520]	; (8005724 <_dtoa_r+0x2dc>)
 800551c:	6018      	str	r0, [r3, #0]
 800551e:	1e43      	subs	r3, r0, #1
 8005520:	9303      	str	r3, [sp, #12]
 8005522:	e7df      	b.n	80054e4 <_dtoa_r+0x9c>
 8005524:	ab16      	add	r3, sp, #88	; 0x58
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	ab17      	add	r3, sp, #92	; 0x5c
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4628      	mov	r0, r5
 800552e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005532:	f001 fae1 	bl	8006af8 <__d2b>
 8005536:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800553a:	4683      	mov	fp, r0
 800553c:	2c00      	cmp	r4, #0
 800553e:	d07f      	beq.n	8005640 <_dtoa_r+0x1f8>
 8005540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005546:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800554a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800554e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005552:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005556:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800555a:	2200      	movs	r2, #0
 800555c:	4b72      	ldr	r3, [pc, #456]	; (8005728 <_dtoa_r+0x2e0>)
 800555e:	f7fa fe03 	bl	8000168 <__aeabi_dsub>
 8005562:	a365      	add	r3, pc, #404	; (adr r3, 80056f8 <_dtoa_r+0x2b0>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f7fa ffb6 	bl	80004d8 <__aeabi_dmul>
 800556c:	a364      	add	r3, pc, #400	; (adr r3, 8005700 <_dtoa_r+0x2b8>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f7fa fdfb 	bl	800016c <__adddf3>
 8005576:	4606      	mov	r6, r0
 8005578:	4620      	mov	r0, r4
 800557a:	460f      	mov	r7, r1
 800557c:	f7fa ff42 	bl	8000404 <__aeabi_i2d>
 8005580:	a361      	add	r3, pc, #388	; (adr r3, 8005708 <_dtoa_r+0x2c0>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fa ffa7 	bl	80004d8 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fa fdeb 	bl	800016c <__adddf3>
 8005596:	4606      	mov	r6, r0
 8005598:	460f      	mov	r7, r1
 800559a:	f7fb fa4d 	bl	8000a38 <__aeabi_d2iz>
 800559e:	2200      	movs	r2, #0
 80055a0:	4682      	mov	sl, r0
 80055a2:	2300      	movs	r3, #0
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f7fb fa08 	bl	80009bc <__aeabi_dcmplt>
 80055ac:	b148      	cbz	r0, 80055c2 <_dtoa_r+0x17a>
 80055ae:	4650      	mov	r0, sl
 80055b0:	f7fa ff28 	bl	8000404 <__aeabi_i2d>
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	f7fb f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80055bc:	b908      	cbnz	r0, 80055c2 <_dtoa_r+0x17a>
 80055be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055c2:	f1ba 0f16 	cmp.w	sl, #22
 80055c6:	d858      	bhi.n	800567a <_dtoa_r+0x232>
 80055c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055cc:	4b57      	ldr	r3, [pc, #348]	; (800572c <_dtoa_r+0x2e4>)
 80055ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb f9f1 	bl	80009bc <__aeabi_dcmplt>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d04f      	beq.n	800567e <_dtoa_r+0x236>
 80055de:	2300      	movs	r3, #0
 80055e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055e8:	1b1c      	subs	r4, r3, r4
 80055ea:	1e63      	subs	r3, r4, #1
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	bf49      	itett	mi
 80055f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80055f4:	2300      	movpl	r3, #0
 80055f6:	9306      	strmi	r3, [sp, #24]
 80055f8:	2300      	movmi	r3, #0
 80055fa:	bf54      	ite	pl
 80055fc:	9306      	strpl	r3, [sp, #24]
 80055fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005600:	f1ba 0f00 	cmp.w	sl, #0
 8005604:	db3d      	blt.n	8005682 <_dtoa_r+0x23a>
 8005606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005608:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800560c:	4453      	add	r3, sl
 800560e:	9309      	str	r3, [sp, #36]	; 0x24
 8005610:	2300      	movs	r3, #0
 8005612:	930a      	str	r3, [sp, #40]	; 0x28
 8005614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005616:	2b09      	cmp	r3, #9
 8005618:	f200 808c 	bhi.w	8005734 <_dtoa_r+0x2ec>
 800561c:	2b05      	cmp	r3, #5
 800561e:	bfc4      	itt	gt
 8005620:	3b04      	subgt	r3, #4
 8005622:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005626:	bfc8      	it	gt
 8005628:	2400      	movgt	r4, #0
 800562a:	f1a3 0302 	sub.w	r3, r3, #2
 800562e:	bfd8      	it	le
 8005630:	2401      	movle	r4, #1
 8005632:	2b03      	cmp	r3, #3
 8005634:	f200 808a 	bhi.w	800574c <_dtoa_r+0x304>
 8005638:	e8df f003 	tbb	[pc, r3]
 800563c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005640:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005644:	441c      	add	r4, r3
 8005646:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800564a:	2b20      	cmp	r3, #32
 800564c:	bfc3      	ittte	gt
 800564e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005652:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005656:	fa09 f303 	lslgt.w	r3, r9, r3
 800565a:	f1c3 0320 	rsble	r3, r3, #32
 800565e:	bfc6      	itte	gt
 8005660:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005664:	4318      	orrgt	r0, r3
 8005666:	fa06 f003 	lslle.w	r0, r6, r3
 800566a:	f7fa febb 	bl	80003e4 <__aeabi_ui2d>
 800566e:	2301      	movs	r3, #1
 8005670:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005674:	3c01      	subs	r4, #1
 8005676:	9313      	str	r3, [sp, #76]	; 0x4c
 8005678:	e76f      	b.n	800555a <_dtoa_r+0x112>
 800567a:	2301      	movs	r3, #1
 800567c:	e7b2      	b.n	80055e4 <_dtoa_r+0x19c>
 800567e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005680:	e7b1      	b.n	80055e6 <_dtoa_r+0x19e>
 8005682:	9b06      	ldr	r3, [sp, #24]
 8005684:	eba3 030a 	sub.w	r3, r3, sl
 8005688:	9306      	str	r3, [sp, #24]
 800568a:	f1ca 0300 	rsb	r3, sl, #0
 800568e:	930a      	str	r3, [sp, #40]	; 0x28
 8005690:	2300      	movs	r3, #0
 8005692:	930e      	str	r3, [sp, #56]	; 0x38
 8005694:	e7be      	b.n	8005614 <_dtoa_r+0x1cc>
 8005696:	2300      	movs	r3, #0
 8005698:	930b      	str	r3, [sp, #44]	; 0x2c
 800569a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800569c:	2b00      	cmp	r3, #0
 800569e:	dc58      	bgt.n	8005752 <_dtoa_r+0x30a>
 80056a0:	f04f 0901 	mov.w	r9, #1
 80056a4:	464b      	mov	r3, r9
 80056a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80056aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80056ae:	2200      	movs	r2, #0
 80056b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80056b2:	6042      	str	r2, [r0, #4]
 80056b4:	2204      	movs	r2, #4
 80056b6:	f102 0614 	add.w	r6, r2, #20
 80056ba:	429e      	cmp	r6, r3
 80056bc:	6841      	ldr	r1, [r0, #4]
 80056be:	d94e      	bls.n	800575e <_dtoa_r+0x316>
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 fef3 	bl	80064ac <_Balloc>
 80056c6:	9003      	str	r0, [sp, #12]
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d14c      	bne.n	8005766 <_dtoa_r+0x31e>
 80056cc:	4602      	mov	r2, r0
 80056ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056d2:	4b17      	ldr	r3, [pc, #92]	; (8005730 <_dtoa_r+0x2e8>)
 80056d4:	e6cc      	b.n	8005470 <_dtoa_r+0x28>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7de      	b.n	8005698 <_dtoa_r+0x250>
 80056da:	2300      	movs	r3, #0
 80056dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80056de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056e0:	eb0a 0903 	add.w	r9, sl, r3
 80056e4:	f109 0301 	add.w	r3, r9, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	9308      	str	r3, [sp, #32]
 80056ec:	bfb8      	it	lt
 80056ee:	2301      	movlt	r3, #1
 80056f0:	e7dd      	b.n	80056ae <_dtoa_r+0x266>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e7f2      	b.n	80056dc <_dtoa_r+0x294>
 80056f6:	bf00      	nop
 80056f8:	636f4361 	.word	0x636f4361
 80056fc:	3fd287a7 	.word	0x3fd287a7
 8005700:	8b60c8b3 	.word	0x8b60c8b3
 8005704:	3fc68a28 	.word	0x3fc68a28
 8005708:	509f79fb 	.word	0x509f79fb
 800570c:	3fd34413 	.word	0x3fd34413
 8005710:	080073d9 	.word	0x080073d9
 8005714:	080073f0 	.word	0x080073f0
 8005718:	7ff00000 	.word	0x7ff00000
 800571c:	080073d5 	.word	0x080073d5
 8005720:	080073cc 	.word	0x080073cc
 8005724:	080073a9 	.word	0x080073a9
 8005728:	3ff80000 	.word	0x3ff80000
 800572c:	08007540 	.word	0x08007540
 8005730:	0800744b 	.word	0x0800744b
 8005734:	2401      	movs	r4, #1
 8005736:	2300      	movs	r3, #0
 8005738:	940b      	str	r4, [sp, #44]	; 0x2c
 800573a:	9322      	str	r3, [sp, #136]	; 0x88
 800573c:	f04f 39ff 	mov.w	r9, #4294967295
 8005740:	2200      	movs	r2, #0
 8005742:	2312      	movs	r3, #18
 8005744:	f8cd 9020 	str.w	r9, [sp, #32]
 8005748:	9223      	str	r2, [sp, #140]	; 0x8c
 800574a:	e7b0      	b.n	80056ae <_dtoa_r+0x266>
 800574c:	2301      	movs	r3, #1
 800574e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005750:	e7f4      	b.n	800573c <_dtoa_r+0x2f4>
 8005752:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005756:	464b      	mov	r3, r9
 8005758:	f8cd 9020 	str.w	r9, [sp, #32]
 800575c:	e7a7      	b.n	80056ae <_dtoa_r+0x266>
 800575e:	3101      	adds	r1, #1
 8005760:	6041      	str	r1, [r0, #4]
 8005762:	0052      	lsls	r2, r2, #1
 8005764:	e7a7      	b.n	80056b6 <_dtoa_r+0x26e>
 8005766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005768:	9a03      	ldr	r2, [sp, #12]
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	9b08      	ldr	r3, [sp, #32]
 800576e:	2b0e      	cmp	r3, #14
 8005770:	f200 80a8 	bhi.w	80058c4 <_dtoa_r+0x47c>
 8005774:	2c00      	cmp	r4, #0
 8005776:	f000 80a5 	beq.w	80058c4 <_dtoa_r+0x47c>
 800577a:	f1ba 0f00 	cmp.w	sl, #0
 800577e:	dd34      	ble.n	80057ea <_dtoa_r+0x3a2>
 8005780:	4a9a      	ldr	r2, [pc, #616]	; (80059ec <_dtoa_r+0x5a4>)
 8005782:	f00a 030f 	and.w	r3, sl, #15
 8005786:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800578a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800578e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005792:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005796:	ea4f 142a 	mov.w	r4, sl, asr #4
 800579a:	d016      	beq.n	80057ca <_dtoa_r+0x382>
 800579c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057a0:	4b93      	ldr	r3, [pc, #588]	; (80059f0 <_dtoa_r+0x5a8>)
 80057a2:	2703      	movs	r7, #3
 80057a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057a8:	f7fa ffc0 	bl	800072c <__aeabi_ddiv>
 80057ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057b0:	f004 040f 	and.w	r4, r4, #15
 80057b4:	4e8e      	ldr	r6, [pc, #568]	; (80059f0 <_dtoa_r+0x5a8>)
 80057b6:	b954      	cbnz	r4, 80057ce <_dtoa_r+0x386>
 80057b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c0:	f7fa ffb4 	bl	800072c <__aeabi_ddiv>
 80057c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057c8:	e029      	b.n	800581e <_dtoa_r+0x3d6>
 80057ca:	2702      	movs	r7, #2
 80057cc:	e7f2      	b.n	80057b4 <_dtoa_r+0x36c>
 80057ce:	07e1      	lsls	r1, r4, #31
 80057d0:	d508      	bpl.n	80057e4 <_dtoa_r+0x39c>
 80057d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057da:	f7fa fe7d 	bl	80004d8 <__aeabi_dmul>
 80057de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057e2:	3701      	adds	r7, #1
 80057e4:	1064      	asrs	r4, r4, #1
 80057e6:	3608      	adds	r6, #8
 80057e8:	e7e5      	b.n	80057b6 <_dtoa_r+0x36e>
 80057ea:	f000 80a5 	beq.w	8005938 <_dtoa_r+0x4f0>
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f2:	f1ca 0400 	rsb	r4, sl, #0
 80057f6:	4b7d      	ldr	r3, [pc, #500]	; (80059ec <_dtoa_r+0x5a4>)
 80057f8:	f004 020f 	and.w	r2, r4, #15
 80057fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fa fe68 	bl	80004d8 <__aeabi_dmul>
 8005808:	2702      	movs	r7, #2
 800580a:	2300      	movs	r3, #0
 800580c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005810:	4e77      	ldr	r6, [pc, #476]	; (80059f0 <_dtoa_r+0x5a8>)
 8005812:	1124      	asrs	r4, r4, #4
 8005814:	2c00      	cmp	r4, #0
 8005816:	f040 8084 	bne.w	8005922 <_dtoa_r+0x4da>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1d2      	bne.n	80057c4 <_dtoa_r+0x37c>
 800581e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 808b 	beq.w	800593c <_dtoa_r+0x4f4>
 8005826:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800582a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800582e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005832:	2200      	movs	r2, #0
 8005834:	4b6f      	ldr	r3, [pc, #444]	; (80059f4 <_dtoa_r+0x5ac>)
 8005836:	f7fb f8c1 	bl	80009bc <__aeabi_dcmplt>
 800583a:	2800      	cmp	r0, #0
 800583c:	d07e      	beq.n	800593c <_dtoa_r+0x4f4>
 800583e:	9b08      	ldr	r3, [sp, #32]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d07b      	beq.n	800593c <_dtoa_r+0x4f4>
 8005844:	f1b9 0f00 	cmp.w	r9, #0
 8005848:	dd38      	ble.n	80058bc <_dtoa_r+0x474>
 800584a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800584e:	2200      	movs	r2, #0
 8005850:	4b69      	ldr	r3, [pc, #420]	; (80059f8 <_dtoa_r+0x5b0>)
 8005852:	f7fa fe41 	bl	80004d8 <__aeabi_dmul>
 8005856:	464c      	mov	r4, r9
 8005858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800585c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005860:	3701      	adds	r7, #1
 8005862:	4638      	mov	r0, r7
 8005864:	f7fa fdce 	bl	8000404 <__aeabi_i2d>
 8005868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800586c:	f7fa fe34 	bl	80004d8 <__aeabi_dmul>
 8005870:	2200      	movs	r2, #0
 8005872:	4b62      	ldr	r3, [pc, #392]	; (80059fc <_dtoa_r+0x5b4>)
 8005874:	f7fa fc7a 	bl	800016c <__adddf3>
 8005878:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800587c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005880:	9611      	str	r6, [sp, #68]	; 0x44
 8005882:	2c00      	cmp	r4, #0
 8005884:	d15d      	bne.n	8005942 <_dtoa_r+0x4fa>
 8005886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800588a:	2200      	movs	r2, #0
 800588c:	4b5c      	ldr	r3, [pc, #368]	; (8005a00 <_dtoa_r+0x5b8>)
 800588e:	f7fa fc6b 	bl	8000168 <__aeabi_dsub>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800589a:	4633      	mov	r3, r6
 800589c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800589e:	f7fb f8ab 	bl	80009f8 <__aeabi_dcmpgt>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f040 829c 	bne.w	8005de0 <_dtoa_r+0x998>
 80058a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058b2:	f7fb f883 	bl	80009bc <__aeabi_dcmplt>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	f040 8290 	bne.w	8005ddc <_dtoa_r+0x994>
 80058bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80058c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f2c0 8152 	blt.w	8005b70 <_dtoa_r+0x728>
 80058cc:	f1ba 0f0e 	cmp.w	sl, #14
 80058d0:	f300 814e 	bgt.w	8005b70 <_dtoa_r+0x728>
 80058d4:	4b45      	ldr	r3, [pc, #276]	; (80059ec <_dtoa_r+0x5a4>)
 80058d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f280 80db 	bge.w	8005aa0 <_dtoa_r+0x658>
 80058ea:	9b08      	ldr	r3, [sp, #32]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f300 80d7 	bgt.w	8005aa0 <_dtoa_r+0x658>
 80058f2:	f040 8272 	bne.w	8005dda <_dtoa_r+0x992>
 80058f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fa:	2200      	movs	r2, #0
 80058fc:	4b40      	ldr	r3, [pc, #256]	; (8005a00 <_dtoa_r+0x5b8>)
 80058fe:	f7fa fdeb 	bl	80004d8 <__aeabi_dmul>
 8005902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005906:	f7fb f86d 	bl	80009e4 <__aeabi_dcmpge>
 800590a:	9c08      	ldr	r4, [sp, #32]
 800590c:	4626      	mov	r6, r4
 800590e:	2800      	cmp	r0, #0
 8005910:	f040 8248 	bne.w	8005da4 <_dtoa_r+0x95c>
 8005914:	2331      	movs	r3, #49	; 0x31
 8005916:	9f03      	ldr	r7, [sp, #12]
 8005918:	f10a 0a01 	add.w	sl, sl, #1
 800591c:	f807 3b01 	strb.w	r3, [r7], #1
 8005920:	e244      	b.n	8005dac <_dtoa_r+0x964>
 8005922:	07e2      	lsls	r2, r4, #31
 8005924:	d505      	bpl.n	8005932 <_dtoa_r+0x4ea>
 8005926:	e9d6 2300 	ldrd	r2, r3, [r6]
 800592a:	f7fa fdd5 	bl	80004d8 <__aeabi_dmul>
 800592e:	2301      	movs	r3, #1
 8005930:	3701      	adds	r7, #1
 8005932:	1064      	asrs	r4, r4, #1
 8005934:	3608      	adds	r6, #8
 8005936:	e76d      	b.n	8005814 <_dtoa_r+0x3cc>
 8005938:	2702      	movs	r7, #2
 800593a:	e770      	b.n	800581e <_dtoa_r+0x3d6>
 800593c:	46d0      	mov	r8, sl
 800593e:	9c08      	ldr	r4, [sp, #32]
 8005940:	e78f      	b.n	8005862 <_dtoa_r+0x41a>
 8005942:	9903      	ldr	r1, [sp, #12]
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <_dtoa_r+0x5a4>)
 8005946:	4421      	add	r1, r4
 8005948:	9112      	str	r1, [sp, #72]	; 0x48
 800594a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800594c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005950:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005954:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005958:	2900      	cmp	r1, #0
 800595a:	d055      	beq.n	8005a08 <_dtoa_r+0x5c0>
 800595c:	2000      	movs	r0, #0
 800595e:	4929      	ldr	r1, [pc, #164]	; (8005a04 <_dtoa_r+0x5bc>)
 8005960:	f7fa fee4 	bl	800072c <__aeabi_ddiv>
 8005964:	463b      	mov	r3, r7
 8005966:	4632      	mov	r2, r6
 8005968:	f7fa fbfe 	bl	8000168 <__aeabi_dsub>
 800596c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005970:	9f03      	ldr	r7, [sp, #12]
 8005972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005976:	f7fb f85f 	bl	8000a38 <__aeabi_d2iz>
 800597a:	4604      	mov	r4, r0
 800597c:	f7fa fd42 	bl	8000404 <__aeabi_i2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005988:	f7fa fbee 	bl	8000168 <__aeabi_dsub>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	3430      	adds	r4, #48	; 0x30
 8005992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800599a:	f807 4b01 	strb.w	r4, [r7], #1
 800599e:	f7fb f80d 	bl	80009bc <__aeabi_dcmplt>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d174      	bne.n	8005a90 <_dtoa_r+0x648>
 80059a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059aa:	2000      	movs	r0, #0
 80059ac:	4911      	ldr	r1, [pc, #68]	; (80059f4 <_dtoa_r+0x5ac>)
 80059ae:	f7fa fbdb 	bl	8000168 <__aeabi_dsub>
 80059b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059b6:	f7fb f801 	bl	80009bc <__aeabi_dcmplt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f040 80b7 	bne.w	8005b2e <_dtoa_r+0x6e6>
 80059c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059c2:	429f      	cmp	r7, r3
 80059c4:	f43f af7a 	beq.w	80058bc <_dtoa_r+0x474>
 80059c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059cc:	2200      	movs	r2, #0
 80059ce:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <_dtoa_r+0x5b0>)
 80059d0:	f7fa fd82 	bl	80004d8 <__aeabi_dmul>
 80059d4:	2200      	movs	r2, #0
 80059d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <_dtoa_r+0x5b0>)
 80059e0:	f7fa fd7a 	bl	80004d8 <__aeabi_dmul>
 80059e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059e8:	e7c3      	b.n	8005972 <_dtoa_r+0x52a>
 80059ea:	bf00      	nop
 80059ec:	08007540 	.word	0x08007540
 80059f0:	08007518 	.word	0x08007518
 80059f4:	3ff00000 	.word	0x3ff00000
 80059f8:	40240000 	.word	0x40240000
 80059fc:	401c0000 	.word	0x401c0000
 8005a00:	40140000 	.word	0x40140000
 8005a04:	3fe00000 	.word	0x3fe00000
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fa fd64 	bl	80004d8 <__aeabi_dmul>
 8005a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a16:	9c03      	ldr	r4, [sp, #12]
 8005a18:	9314      	str	r3, [sp, #80]	; 0x50
 8005a1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a1e:	f7fb f80b 	bl	8000a38 <__aeabi_d2iz>
 8005a22:	9015      	str	r0, [sp, #84]	; 0x54
 8005a24:	f7fa fcee 	bl	8000404 <__aeabi_i2d>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a30:	f7fa fb9a 	bl	8000168 <__aeabi_dsub>
 8005a34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a36:	4606      	mov	r6, r0
 8005a38:	3330      	adds	r3, #48	; 0x30
 8005a3a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a40:	460f      	mov	r7, r1
 8005a42:	429c      	cmp	r4, r3
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	d124      	bne.n	8005a94 <_dtoa_r+0x64c>
 8005a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a4e:	4bb0      	ldr	r3, [pc, #704]	; (8005d10 <_dtoa_r+0x8c8>)
 8005a50:	f7fa fb8c 	bl	800016c <__adddf3>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	f7fa ffcc 	bl	80009f8 <__aeabi_dcmpgt>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d163      	bne.n	8005b2c <_dtoa_r+0x6e4>
 8005a64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a68:	2000      	movs	r0, #0
 8005a6a:	49a9      	ldr	r1, [pc, #676]	; (8005d10 <_dtoa_r+0x8c8>)
 8005a6c:	f7fa fb7c 	bl	8000168 <__aeabi_dsub>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa ffa0 	bl	80009bc <__aeabi_dcmplt>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f43f af1d 	beq.w	80058bc <_dtoa_r+0x474>
 8005a82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a84:	1e7b      	subs	r3, r7, #1
 8005a86:	9314      	str	r3, [sp, #80]	; 0x50
 8005a88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d0f8      	beq.n	8005a82 <_dtoa_r+0x63a>
 8005a90:	46c2      	mov	sl, r8
 8005a92:	e03b      	b.n	8005b0c <_dtoa_r+0x6c4>
 8005a94:	4b9f      	ldr	r3, [pc, #636]	; (8005d14 <_dtoa_r+0x8cc>)
 8005a96:	f7fa fd1f 	bl	80004d8 <__aeabi_dmul>
 8005a9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a9e:	e7bc      	b.n	8005a1a <_dtoa_r+0x5d2>
 8005aa0:	9f03      	ldr	r7, [sp, #12]
 8005aa2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005aa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f7fa fe3d 	bl	800072c <__aeabi_ddiv>
 8005ab2:	f7fa ffc1 	bl	8000a38 <__aeabi_d2iz>
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	f7fa fca4 	bl	8000404 <__aeabi_i2d>
 8005abc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ac0:	f7fa fd0a 	bl	80004d8 <__aeabi_dmul>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4640      	mov	r0, r8
 8005aca:	4649      	mov	r1, r9
 8005acc:	f7fa fb4c 	bl	8000168 <__aeabi_dsub>
 8005ad0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005ad4:	f807 6b01 	strb.w	r6, [r7], #1
 8005ad8:	9e03      	ldr	r6, [sp, #12]
 8005ada:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005ade:	1bbe      	subs	r6, r7, r6
 8005ae0:	45b4      	cmp	ip, r6
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	d136      	bne.n	8005b56 <_dtoa_r+0x70e>
 8005ae8:	f7fa fb40 	bl	800016c <__adddf3>
 8005aec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005af0:	4680      	mov	r8, r0
 8005af2:	4689      	mov	r9, r1
 8005af4:	f7fa ff80 	bl	80009f8 <__aeabi_dcmpgt>
 8005af8:	bb58      	cbnz	r0, 8005b52 <_dtoa_r+0x70a>
 8005afa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005afe:	4640      	mov	r0, r8
 8005b00:	4649      	mov	r1, r9
 8005b02:	f7fa ff51 	bl	80009a8 <__aeabi_dcmpeq>
 8005b06:	b108      	cbz	r0, 8005b0c <_dtoa_r+0x6c4>
 8005b08:	07e1      	lsls	r1, r4, #31
 8005b0a:	d422      	bmi.n	8005b52 <_dtoa_r+0x70a>
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	4659      	mov	r1, fp
 8005b10:	f000 fd0c 	bl	800652c <_Bfree>
 8005b14:	2300      	movs	r3, #0
 8005b16:	703b      	strb	r3, [r7, #0]
 8005b18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b1a:	f10a 0001 	add.w	r0, sl, #1
 8005b1e:	6018      	str	r0, [r3, #0]
 8005b20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f43f acde 	beq.w	80054e4 <_dtoa_r+0x9c>
 8005b28:	601f      	str	r7, [r3, #0]
 8005b2a:	e4db      	b.n	80054e4 <_dtoa_r+0x9c>
 8005b2c:	4627      	mov	r7, r4
 8005b2e:	463b      	mov	r3, r7
 8005b30:	461f      	mov	r7, r3
 8005b32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b36:	2a39      	cmp	r2, #57	; 0x39
 8005b38:	d107      	bne.n	8005b4a <_dtoa_r+0x702>
 8005b3a:	9a03      	ldr	r2, [sp, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d1f7      	bne.n	8005b30 <_dtoa_r+0x6e8>
 8005b40:	2230      	movs	r2, #48	; 0x30
 8005b42:	9903      	ldr	r1, [sp, #12]
 8005b44:	f108 0801 	add.w	r8, r8, #1
 8005b48:	700a      	strb	r2, [r1, #0]
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	3201      	adds	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e79e      	b.n	8005a90 <_dtoa_r+0x648>
 8005b52:	46d0      	mov	r8, sl
 8005b54:	e7eb      	b.n	8005b2e <_dtoa_r+0x6e6>
 8005b56:	2200      	movs	r2, #0
 8005b58:	4b6e      	ldr	r3, [pc, #440]	; (8005d14 <_dtoa_r+0x8cc>)
 8005b5a:	f7fa fcbd 	bl	80004d8 <__aeabi_dmul>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2300      	movs	r3, #0
 8005b62:	4680      	mov	r8, r0
 8005b64:	4689      	mov	r9, r1
 8005b66:	f7fa ff1f 	bl	80009a8 <__aeabi_dcmpeq>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d09b      	beq.n	8005aa6 <_dtoa_r+0x65e>
 8005b6e:	e7cd      	b.n	8005b0c <_dtoa_r+0x6c4>
 8005b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	f000 80d0 	beq.w	8005d18 <_dtoa_r+0x8d0>
 8005b78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b7a:	2a01      	cmp	r2, #1
 8005b7c:	f300 80ae 	bgt.w	8005cdc <_dtoa_r+0x894>
 8005b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	f000 80a6 	beq.w	8005cd4 <_dtoa_r+0x88c>
 8005b88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b8e:	9f06      	ldr	r7, [sp, #24]
 8005b90:	9a06      	ldr	r2, [sp, #24]
 8005b92:	2101      	movs	r1, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	9206      	str	r2, [sp, #24]
 8005b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	441a      	add	r2, r3
 8005b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba0:	f000 fd7a 	bl	8006698 <__i2b>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	dd0c      	ble.n	8005bc4 <_dtoa_r+0x77c>
 8005baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	dd09      	ble.n	8005bc4 <_dtoa_r+0x77c>
 8005bb0:	42bb      	cmp	r3, r7
 8005bb2:	bfa8      	it	ge
 8005bb4:	463b      	movge	r3, r7
 8005bb6:	9a06      	ldr	r2, [sp, #24]
 8005bb8:	1aff      	subs	r7, r7, r3
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	9206      	str	r2, [sp, #24]
 8005bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	b1f3      	cbz	r3, 8005c06 <_dtoa_r+0x7be>
 8005bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80a8 	beq.w	8005d20 <_dtoa_r+0x8d8>
 8005bd0:	2c00      	cmp	r4, #0
 8005bd2:	dd10      	ble.n	8005bf6 <_dtoa_r+0x7ae>
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 fe1b 	bl	8006814 <__pow5mult>
 8005bde:	465a      	mov	r2, fp
 8005be0:	4601      	mov	r1, r0
 8005be2:	4606      	mov	r6, r0
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 fd6d 	bl	80066c4 <__multiply>
 8005bea:	4680      	mov	r8, r0
 8005bec:	4659      	mov	r1, fp
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 fc9c 	bl	800652c <_Bfree>
 8005bf4:	46c3      	mov	fp, r8
 8005bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf8:	1b1a      	subs	r2, r3, r4
 8005bfa:	d004      	beq.n	8005c06 <_dtoa_r+0x7be>
 8005bfc:	4659      	mov	r1, fp
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fe08 	bl	8006814 <__pow5mult>
 8005c04:	4683      	mov	fp, r0
 8005c06:	2101      	movs	r1, #1
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 fd45 	bl	8006698 <__i2b>
 8005c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c10:	4604      	mov	r4, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f340 8086 	ble.w	8005d24 <_dtoa_r+0x8dc>
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 fdf9 	bl	8006814 <__pow5mult>
 8005c22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c24:	4604      	mov	r4, r0
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	dd7f      	ble.n	8005d2a <_dtoa_r+0x8e2>
 8005c2a:	f04f 0800 	mov.w	r8, #0
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c34:	6918      	ldr	r0, [r3, #16]
 8005c36:	f000 fce1 	bl	80065fc <__hi0bits>
 8005c3a:	f1c0 0020 	rsb	r0, r0, #32
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	4418      	add	r0, r3
 8005c42:	f010 001f 	ands.w	r0, r0, #31
 8005c46:	f000 8092 	beq.w	8005d6e <_dtoa_r+0x926>
 8005c4a:	f1c0 0320 	rsb	r3, r0, #32
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	f340 808a 	ble.w	8005d68 <_dtoa_r+0x920>
 8005c54:	f1c0 001c 	rsb	r0, r0, #28
 8005c58:	9b06      	ldr	r3, [sp, #24]
 8005c5a:	4407      	add	r7, r0
 8005c5c:	4403      	add	r3, r0
 8005c5e:	9306      	str	r3, [sp, #24]
 8005c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c62:	4403      	add	r3, r0
 8005c64:	9309      	str	r3, [sp, #36]	; 0x24
 8005c66:	9b06      	ldr	r3, [sp, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dd05      	ble.n	8005c78 <_dtoa_r+0x830>
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 fe29 	bl	80068c8 <__lshift>
 8005c76:	4683      	mov	fp, r0
 8005c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dd05      	ble.n	8005c8a <_dtoa_r+0x842>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	461a      	mov	r2, r3
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fe20 	bl	80068c8 <__lshift>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d070      	beq.n	8005d72 <_dtoa_r+0x92a>
 8005c90:	4621      	mov	r1, r4
 8005c92:	4658      	mov	r0, fp
 8005c94:	f000 fe88 	bl	80069a8 <__mcmp>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	da6a      	bge.n	8005d72 <_dtoa_r+0x92a>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	220a      	movs	r2, #10
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 fc64 	bl	8006570 <__multadd>
 8005ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005caa:	4683      	mov	fp, r0
 8005cac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8194 	beq.w	8005fde <_dtoa_r+0xb96>
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	2300      	movs	r3, #0
 8005cba:	220a      	movs	r2, #10
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f000 fc57 	bl	8006570 <__multadd>
 8005cc2:	f1b9 0f00 	cmp.w	r9, #0
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	f300 8093 	bgt.w	8005df2 <_dtoa_r+0x9aa>
 8005ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	dc57      	bgt.n	8005d82 <_dtoa_r+0x93a>
 8005cd2:	e08e      	b.n	8005df2 <_dtoa_r+0x9aa>
 8005cd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cda:	e757      	b.n	8005b8c <_dtoa_r+0x744>
 8005cdc:	9b08      	ldr	r3, [sp, #32]
 8005cde:	1e5c      	subs	r4, r3, #1
 8005ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	bfb7      	itett	lt
 8005ce6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ce8:	1b1c      	subge	r4, r3, r4
 8005cea:	1ae2      	sublt	r2, r4, r3
 8005cec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005cee:	bfbe      	ittt	lt
 8005cf0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005cf2:	189b      	addlt	r3, r3, r2
 8005cf4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005cf6:	9b08      	ldr	r3, [sp, #32]
 8005cf8:	bfb8      	it	lt
 8005cfa:	2400      	movlt	r4, #0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bfbb      	ittet	lt
 8005d00:	9b06      	ldrlt	r3, [sp, #24]
 8005d02:	9a08      	ldrlt	r2, [sp, #32]
 8005d04:	9f06      	ldrge	r7, [sp, #24]
 8005d06:	1a9f      	sublt	r7, r3, r2
 8005d08:	bfac      	ite	ge
 8005d0a:	9b08      	ldrge	r3, [sp, #32]
 8005d0c:	2300      	movlt	r3, #0
 8005d0e:	e73f      	b.n	8005b90 <_dtoa_r+0x748>
 8005d10:	3fe00000 	.word	0x3fe00000
 8005d14:	40240000 	.word	0x40240000
 8005d18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d1a:	9f06      	ldr	r7, [sp, #24]
 8005d1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d1e:	e742      	b.n	8005ba6 <_dtoa_r+0x75e>
 8005d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d22:	e76b      	b.n	8005bfc <_dtoa_r+0x7b4>
 8005d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	dc19      	bgt.n	8005d5e <_dtoa_r+0x916>
 8005d2a:	9b04      	ldr	r3, [sp, #16]
 8005d2c:	b9bb      	cbnz	r3, 8005d5e <_dtoa_r+0x916>
 8005d2e:	9b05      	ldr	r3, [sp, #20]
 8005d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d34:	b99b      	cbnz	r3, 8005d5e <_dtoa_r+0x916>
 8005d36:	9b05      	ldr	r3, [sp, #20]
 8005d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d3c:	0d1b      	lsrs	r3, r3, #20
 8005d3e:	051b      	lsls	r3, r3, #20
 8005d40:	b183      	cbz	r3, 8005d64 <_dtoa_r+0x91c>
 8005d42:	f04f 0801 	mov.w	r8, #1
 8005d46:	9b06      	ldr	r3, [sp, #24]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	9306      	str	r3, [sp, #24]
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	3301      	adds	r3, #1
 8005d50:	9309      	str	r3, [sp, #36]	; 0x24
 8005d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f af6a 	bne.w	8005c2e <_dtoa_r+0x7e6>
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e76f      	b.n	8005c3e <_dtoa_r+0x7f6>
 8005d5e:	f04f 0800 	mov.w	r8, #0
 8005d62:	e7f6      	b.n	8005d52 <_dtoa_r+0x90a>
 8005d64:	4698      	mov	r8, r3
 8005d66:	e7f4      	b.n	8005d52 <_dtoa_r+0x90a>
 8005d68:	f43f af7d 	beq.w	8005c66 <_dtoa_r+0x81e>
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	301c      	adds	r0, #28
 8005d70:	e772      	b.n	8005c58 <_dtoa_r+0x810>
 8005d72:	9b08      	ldr	r3, [sp, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dc36      	bgt.n	8005de6 <_dtoa_r+0x99e>
 8005d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	dd33      	ble.n	8005de6 <_dtoa_r+0x99e>
 8005d7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d82:	f1b9 0f00 	cmp.w	r9, #0
 8005d86:	d10d      	bne.n	8005da4 <_dtoa_r+0x95c>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	2205      	movs	r2, #5
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 fbee 	bl	8006570 <__multadd>
 8005d94:	4601      	mov	r1, r0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4658      	mov	r0, fp
 8005d9a:	f000 fe05 	bl	80069a8 <__mcmp>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f73f adb8 	bgt.w	8005914 <_dtoa_r+0x4cc>
 8005da4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005da6:	9f03      	ldr	r7, [sp, #12]
 8005da8:	ea6f 0a03 	mvn.w	sl, r3
 8005dac:	f04f 0800 	mov.w	r8, #0
 8005db0:	4621      	mov	r1, r4
 8005db2:	4628      	mov	r0, r5
 8005db4:	f000 fbba 	bl	800652c <_Bfree>
 8005db8:	2e00      	cmp	r6, #0
 8005dba:	f43f aea7 	beq.w	8005b0c <_dtoa_r+0x6c4>
 8005dbe:	f1b8 0f00 	cmp.w	r8, #0
 8005dc2:	d005      	beq.n	8005dd0 <_dtoa_r+0x988>
 8005dc4:	45b0      	cmp	r8, r6
 8005dc6:	d003      	beq.n	8005dd0 <_dtoa_r+0x988>
 8005dc8:	4641      	mov	r1, r8
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 fbae 	bl	800652c <_Bfree>
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 fbaa 	bl	800652c <_Bfree>
 8005dd8:	e698      	b.n	8005b0c <_dtoa_r+0x6c4>
 8005dda:	2400      	movs	r4, #0
 8005ddc:	4626      	mov	r6, r4
 8005dde:	e7e1      	b.n	8005da4 <_dtoa_r+0x95c>
 8005de0:	46c2      	mov	sl, r8
 8005de2:	4626      	mov	r6, r4
 8005de4:	e596      	b.n	8005914 <_dtoa_r+0x4cc>
 8005de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80fd 	beq.w	8005fec <_dtoa_r+0xba4>
 8005df2:	2f00      	cmp	r7, #0
 8005df4:	dd05      	ble.n	8005e02 <_dtoa_r+0x9ba>
 8005df6:	4631      	mov	r1, r6
 8005df8:	463a      	mov	r2, r7
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 fd64 	bl	80068c8 <__lshift>
 8005e00:	4606      	mov	r6, r0
 8005e02:	f1b8 0f00 	cmp.w	r8, #0
 8005e06:	d05c      	beq.n	8005ec2 <_dtoa_r+0xa7a>
 8005e08:	4628      	mov	r0, r5
 8005e0a:	6871      	ldr	r1, [r6, #4]
 8005e0c:	f000 fb4e 	bl	80064ac <_Balloc>
 8005e10:	4607      	mov	r7, r0
 8005e12:	b928      	cbnz	r0, 8005e20 <_dtoa_r+0x9d8>
 8005e14:	4602      	mov	r2, r0
 8005e16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e1a:	4b7f      	ldr	r3, [pc, #508]	; (8006018 <_dtoa_r+0xbd0>)
 8005e1c:	f7ff bb28 	b.w	8005470 <_dtoa_r+0x28>
 8005e20:	6932      	ldr	r2, [r6, #16]
 8005e22:	f106 010c 	add.w	r1, r6, #12
 8005e26:	3202      	adds	r2, #2
 8005e28:	0092      	lsls	r2, r2, #2
 8005e2a:	300c      	adds	r0, #12
 8005e2c:	f000 fb30 	bl	8006490 <memcpy>
 8005e30:	2201      	movs	r2, #1
 8005e32:	4639      	mov	r1, r7
 8005e34:	4628      	mov	r0, r5
 8005e36:	f000 fd47 	bl	80068c8 <__lshift>
 8005e3a:	46b0      	mov	r8, r6
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	9308      	str	r3, [sp, #32]
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	444b      	add	r3, r9
 8005e48:	930a      	str	r3, [sp, #40]	; 0x28
 8005e4a:	9b04      	ldr	r3, [sp, #16]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	9309      	str	r3, [sp, #36]	; 0x24
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	4621      	mov	r1, r4
 8005e56:	3b01      	subs	r3, #1
 8005e58:	4658      	mov	r0, fp
 8005e5a:	9304      	str	r3, [sp, #16]
 8005e5c:	f7ff fa66 	bl	800532c <quorem>
 8005e60:	4603      	mov	r3, r0
 8005e62:	4641      	mov	r1, r8
 8005e64:	3330      	adds	r3, #48	; 0x30
 8005e66:	9006      	str	r0, [sp, #24]
 8005e68:	4658      	mov	r0, fp
 8005e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e6c:	f000 fd9c 	bl	80069a8 <__mcmp>
 8005e70:	4632      	mov	r2, r6
 8005e72:	4681      	mov	r9, r0
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 fdb2 	bl	80069e0 <__mdiff>
 8005e7c:	68c2      	ldr	r2, [r0, #12]
 8005e7e:	4607      	mov	r7, r0
 8005e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e82:	bb02      	cbnz	r2, 8005ec6 <_dtoa_r+0xa7e>
 8005e84:	4601      	mov	r1, r0
 8005e86:	4658      	mov	r0, fp
 8005e88:	f000 fd8e 	bl	80069a8 <__mcmp>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e90:	4639      	mov	r1, r7
 8005e92:	4628      	mov	r0, r5
 8005e94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005e98:	f000 fb48 	bl	800652c <_Bfree>
 8005e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ea0:	9f08      	ldr	r7, [sp, #32]
 8005ea2:	ea43 0102 	orr.w	r1, r3, r2
 8005ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eac:	d10d      	bne.n	8005eca <_dtoa_r+0xa82>
 8005eae:	2b39      	cmp	r3, #57	; 0x39
 8005eb0:	d029      	beq.n	8005f06 <_dtoa_r+0xabe>
 8005eb2:	f1b9 0f00 	cmp.w	r9, #0
 8005eb6:	dd01      	ble.n	8005ebc <_dtoa_r+0xa74>
 8005eb8:	9b06      	ldr	r3, [sp, #24]
 8005eba:	3331      	adds	r3, #49	; 0x31
 8005ebc:	9a04      	ldr	r2, [sp, #16]
 8005ebe:	7013      	strb	r3, [r2, #0]
 8005ec0:	e776      	b.n	8005db0 <_dtoa_r+0x968>
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	e7b9      	b.n	8005e3a <_dtoa_r+0x9f2>
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	e7e2      	b.n	8005e90 <_dtoa_r+0xa48>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	db06      	blt.n	8005ede <_dtoa_r+0xa96>
 8005ed0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005ed2:	ea41 0909 	orr.w	r9, r1, r9
 8005ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed8:	ea59 0101 	orrs.w	r1, r9, r1
 8005edc:	d120      	bne.n	8005f20 <_dtoa_r+0xad8>
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	ddec      	ble.n	8005ebc <_dtoa_r+0xa74>
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	9308      	str	r3, [sp, #32]
 8005eea:	f000 fced 	bl	80068c8 <__lshift>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4683      	mov	fp, r0
 8005ef2:	f000 fd59 	bl	80069a8 <__mcmp>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	9b08      	ldr	r3, [sp, #32]
 8005efa:	dc02      	bgt.n	8005f02 <_dtoa_r+0xaba>
 8005efc:	d1de      	bne.n	8005ebc <_dtoa_r+0xa74>
 8005efe:	07da      	lsls	r2, r3, #31
 8005f00:	d5dc      	bpl.n	8005ebc <_dtoa_r+0xa74>
 8005f02:	2b39      	cmp	r3, #57	; 0x39
 8005f04:	d1d8      	bne.n	8005eb8 <_dtoa_r+0xa70>
 8005f06:	2339      	movs	r3, #57	; 0x39
 8005f08:	9a04      	ldr	r2, [sp, #16]
 8005f0a:	7013      	strb	r3, [r2, #0]
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	461f      	mov	r7, r3
 8005f10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	2a39      	cmp	r2, #57	; 0x39
 8005f18:	d050      	beq.n	8005fbc <_dtoa_r+0xb74>
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e747      	b.n	8005db0 <_dtoa_r+0x968>
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	dd03      	ble.n	8005f2c <_dtoa_r+0xae4>
 8005f24:	2b39      	cmp	r3, #57	; 0x39
 8005f26:	d0ee      	beq.n	8005f06 <_dtoa_r+0xabe>
 8005f28:	3301      	adds	r3, #1
 8005f2a:	e7c7      	b.n	8005ebc <_dtoa_r+0xa74>
 8005f2c:	9a08      	ldr	r2, [sp, #32]
 8005f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f34:	428a      	cmp	r2, r1
 8005f36:	d02a      	beq.n	8005f8e <_dtoa_r+0xb46>
 8005f38:	4659      	mov	r1, fp
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 fb16 	bl	8006570 <__multadd>
 8005f44:	45b0      	cmp	r8, r6
 8005f46:	4683      	mov	fp, r0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	f04f 020a 	mov.w	r2, #10
 8005f50:	4641      	mov	r1, r8
 8005f52:	4628      	mov	r0, r5
 8005f54:	d107      	bne.n	8005f66 <_dtoa_r+0xb1e>
 8005f56:	f000 fb0b 	bl	8006570 <__multadd>
 8005f5a:	4680      	mov	r8, r0
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	9b08      	ldr	r3, [sp, #32]
 8005f60:	3301      	adds	r3, #1
 8005f62:	9308      	str	r3, [sp, #32]
 8005f64:	e775      	b.n	8005e52 <_dtoa_r+0xa0a>
 8005f66:	f000 fb03 	bl	8006570 <__multadd>
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	2300      	movs	r3, #0
 8005f70:	220a      	movs	r2, #10
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fafc 	bl	8006570 <__multadd>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	e7f0      	b.n	8005f5e <_dtoa_r+0xb16>
 8005f7c:	f1b9 0f00 	cmp.w	r9, #0
 8005f80:	bfcc      	ite	gt
 8005f82:	464f      	movgt	r7, r9
 8005f84:	2701      	movle	r7, #1
 8005f86:	f04f 0800 	mov.w	r8, #0
 8005f8a:	9a03      	ldr	r2, [sp, #12]
 8005f8c:	4417      	add	r7, r2
 8005f8e:	4659      	mov	r1, fp
 8005f90:	2201      	movs	r2, #1
 8005f92:	4628      	mov	r0, r5
 8005f94:	9308      	str	r3, [sp, #32]
 8005f96:	f000 fc97 	bl	80068c8 <__lshift>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4683      	mov	fp, r0
 8005f9e:	f000 fd03 	bl	80069a8 <__mcmp>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	dcb2      	bgt.n	8005f0c <_dtoa_r+0xac4>
 8005fa6:	d102      	bne.n	8005fae <_dtoa_r+0xb66>
 8005fa8:	9b08      	ldr	r3, [sp, #32]
 8005faa:	07db      	lsls	r3, r3, #31
 8005fac:	d4ae      	bmi.n	8005f0c <_dtoa_r+0xac4>
 8005fae:	463b      	mov	r3, r7
 8005fb0:	461f      	mov	r7, r3
 8005fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fb6:	2a30      	cmp	r2, #48	; 0x30
 8005fb8:	d0fa      	beq.n	8005fb0 <_dtoa_r+0xb68>
 8005fba:	e6f9      	b.n	8005db0 <_dtoa_r+0x968>
 8005fbc:	9a03      	ldr	r2, [sp, #12]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d1a5      	bne.n	8005f0e <_dtoa_r+0xac6>
 8005fc2:	2331      	movs	r3, #49	; 0x31
 8005fc4:	f10a 0a01 	add.w	sl, sl, #1
 8005fc8:	e779      	b.n	8005ebe <_dtoa_r+0xa76>
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <_dtoa_r+0xbd4>)
 8005fcc:	f7ff baa8 	b.w	8005520 <_dtoa_r+0xd8>
 8005fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f47f aa81 	bne.w	80054da <_dtoa_r+0x92>
 8005fd8:	4b11      	ldr	r3, [pc, #68]	; (8006020 <_dtoa_r+0xbd8>)
 8005fda:	f7ff baa1 	b.w	8005520 <_dtoa_r+0xd8>
 8005fde:	f1b9 0f00 	cmp.w	r9, #0
 8005fe2:	dc03      	bgt.n	8005fec <_dtoa_r+0xba4>
 8005fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	f73f aecb 	bgt.w	8005d82 <_dtoa_r+0x93a>
 8005fec:	9f03      	ldr	r7, [sp, #12]
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4658      	mov	r0, fp
 8005ff2:	f7ff f99b 	bl	800532c <quorem>
 8005ff6:	9a03      	ldr	r2, [sp, #12]
 8005ff8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ffc:	f807 3b01 	strb.w	r3, [r7], #1
 8006000:	1aba      	subs	r2, r7, r2
 8006002:	4591      	cmp	r9, r2
 8006004:	ddba      	ble.n	8005f7c <_dtoa_r+0xb34>
 8006006:	4659      	mov	r1, fp
 8006008:	2300      	movs	r3, #0
 800600a:	220a      	movs	r2, #10
 800600c:	4628      	mov	r0, r5
 800600e:	f000 faaf 	bl	8006570 <__multadd>
 8006012:	4683      	mov	fp, r0
 8006014:	e7eb      	b.n	8005fee <_dtoa_r+0xba6>
 8006016:	bf00      	nop
 8006018:	0800744b 	.word	0x0800744b
 800601c:	080073a8 	.word	0x080073a8
 8006020:	080073cc 	.word	0x080073cc

08006024 <__sflush_r>:
 8006024:	898a      	ldrh	r2, [r1, #12]
 8006026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006028:	4605      	mov	r5, r0
 800602a:	0710      	lsls	r0, r2, #28
 800602c:	460c      	mov	r4, r1
 800602e:	d457      	bmi.n	80060e0 <__sflush_r+0xbc>
 8006030:	684b      	ldr	r3, [r1, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	dc04      	bgt.n	8006040 <__sflush_r+0x1c>
 8006036:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	dc01      	bgt.n	8006040 <__sflush_r+0x1c>
 800603c:	2000      	movs	r0, #0
 800603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006042:	2e00      	cmp	r6, #0
 8006044:	d0fa      	beq.n	800603c <__sflush_r+0x18>
 8006046:	2300      	movs	r3, #0
 8006048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800604c:	682f      	ldr	r7, [r5, #0]
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	d032      	beq.n	80060b8 <__sflush_r+0x94>
 8006052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	075a      	lsls	r2, r3, #29
 8006058:	d505      	bpl.n	8006066 <__sflush_r+0x42>
 800605a:	6863      	ldr	r3, [r4, #4]
 800605c:	1ac0      	subs	r0, r0, r3
 800605e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006060:	b10b      	cbz	r3, 8006066 <__sflush_r+0x42>
 8006062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006064:	1ac0      	subs	r0, r0, r3
 8006066:	2300      	movs	r3, #0
 8006068:	4602      	mov	r2, r0
 800606a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800606c:	4628      	mov	r0, r5
 800606e:	6a21      	ldr	r1, [r4, #32]
 8006070:	47b0      	blx	r6
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	d106      	bne.n	8006086 <__sflush_r+0x62>
 8006078:	6829      	ldr	r1, [r5, #0]
 800607a:	291d      	cmp	r1, #29
 800607c:	d82c      	bhi.n	80060d8 <__sflush_r+0xb4>
 800607e:	4a29      	ldr	r2, [pc, #164]	; (8006124 <__sflush_r+0x100>)
 8006080:	40ca      	lsrs	r2, r1
 8006082:	07d6      	lsls	r6, r2, #31
 8006084:	d528      	bpl.n	80060d8 <__sflush_r+0xb4>
 8006086:	2200      	movs	r2, #0
 8006088:	6062      	str	r2, [r4, #4]
 800608a:	6922      	ldr	r2, [r4, #16]
 800608c:	04d9      	lsls	r1, r3, #19
 800608e:	6022      	str	r2, [r4, #0]
 8006090:	d504      	bpl.n	800609c <__sflush_r+0x78>
 8006092:	1c42      	adds	r2, r0, #1
 8006094:	d101      	bne.n	800609a <__sflush_r+0x76>
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	b903      	cbnz	r3, 800609c <__sflush_r+0x78>
 800609a:	6560      	str	r0, [r4, #84]	; 0x54
 800609c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800609e:	602f      	str	r7, [r5, #0]
 80060a0:	2900      	cmp	r1, #0
 80060a2:	d0cb      	beq.n	800603c <__sflush_r+0x18>
 80060a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060a8:	4299      	cmp	r1, r3
 80060aa:	d002      	beq.n	80060b2 <__sflush_r+0x8e>
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 fd93 	bl	8006bd8 <_free_r>
 80060b2:	2000      	movs	r0, #0
 80060b4:	6360      	str	r0, [r4, #52]	; 0x34
 80060b6:	e7c2      	b.n	800603e <__sflush_r+0x1a>
 80060b8:	6a21      	ldr	r1, [r4, #32]
 80060ba:	2301      	movs	r3, #1
 80060bc:	4628      	mov	r0, r5
 80060be:	47b0      	blx	r6
 80060c0:	1c41      	adds	r1, r0, #1
 80060c2:	d1c7      	bne.n	8006054 <__sflush_r+0x30>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0c4      	beq.n	8006054 <__sflush_r+0x30>
 80060ca:	2b1d      	cmp	r3, #29
 80060cc:	d001      	beq.n	80060d2 <__sflush_r+0xae>
 80060ce:	2b16      	cmp	r3, #22
 80060d0:	d101      	bne.n	80060d6 <__sflush_r+0xb2>
 80060d2:	602f      	str	r7, [r5, #0]
 80060d4:	e7b2      	b.n	800603c <__sflush_r+0x18>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	e7ae      	b.n	800603e <__sflush_r+0x1a>
 80060e0:	690f      	ldr	r7, [r1, #16]
 80060e2:	2f00      	cmp	r7, #0
 80060e4:	d0aa      	beq.n	800603c <__sflush_r+0x18>
 80060e6:	0793      	lsls	r3, r2, #30
 80060e8:	bf18      	it	ne
 80060ea:	2300      	movne	r3, #0
 80060ec:	680e      	ldr	r6, [r1, #0]
 80060ee:	bf08      	it	eq
 80060f0:	694b      	ldreq	r3, [r1, #20]
 80060f2:	1bf6      	subs	r6, r6, r7
 80060f4:	600f      	str	r7, [r1, #0]
 80060f6:	608b      	str	r3, [r1, #8]
 80060f8:	2e00      	cmp	r6, #0
 80060fa:	dd9f      	ble.n	800603c <__sflush_r+0x18>
 80060fc:	4633      	mov	r3, r6
 80060fe:	463a      	mov	r2, r7
 8006100:	4628      	mov	r0, r5
 8006102:	6a21      	ldr	r1, [r4, #32]
 8006104:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006108:	47e0      	blx	ip
 800610a:	2800      	cmp	r0, #0
 800610c:	dc06      	bgt.n	800611c <__sflush_r+0xf8>
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	e790      	b.n	800603e <__sflush_r+0x1a>
 800611c:	4407      	add	r7, r0
 800611e:	1a36      	subs	r6, r6, r0
 8006120:	e7ea      	b.n	80060f8 <__sflush_r+0xd4>
 8006122:	bf00      	nop
 8006124:	20400001 	.word	0x20400001

08006128 <_fflush_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	690b      	ldr	r3, [r1, #16]
 800612c:	4605      	mov	r5, r0
 800612e:	460c      	mov	r4, r1
 8006130:	b913      	cbnz	r3, 8006138 <_fflush_r+0x10>
 8006132:	2500      	movs	r5, #0
 8006134:	4628      	mov	r0, r5
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	b118      	cbz	r0, 8006142 <_fflush_r+0x1a>
 800613a:	6983      	ldr	r3, [r0, #24]
 800613c:	b90b      	cbnz	r3, 8006142 <_fflush_r+0x1a>
 800613e:	f000 f887 	bl	8006250 <__sinit>
 8006142:	4b14      	ldr	r3, [pc, #80]	; (8006194 <_fflush_r+0x6c>)
 8006144:	429c      	cmp	r4, r3
 8006146:	d11b      	bne.n	8006180 <_fflush_r+0x58>
 8006148:	686c      	ldr	r4, [r5, #4]
 800614a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0ef      	beq.n	8006132 <_fflush_r+0xa>
 8006152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006154:	07d0      	lsls	r0, r2, #31
 8006156:	d404      	bmi.n	8006162 <_fflush_r+0x3a>
 8006158:	0599      	lsls	r1, r3, #22
 800615a:	d402      	bmi.n	8006162 <_fflush_r+0x3a>
 800615c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800615e:	f000 f91a 	bl	8006396 <__retarget_lock_acquire_recursive>
 8006162:	4628      	mov	r0, r5
 8006164:	4621      	mov	r1, r4
 8006166:	f7ff ff5d 	bl	8006024 <__sflush_r>
 800616a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800616c:	4605      	mov	r5, r0
 800616e:	07da      	lsls	r2, r3, #31
 8006170:	d4e0      	bmi.n	8006134 <_fflush_r+0xc>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	059b      	lsls	r3, r3, #22
 8006176:	d4dd      	bmi.n	8006134 <_fflush_r+0xc>
 8006178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617a:	f000 f90d 	bl	8006398 <__retarget_lock_release_recursive>
 800617e:	e7d9      	b.n	8006134 <_fflush_r+0xc>
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <_fflush_r+0x70>)
 8006182:	429c      	cmp	r4, r3
 8006184:	d101      	bne.n	800618a <_fflush_r+0x62>
 8006186:	68ac      	ldr	r4, [r5, #8]
 8006188:	e7df      	b.n	800614a <_fflush_r+0x22>
 800618a:	4b04      	ldr	r3, [pc, #16]	; (800619c <_fflush_r+0x74>)
 800618c:	429c      	cmp	r4, r3
 800618e:	bf08      	it	eq
 8006190:	68ec      	ldreq	r4, [r5, #12]
 8006192:	e7da      	b.n	800614a <_fflush_r+0x22>
 8006194:	0800747c 	.word	0x0800747c
 8006198:	0800749c 	.word	0x0800749c
 800619c:	0800745c 	.word	0x0800745c

080061a0 <std>:
 80061a0:	2300      	movs	r3, #0
 80061a2:	b510      	push	{r4, lr}
 80061a4:	4604      	mov	r4, r0
 80061a6:	e9c0 3300 	strd	r3, r3, [r0]
 80061aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ae:	6083      	str	r3, [r0, #8]
 80061b0:	8181      	strh	r1, [r0, #12]
 80061b2:	6643      	str	r3, [r0, #100]	; 0x64
 80061b4:	81c2      	strh	r2, [r0, #14]
 80061b6:	6183      	str	r3, [r0, #24]
 80061b8:	4619      	mov	r1, r3
 80061ba:	2208      	movs	r2, #8
 80061bc:	305c      	adds	r0, #92	; 0x5c
 80061be:	f7fe fb17 	bl	80047f0 <memset>
 80061c2:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <std+0x38>)
 80061c4:	6224      	str	r4, [r4, #32]
 80061c6:	6263      	str	r3, [r4, #36]	; 0x24
 80061c8:	4b04      	ldr	r3, [pc, #16]	; (80061dc <std+0x3c>)
 80061ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <std+0x40>)
 80061ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <std+0x44>)
 80061d2:	6323      	str	r3, [r4, #48]	; 0x30
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	bf00      	nop
 80061d8:	08006db1 	.word	0x08006db1
 80061dc:	08006dd3 	.word	0x08006dd3
 80061e0:	08006e0b 	.word	0x08006e0b
 80061e4:	08006e2f 	.word	0x08006e2f

080061e8 <_cleanup_r>:
 80061e8:	4901      	ldr	r1, [pc, #4]	; (80061f0 <_cleanup_r+0x8>)
 80061ea:	f000 b8af 	b.w	800634c <_fwalk_reent>
 80061ee:	bf00      	nop
 80061f0:	08006129 	.word	0x08006129

080061f4 <__sfmoreglue>:
 80061f4:	2268      	movs	r2, #104	; 0x68
 80061f6:	b570      	push	{r4, r5, r6, lr}
 80061f8:	1e4d      	subs	r5, r1, #1
 80061fa:	4355      	muls	r5, r2
 80061fc:	460e      	mov	r6, r1
 80061fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006202:	f000 fd51 	bl	8006ca8 <_malloc_r>
 8006206:	4604      	mov	r4, r0
 8006208:	b140      	cbz	r0, 800621c <__sfmoreglue+0x28>
 800620a:	2100      	movs	r1, #0
 800620c:	e9c0 1600 	strd	r1, r6, [r0]
 8006210:	300c      	adds	r0, #12
 8006212:	60a0      	str	r0, [r4, #8]
 8006214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006218:	f7fe faea 	bl	80047f0 <memset>
 800621c:	4620      	mov	r0, r4
 800621e:	bd70      	pop	{r4, r5, r6, pc}

08006220 <__sfp_lock_acquire>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__sfp_lock_acquire+0x8>)
 8006222:	f000 b8b8 	b.w	8006396 <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	20000361 	.word	0x20000361

0800622c <__sfp_lock_release>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__sfp_lock_release+0x8>)
 800622e:	f000 b8b3 	b.w	8006398 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	20000361 	.word	0x20000361

08006238 <__sinit_lock_acquire>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__sinit_lock_acquire+0x8>)
 800623a:	f000 b8ac 	b.w	8006396 <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	20000362 	.word	0x20000362

08006244 <__sinit_lock_release>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__sinit_lock_release+0x8>)
 8006246:	f000 b8a7 	b.w	8006398 <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	20000362 	.word	0x20000362

08006250 <__sinit>:
 8006250:	b510      	push	{r4, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	f7ff fff0 	bl	8006238 <__sinit_lock_acquire>
 8006258:	69a3      	ldr	r3, [r4, #24]
 800625a:	b11b      	cbz	r3, 8006264 <__sinit+0x14>
 800625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006260:	f7ff bff0 	b.w	8006244 <__sinit_lock_release>
 8006264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006268:	6523      	str	r3, [r4, #80]	; 0x50
 800626a:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <__sinit+0x68>)
 800626c:	4a13      	ldr	r2, [pc, #76]	; (80062bc <__sinit+0x6c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	62a2      	str	r2, [r4, #40]	; 0x28
 8006272:	42a3      	cmp	r3, r4
 8006274:	bf08      	it	eq
 8006276:	2301      	moveq	r3, #1
 8006278:	4620      	mov	r0, r4
 800627a:	bf08      	it	eq
 800627c:	61a3      	streq	r3, [r4, #24]
 800627e:	f000 f81f 	bl	80062c0 <__sfp>
 8006282:	6060      	str	r0, [r4, #4]
 8006284:	4620      	mov	r0, r4
 8006286:	f000 f81b 	bl	80062c0 <__sfp>
 800628a:	60a0      	str	r0, [r4, #8]
 800628c:	4620      	mov	r0, r4
 800628e:	f000 f817 	bl	80062c0 <__sfp>
 8006292:	2200      	movs	r2, #0
 8006294:	2104      	movs	r1, #4
 8006296:	60e0      	str	r0, [r4, #12]
 8006298:	6860      	ldr	r0, [r4, #4]
 800629a:	f7ff ff81 	bl	80061a0 <std>
 800629e:	2201      	movs	r2, #1
 80062a0:	2109      	movs	r1, #9
 80062a2:	68a0      	ldr	r0, [r4, #8]
 80062a4:	f7ff ff7c 	bl	80061a0 <std>
 80062a8:	2202      	movs	r2, #2
 80062aa:	2112      	movs	r1, #18
 80062ac:	68e0      	ldr	r0, [r4, #12]
 80062ae:	f7ff ff77 	bl	80061a0 <std>
 80062b2:	2301      	movs	r3, #1
 80062b4:	61a3      	str	r3, [r4, #24]
 80062b6:	e7d1      	b.n	800625c <__sinit+0xc>
 80062b8:	08007394 	.word	0x08007394
 80062bc:	080061e9 	.word	0x080061e9

080062c0 <__sfp>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	4607      	mov	r7, r0
 80062c4:	f7ff ffac 	bl	8006220 <__sfp_lock_acquire>
 80062c8:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <__sfp+0x84>)
 80062ca:	681e      	ldr	r6, [r3, #0]
 80062cc:	69b3      	ldr	r3, [r6, #24]
 80062ce:	b913      	cbnz	r3, 80062d6 <__sfp+0x16>
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7ff ffbd 	bl	8006250 <__sinit>
 80062d6:	3648      	adds	r6, #72	; 0x48
 80062d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062dc:	3b01      	subs	r3, #1
 80062de:	d503      	bpl.n	80062e8 <__sfp+0x28>
 80062e0:	6833      	ldr	r3, [r6, #0]
 80062e2:	b30b      	cbz	r3, 8006328 <__sfp+0x68>
 80062e4:	6836      	ldr	r6, [r6, #0]
 80062e6:	e7f7      	b.n	80062d8 <__sfp+0x18>
 80062e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062ec:	b9d5      	cbnz	r5, 8006324 <__sfp+0x64>
 80062ee:	4b16      	ldr	r3, [pc, #88]	; (8006348 <__sfp+0x88>)
 80062f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062f4:	60e3      	str	r3, [r4, #12]
 80062f6:	6665      	str	r5, [r4, #100]	; 0x64
 80062f8:	f000 f84c 	bl	8006394 <__retarget_lock_init_recursive>
 80062fc:	f7ff ff96 	bl	800622c <__sfp_lock_release>
 8006300:	2208      	movs	r2, #8
 8006302:	4629      	mov	r1, r5
 8006304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800630c:	6025      	str	r5, [r4, #0]
 800630e:	61a5      	str	r5, [r4, #24]
 8006310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006314:	f7fe fa6c 	bl	80047f0 <memset>
 8006318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800631c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006320:	4620      	mov	r0, r4
 8006322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006324:	3468      	adds	r4, #104	; 0x68
 8006326:	e7d9      	b.n	80062dc <__sfp+0x1c>
 8006328:	2104      	movs	r1, #4
 800632a:	4638      	mov	r0, r7
 800632c:	f7ff ff62 	bl	80061f4 <__sfmoreglue>
 8006330:	4604      	mov	r4, r0
 8006332:	6030      	str	r0, [r6, #0]
 8006334:	2800      	cmp	r0, #0
 8006336:	d1d5      	bne.n	80062e4 <__sfp+0x24>
 8006338:	f7ff ff78 	bl	800622c <__sfp_lock_release>
 800633c:	230c      	movs	r3, #12
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	e7ee      	b.n	8006320 <__sfp+0x60>
 8006342:	bf00      	nop
 8006344:	08007394 	.word	0x08007394
 8006348:	ffff0001 	.word	0xffff0001

0800634c <_fwalk_reent>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	4606      	mov	r6, r0
 8006352:	4688      	mov	r8, r1
 8006354:	2700      	movs	r7, #0
 8006356:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800635a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800635e:	f1b9 0901 	subs.w	r9, r9, #1
 8006362:	d505      	bpl.n	8006370 <_fwalk_reent+0x24>
 8006364:	6824      	ldr	r4, [r4, #0]
 8006366:	2c00      	cmp	r4, #0
 8006368:	d1f7      	bne.n	800635a <_fwalk_reent+0xe>
 800636a:	4638      	mov	r0, r7
 800636c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006370:	89ab      	ldrh	r3, [r5, #12]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d907      	bls.n	8006386 <_fwalk_reent+0x3a>
 8006376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800637a:	3301      	adds	r3, #1
 800637c:	d003      	beq.n	8006386 <_fwalk_reent+0x3a>
 800637e:	4629      	mov	r1, r5
 8006380:	4630      	mov	r0, r6
 8006382:	47c0      	blx	r8
 8006384:	4307      	orrs	r7, r0
 8006386:	3568      	adds	r5, #104	; 0x68
 8006388:	e7e9      	b.n	800635e <_fwalk_reent+0x12>
	...

0800638c <_localeconv_r>:
 800638c:	4800      	ldr	r0, [pc, #0]	; (8006390 <_localeconv_r+0x4>)
 800638e:	4770      	bx	lr
 8006390:	20000160 	.word	0x20000160

08006394 <__retarget_lock_init_recursive>:
 8006394:	4770      	bx	lr

08006396 <__retarget_lock_acquire_recursive>:
 8006396:	4770      	bx	lr

08006398 <__retarget_lock_release_recursive>:
 8006398:	4770      	bx	lr

0800639a <__swhatbuf_r>:
 800639a:	b570      	push	{r4, r5, r6, lr}
 800639c:	460e      	mov	r6, r1
 800639e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a2:	4614      	mov	r4, r2
 80063a4:	2900      	cmp	r1, #0
 80063a6:	461d      	mov	r5, r3
 80063a8:	b096      	sub	sp, #88	; 0x58
 80063aa:	da08      	bge.n	80063be <__swhatbuf_r+0x24>
 80063ac:	2200      	movs	r2, #0
 80063ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063b2:	602a      	str	r2, [r5, #0]
 80063b4:	061a      	lsls	r2, r3, #24
 80063b6:	d410      	bmi.n	80063da <__swhatbuf_r+0x40>
 80063b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063bc:	e00e      	b.n	80063dc <__swhatbuf_r+0x42>
 80063be:	466a      	mov	r2, sp
 80063c0:	f000 fd8c 	bl	8006edc <_fstat_r>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	dbf1      	blt.n	80063ac <__swhatbuf_r+0x12>
 80063c8:	9a01      	ldr	r2, [sp, #4]
 80063ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063d2:	425a      	negs	r2, r3
 80063d4:	415a      	adcs	r2, r3
 80063d6:	602a      	str	r2, [r5, #0]
 80063d8:	e7ee      	b.n	80063b8 <__swhatbuf_r+0x1e>
 80063da:	2340      	movs	r3, #64	; 0x40
 80063dc:	2000      	movs	r0, #0
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	b016      	add	sp, #88	; 0x58
 80063e2:	bd70      	pop	{r4, r5, r6, pc}

080063e4 <__smakebuf_r>:
 80063e4:	898b      	ldrh	r3, [r1, #12]
 80063e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063e8:	079d      	lsls	r5, r3, #30
 80063ea:	4606      	mov	r6, r0
 80063ec:	460c      	mov	r4, r1
 80063ee:	d507      	bpl.n	8006400 <__smakebuf_r+0x1c>
 80063f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	2301      	movs	r3, #1
 80063fa:	6163      	str	r3, [r4, #20]
 80063fc:	b002      	add	sp, #8
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	466a      	mov	r2, sp
 8006402:	ab01      	add	r3, sp, #4
 8006404:	f7ff ffc9 	bl	800639a <__swhatbuf_r>
 8006408:	9900      	ldr	r1, [sp, #0]
 800640a:	4605      	mov	r5, r0
 800640c:	4630      	mov	r0, r6
 800640e:	f000 fc4b 	bl	8006ca8 <_malloc_r>
 8006412:	b948      	cbnz	r0, 8006428 <__smakebuf_r+0x44>
 8006414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006418:	059a      	lsls	r2, r3, #22
 800641a:	d4ef      	bmi.n	80063fc <__smakebuf_r+0x18>
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	f043 0302 	orr.w	r3, r3, #2
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	e7e3      	b.n	80063f0 <__smakebuf_r+0xc>
 8006428:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <__smakebuf_r+0x7c>)
 800642a:	62b3      	str	r3, [r6, #40]	; 0x28
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	6020      	str	r0, [r4, #0]
 8006430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	9b00      	ldr	r3, [sp, #0]
 8006438:	6120      	str	r0, [r4, #16]
 800643a:	6163      	str	r3, [r4, #20]
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	b15b      	cbz	r3, 8006458 <__smakebuf_r+0x74>
 8006440:	4630      	mov	r0, r6
 8006442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006446:	f000 fd5b 	bl	8006f00 <_isatty_r>
 800644a:	b128      	cbz	r0, 8006458 <__smakebuf_r+0x74>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f023 0303 	bic.w	r3, r3, #3
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	89a0      	ldrh	r0, [r4, #12]
 800645a:	4305      	orrs	r5, r0
 800645c:	81a5      	strh	r5, [r4, #12]
 800645e:	e7cd      	b.n	80063fc <__smakebuf_r+0x18>
 8006460:	080061e9 	.word	0x080061e9

08006464 <malloc>:
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <malloc+0xc>)
 8006466:	4601      	mov	r1, r0
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f000 bc1d 	b.w	8006ca8 <_malloc_r>
 800646e:	bf00      	nop
 8006470:	2000000c 	.word	0x2000000c

08006474 <memchr>:
 8006474:	4603      	mov	r3, r0
 8006476:	b510      	push	{r4, lr}
 8006478:	b2c9      	uxtb	r1, r1
 800647a:	4402      	add	r2, r0
 800647c:	4293      	cmp	r3, r2
 800647e:	4618      	mov	r0, r3
 8006480:	d101      	bne.n	8006486 <memchr+0x12>
 8006482:	2000      	movs	r0, #0
 8006484:	e003      	b.n	800648e <memchr+0x1a>
 8006486:	7804      	ldrb	r4, [r0, #0]
 8006488:	3301      	adds	r3, #1
 800648a:	428c      	cmp	r4, r1
 800648c:	d1f6      	bne.n	800647c <memchr+0x8>
 800648e:	bd10      	pop	{r4, pc}

08006490 <memcpy>:
 8006490:	440a      	add	r2, r1
 8006492:	4291      	cmp	r1, r2
 8006494:	f100 33ff 	add.w	r3, r0, #4294967295
 8006498:	d100      	bne.n	800649c <memcpy+0xc>
 800649a:	4770      	bx	lr
 800649c:	b510      	push	{r4, lr}
 800649e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a2:	4291      	cmp	r1, r2
 80064a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a8:	d1f9      	bne.n	800649e <memcpy+0xe>
 80064aa:	bd10      	pop	{r4, pc}

080064ac <_Balloc>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064b0:	4604      	mov	r4, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	b976      	cbnz	r6, 80064d4 <_Balloc+0x28>
 80064b6:	2010      	movs	r0, #16
 80064b8:	f7ff ffd4 	bl	8006464 <malloc>
 80064bc:	4602      	mov	r2, r0
 80064be:	6260      	str	r0, [r4, #36]	; 0x24
 80064c0:	b920      	cbnz	r0, 80064cc <_Balloc+0x20>
 80064c2:	2166      	movs	r1, #102	; 0x66
 80064c4:	4b17      	ldr	r3, [pc, #92]	; (8006524 <_Balloc+0x78>)
 80064c6:	4818      	ldr	r0, [pc, #96]	; (8006528 <_Balloc+0x7c>)
 80064c8:	f000 fcc8 	bl	8006e5c <__assert_func>
 80064cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064d0:	6006      	str	r6, [r0, #0]
 80064d2:	60c6      	str	r6, [r0, #12]
 80064d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064d6:	68f3      	ldr	r3, [r6, #12]
 80064d8:	b183      	cbz	r3, 80064fc <_Balloc+0x50>
 80064da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064e2:	b9b8      	cbnz	r0, 8006514 <_Balloc+0x68>
 80064e4:	2101      	movs	r1, #1
 80064e6:	fa01 f605 	lsl.w	r6, r1, r5
 80064ea:	1d72      	adds	r2, r6, #5
 80064ec:	4620      	mov	r0, r4
 80064ee:	0092      	lsls	r2, r2, #2
 80064f0:	f000 fb5e 	bl	8006bb0 <_calloc_r>
 80064f4:	b160      	cbz	r0, 8006510 <_Balloc+0x64>
 80064f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064fa:	e00e      	b.n	800651a <_Balloc+0x6e>
 80064fc:	2221      	movs	r2, #33	; 0x21
 80064fe:	2104      	movs	r1, #4
 8006500:	4620      	mov	r0, r4
 8006502:	f000 fb55 	bl	8006bb0 <_calloc_r>
 8006506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006508:	60f0      	str	r0, [r6, #12]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e4      	bne.n	80064da <_Balloc+0x2e>
 8006510:	2000      	movs	r0, #0
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	6802      	ldr	r2, [r0, #0]
 8006516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800651a:	2300      	movs	r3, #0
 800651c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006520:	e7f7      	b.n	8006512 <_Balloc+0x66>
 8006522:	bf00      	nop
 8006524:	080073d9 	.word	0x080073d9
 8006528:	080074bc 	.word	0x080074bc

0800652c <_Bfree>:
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006530:	4605      	mov	r5, r0
 8006532:	460c      	mov	r4, r1
 8006534:	b976      	cbnz	r6, 8006554 <_Bfree+0x28>
 8006536:	2010      	movs	r0, #16
 8006538:	f7ff ff94 	bl	8006464 <malloc>
 800653c:	4602      	mov	r2, r0
 800653e:	6268      	str	r0, [r5, #36]	; 0x24
 8006540:	b920      	cbnz	r0, 800654c <_Bfree+0x20>
 8006542:	218a      	movs	r1, #138	; 0x8a
 8006544:	4b08      	ldr	r3, [pc, #32]	; (8006568 <_Bfree+0x3c>)
 8006546:	4809      	ldr	r0, [pc, #36]	; (800656c <_Bfree+0x40>)
 8006548:	f000 fc88 	bl	8006e5c <__assert_func>
 800654c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006550:	6006      	str	r6, [r0, #0]
 8006552:	60c6      	str	r6, [r0, #12]
 8006554:	b13c      	cbz	r4, 8006566 <_Bfree+0x3a>
 8006556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006558:	6862      	ldr	r2, [r4, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006560:	6021      	str	r1, [r4, #0]
 8006562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	080073d9 	.word	0x080073d9
 800656c:	080074bc 	.word	0x080074bc

08006570 <__multadd>:
 8006570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006574:	4607      	mov	r7, r0
 8006576:	460c      	mov	r4, r1
 8006578:	461e      	mov	r6, r3
 800657a:	2000      	movs	r0, #0
 800657c:	690d      	ldr	r5, [r1, #16]
 800657e:	f101 0c14 	add.w	ip, r1, #20
 8006582:	f8dc 3000 	ldr.w	r3, [ip]
 8006586:	3001      	adds	r0, #1
 8006588:	b299      	uxth	r1, r3
 800658a:	fb02 6101 	mla	r1, r2, r1, r6
 800658e:	0c1e      	lsrs	r6, r3, #16
 8006590:	0c0b      	lsrs	r3, r1, #16
 8006592:	fb02 3306 	mla	r3, r2, r6, r3
 8006596:	b289      	uxth	r1, r1
 8006598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800659c:	4285      	cmp	r5, r0
 800659e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065a2:	f84c 1b04 	str.w	r1, [ip], #4
 80065a6:	dcec      	bgt.n	8006582 <__multadd+0x12>
 80065a8:	b30e      	cbz	r6, 80065ee <__multadd+0x7e>
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	42ab      	cmp	r3, r5
 80065ae:	dc19      	bgt.n	80065e4 <__multadd+0x74>
 80065b0:	6861      	ldr	r1, [r4, #4]
 80065b2:	4638      	mov	r0, r7
 80065b4:	3101      	adds	r1, #1
 80065b6:	f7ff ff79 	bl	80064ac <_Balloc>
 80065ba:	4680      	mov	r8, r0
 80065bc:	b928      	cbnz	r0, 80065ca <__multadd+0x5a>
 80065be:	4602      	mov	r2, r0
 80065c0:	21b5      	movs	r1, #181	; 0xb5
 80065c2:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <__multadd+0x84>)
 80065c4:	480c      	ldr	r0, [pc, #48]	; (80065f8 <__multadd+0x88>)
 80065c6:	f000 fc49 	bl	8006e5c <__assert_func>
 80065ca:	6922      	ldr	r2, [r4, #16]
 80065cc:	f104 010c 	add.w	r1, r4, #12
 80065d0:	3202      	adds	r2, #2
 80065d2:	0092      	lsls	r2, r2, #2
 80065d4:	300c      	adds	r0, #12
 80065d6:	f7ff ff5b 	bl	8006490 <memcpy>
 80065da:	4621      	mov	r1, r4
 80065dc:	4638      	mov	r0, r7
 80065de:	f7ff ffa5 	bl	800652c <_Bfree>
 80065e2:	4644      	mov	r4, r8
 80065e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065e8:	3501      	adds	r5, #1
 80065ea:	615e      	str	r6, [r3, #20]
 80065ec:	6125      	str	r5, [r4, #16]
 80065ee:	4620      	mov	r0, r4
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	0800744b 	.word	0x0800744b
 80065f8:	080074bc 	.word	0x080074bc

080065fc <__hi0bits>:
 80065fc:	0c02      	lsrs	r2, r0, #16
 80065fe:	0412      	lsls	r2, r2, #16
 8006600:	4603      	mov	r3, r0
 8006602:	b9ca      	cbnz	r2, 8006638 <__hi0bits+0x3c>
 8006604:	0403      	lsls	r3, r0, #16
 8006606:	2010      	movs	r0, #16
 8006608:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800660c:	bf04      	itt	eq
 800660e:	021b      	lsleq	r3, r3, #8
 8006610:	3008      	addeq	r0, #8
 8006612:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006616:	bf04      	itt	eq
 8006618:	011b      	lsleq	r3, r3, #4
 800661a:	3004      	addeq	r0, #4
 800661c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006620:	bf04      	itt	eq
 8006622:	009b      	lsleq	r3, r3, #2
 8006624:	3002      	addeq	r0, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	db05      	blt.n	8006636 <__hi0bits+0x3a>
 800662a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800662e:	f100 0001 	add.w	r0, r0, #1
 8006632:	bf08      	it	eq
 8006634:	2020      	moveq	r0, #32
 8006636:	4770      	bx	lr
 8006638:	2000      	movs	r0, #0
 800663a:	e7e5      	b.n	8006608 <__hi0bits+0xc>

0800663c <__lo0bits>:
 800663c:	6803      	ldr	r3, [r0, #0]
 800663e:	4602      	mov	r2, r0
 8006640:	f013 0007 	ands.w	r0, r3, #7
 8006644:	d00b      	beq.n	800665e <__lo0bits+0x22>
 8006646:	07d9      	lsls	r1, r3, #31
 8006648:	d421      	bmi.n	800668e <__lo0bits+0x52>
 800664a:	0798      	lsls	r0, r3, #30
 800664c:	bf49      	itett	mi
 800664e:	085b      	lsrmi	r3, r3, #1
 8006650:	089b      	lsrpl	r3, r3, #2
 8006652:	2001      	movmi	r0, #1
 8006654:	6013      	strmi	r3, [r2, #0]
 8006656:	bf5c      	itt	pl
 8006658:	2002      	movpl	r0, #2
 800665a:	6013      	strpl	r3, [r2, #0]
 800665c:	4770      	bx	lr
 800665e:	b299      	uxth	r1, r3
 8006660:	b909      	cbnz	r1, 8006666 <__lo0bits+0x2a>
 8006662:	2010      	movs	r0, #16
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	b2d9      	uxtb	r1, r3
 8006668:	b909      	cbnz	r1, 800666e <__lo0bits+0x32>
 800666a:	3008      	adds	r0, #8
 800666c:	0a1b      	lsrs	r3, r3, #8
 800666e:	0719      	lsls	r1, r3, #28
 8006670:	bf04      	itt	eq
 8006672:	091b      	lsreq	r3, r3, #4
 8006674:	3004      	addeq	r0, #4
 8006676:	0799      	lsls	r1, r3, #30
 8006678:	bf04      	itt	eq
 800667a:	089b      	lsreq	r3, r3, #2
 800667c:	3002      	addeq	r0, #2
 800667e:	07d9      	lsls	r1, r3, #31
 8006680:	d403      	bmi.n	800668a <__lo0bits+0x4e>
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	f100 0001 	add.w	r0, r0, #1
 8006688:	d003      	beq.n	8006692 <__lo0bits+0x56>
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	4770      	bx	lr
 800668e:	2000      	movs	r0, #0
 8006690:	4770      	bx	lr
 8006692:	2020      	movs	r0, #32
 8006694:	4770      	bx	lr
	...

08006698 <__i2b>:
 8006698:	b510      	push	{r4, lr}
 800669a:	460c      	mov	r4, r1
 800669c:	2101      	movs	r1, #1
 800669e:	f7ff ff05 	bl	80064ac <_Balloc>
 80066a2:	4602      	mov	r2, r0
 80066a4:	b928      	cbnz	r0, 80066b2 <__i2b+0x1a>
 80066a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066aa:	4b04      	ldr	r3, [pc, #16]	; (80066bc <__i2b+0x24>)
 80066ac:	4804      	ldr	r0, [pc, #16]	; (80066c0 <__i2b+0x28>)
 80066ae:	f000 fbd5 	bl	8006e5c <__assert_func>
 80066b2:	2301      	movs	r3, #1
 80066b4:	6144      	str	r4, [r0, #20]
 80066b6:	6103      	str	r3, [r0, #16]
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	bf00      	nop
 80066bc:	0800744b 	.word	0x0800744b
 80066c0:	080074bc 	.word	0x080074bc

080066c4 <__multiply>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	4691      	mov	r9, r2
 80066ca:	690a      	ldr	r2, [r1, #16]
 80066cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066d0:	460c      	mov	r4, r1
 80066d2:	429a      	cmp	r2, r3
 80066d4:	bfbe      	ittt	lt
 80066d6:	460b      	movlt	r3, r1
 80066d8:	464c      	movlt	r4, r9
 80066da:	4699      	movlt	r9, r3
 80066dc:	6927      	ldr	r7, [r4, #16]
 80066de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066e2:	68a3      	ldr	r3, [r4, #8]
 80066e4:	6861      	ldr	r1, [r4, #4]
 80066e6:	eb07 060a 	add.w	r6, r7, sl
 80066ea:	42b3      	cmp	r3, r6
 80066ec:	b085      	sub	sp, #20
 80066ee:	bfb8      	it	lt
 80066f0:	3101      	addlt	r1, #1
 80066f2:	f7ff fedb 	bl	80064ac <_Balloc>
 80066f6:	b930      	cbnz	r0, 8006706 <__multiply+0x42>
 80066f8:	4602      	mov	r2, r0
 80066fa:	f240 115d 	movw	r1, #349	; 0x15d
 80066fe:	4b43      	ldr	r3, [pc, #268]	; (800680c <__multiply+0x148>)
 8006700:	4843      	ldr	r0, [pc, #268]	; (8006810 <__multiply+0x14c>)
 8006702:	f000 fbab 	bl	8006e5c <__assert_func>
 8006706:	f100 0514 	add.w	r5, r0, #20
 800670a:	462b      	mov	r3, r5
 800670c:	2200      	movs	r2, #0
 800670e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006712:	4543      	cmp	r3, r8
 8006714:	d321      	bcc.n	800675a <__multiply+0x96>
 8006716:	f104 0314 	add.w	r3, r4, #20
 800671a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800671e:	f109 0314 	add.w	r3, r9, #20
 8006722:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006726:	9202      	str	r2, [sp, #8]
 8006728:	1b3a      	subs	r2, r7, r4
 800672a:	3a15      	subs	r2, #21
 800672c:	f022 0203 	bic.w	r2, r2, #3
 8006730:	3204      	adds	r2, #4
 8006732:	f104 0115 	add.w	r1, r4, #21
 8006736:	428f      	cmp	r7, r1
 8006738:	bf38      	it	cc
 800673a:	2204      	movcc	r2, #4
 800673c:	9201      	str	r2, [sp, #4]
 800673e:	9a02      	ldr	r2, [sp, #8]
 8006740:	9303      	str	r3, [sp, #12]
 8006742:	429a      	cmp	r2, r3
 8006744:	d80c      	bhi.n	8006760 <__multiply+0x9c>
 8006746:	2e00      	cmp	r6, #0
 8006748:	dd03      	ble.n	8006752 <__multiply+0x8e>
 800674a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800674e:	2b00      	cmp	r3, #0
 8006750:	d059      	beq.n	8006806 <__multiply+0x142>
 8006752:	6106      	str	r6, [r0, #16]
 8006754:	b005      	add	sp, #20
 8006756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675a:	f843 2b04 	str.w	r2, [r3], #4
 800675e:	e7d8      	b.n	8006712 <__multiply+0x4e>
 8006760:	f8b3 a000 	ldrh.w	sl, [r3]
 8006764:	f1ba 0f00 	cmp.w	sl, #0
 8006768:	d023      	beq.n	80067b2 <__multiply+0xee>
 800676a:	46a9      	mov	r9, r5
 800676c:	f04f 0c00 	mov.w	ip, #0
 8006770:	f104 0e14 	add.w	lr, r4, #20
 8006774:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006778:	f8d9 1000 	ldr.w	r1, [r9]
 800677c:	fa1f fb82 	uxth.w	fp, r2
 8006780:	b289      	uxth	r1, r1
 8006782:	fb0a 110b 	mla	r1, sl, fp, r1
 8006786:	4461      	add	r1, ip
 8006788:	f8d9 c000 	ldr.w	ip, [r9]
 800678c:	0c12      	lsrs	r2, r2, #16
 800678e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006792:	fb0a c202 	mla	r2, sl, r2, ip
 8006796:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800679a:	b289      	uxth	r1, r1
 800679c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067a0:	4577      	cmp	r7, lr
 80067a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067a6:	f849 1b04 	str.w	r1, [r9], #4
 80067aa:	d8e3      	bhi.n	8006774 <__multiply+0xb0>
 80067ac:	9a01      	ldr	r2, [sp, #4]
 80067ae:	f845 c002 	str.w	ip, [r5, r2]
 80067b2:	9a03      	ldr	r2, [sp, #12]
 80067b4:	3304      	adds	r3, #4
 80067b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	d020      	beq.n	8006802 <__multiply+0x13e>
 80067c0:	46ae      	mov	lr, r5
 80067c2:	f04f 0a00 	mov.w	sl, #0
 80067c6:	6829      	ldr	r1, [r5, #0]
 80067c8:	f104 0c14 	add.w	ip, r4, #20
 80067cc:	f8bc b000 	ldrh.w	fp, [ip]
 80067d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067d4:	b289      	uxth	r1, r1
 80067d6:	fb09 220b 	mla	r2, r9, fp, r2
 80067da:	4492      	add	sl, r2
 80067dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80067e0:	f84e 1b04 	str.w	r1, [lr], #4
 80067e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067e8:	f8be 1000 	ldrh.w	r1, [lr]
 80067ec:	0c12      	lsrs	r2, r2, #16
 80067ee:	fb09 1102 	mla	r1, r9, r2, r1
 80067f2:	4567      	cmp	r7, ip
 80067f4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80067f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067fc:	d8e6      	bhi.n	80067cc <__multiply+0x108>
 80067fe:	9a01      	ldr	r2, [sp, #4]
 8006800:	50a9      	str	r1, [r5, r2]
 8006802:	3504      	adds	r5, #4
 8006804:	e79b      	b.n	800673e <__multiply+0x7a>
 8006806:	3e01      	subs	r6, #1
 8006808:	e79d      	b.n	8006746 <__multiply+0x82>
 800680a:	bf00      	nop
 800680c:	0800744b 	.word	0x0800744b
 8006810:	080074bc 	.word	0x080074bc

08006814 <__pow5mult>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	4615      	mov	r5, r2
 800681a:	f012 0203 	ands.w	r2, r2, #3
 800681e:	4606      	mov	r6, r0
 8006820:	460f      	mov	r7, r1
 8006822:	d007      	beq.n	8006834 <__pow5mult+0x20>
 8006824:	4c25      	ldr	r4, [pc, #148]	; (80068bc <__pow5mult+0xa8>)
 8006826:	3a01      	subs	r2, #1
 8006828:	2300      	movs	r3, #0
 800682a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800682e:	f7ff fe9f 	bl	8006570 <__multadd>
 8006832:	4607      	mov	r7, r0
 8006834:	10ad      	asrs	r5, r5, #2
 8006836:	d03d      	beq.n	80068b4 <__pow5mult+0xa0>
 8006838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800683a:	b97c      	cbnz	r4, 800685c <__pow5mult+0x48>
 800683c:	2010      	movs	r0, #16
 800683e:	f7ff fe11 	bl	8006464 <malloc>
 8006842:	4602      	mov	r2, r0
 8006844:	6270      	str	r0, [r6, #36]	; 0x24
 8006846:	b928      	cbnz	r0, 8006854 <__pow5mult+0x40>
 8006848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800684c:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <__pow5mult+0xac>)
 800684e:	481d      	ldr	r0, [pc, #116]	; (80068c4 <__pow5mult+0xb0>)
 8006850:	f000 fb04 	bl	8006e5c <__assert_func>
 8006854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006858:	6004      	str	r4, [r0, #0]
 800685a:	60c4      	str	r4, [r0, #12]
 800685c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006864:	b94c      	cbnz	r4, 800687a <__pow5mult+0x66>
 8006866:	f240 2171 	movw	r1, #625	; 0x271
 800686a:	4630      	mov	r0, r6
 800686c:	f7ff ff14 	bl	8006698 <__i2b>
 8006870:	2300      	movs	r3, #0
 8006872:	4604      	mov	r4, r0
 8006874:	f8c8 0008 	str.w	r0, [r8, #8]
 8006878:	6003      	str	r3, [r0, #0]
 800687a:	f04f 0900 	mov.w	r9, #0
 800687e:	07eb      	lsls	r3, r5, #31
 8006880:	d50a      	bpl.n	8006898 <__pow5mult+0x84>
 8006882:	4639      	mov	r1, r7
 8006884:	4622      	mov	r2, r4
 8006886:	4630      	mov	r0, r6
 8006888:	f7ff ff1c 	bl	80066c4 <__multiply>
 800688c:	4680      	mov	r8, r0
 800688e:	4639      	mov	r1, r7
 8006890:	4630      	mov	r0, r6
 8006892:	f7ff fe4b 	bl	800652c <_Bfree>
 8006896:	4647      	mov	r7, r8
 8006898:	106d      	asrs	r5, r5, #1
 800689a:	d00b      	beq.n	80068b4 <__pow5mult+0xa0>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	b938      	cbnz	r0, 80068b0 <__pow5mult+0x9c>
 80068a0:	4622      	mov	r2, r4
 80068a2:	4621      	mov	r1, r4
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff ff0d 	bl	80066c4 <__multiply>
 80068aa:	6020      	str	r0, [r4, #0]
 80068ac:	f8c0 9000 	str.w	r9, [r0]
 80068b0:	4604      	mov	r4, r0
 80068b2:	e7e4      	b.n	800687e <__pow5mult+0x6a>
 80068b4:	4638      	mov	r0, r7
 80068b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ba:	bf00      	nop
 80068bc:	08007608 	.word	0x08007608
 80068c0:	080073d9 	.word	0x080073d9
 80068c4:	080074bc 	.word	0x080074bc

080068c8 <__lshift>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	460c      	mov	r4, r1
 80068ce:	4607      	mov	r7, r0
 80068d0:	4691      	mov	r9, r2
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	6849      	ldr	r1, [r1, #4]
 80068d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068da:	68a3      	ldr	r3, [r4, #8]
 80068dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068e0:	f108 0601 	add.w	r6, r8, #1
 80068e4:	42b3      	cmp	r3, r6
 80068e6:	db0b      	blt.n	8006900 <__lshift+0x38>
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff fddf 	bl	80064ac <_Balloc>
 80068ee:	4605      	mov	r5, r0
 80068f0:	b948      	cbnz	r0, 8006906 <__lshift+0x3e>
 80068f2:	4602      	mov	r2, r0
 80068f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068f8:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <__lshift+0xd8>)
 80068fa:	482a      	ldr	r0, [pc, #168]	; (80069a4 <__lshift+0xdc>)
 80068fc:	f000 faae 	bl	8006e5c <__assert_func>
 8006900:	3101      	adds	r1, #1
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	e7ee      	b.n	80068e4 <__lshift+0x1c>
 8006906:	2300      	movs	r3, #0
 8006908:	f100 0114 	add.w	r1, r0, #20
 800690c:	f100 0210 	add.w	r2, r0, #16
 8006910:	4618      	mov	r0, r3
 8006912:	4553      	cmp	r3, sl
 8006914:	db37      	blt.n	8006986 <__lshift+0xbe>
 8006916:	6920      	ldr	r0, [r4, #16]
 8006918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800691c:	f104 0314 	add.w	r3, r4, #20
 8006920:	f019 091f 	ands.w	r9, r9, #31
 8006924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800692c:	d02f      	beq.n	800698e <__lshift+0xc6>
 800692e:	468a      	mov	sl, r1
 8006930:	f04f 0c00 	mov.w	ip, #0
 8006934:	f1c9 0e20 	rsb	lr, r9, #32
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	fa02 f209 	lsl.w	r2, r2, r9
 800693e:	ea42 020c 	orr.w	r2, r2, ip
 8006942:	f84a 2b04 	str.w	r2, [sl], #4
 8006946:	f853 2b04 	ldr.w	r2, [r3], #4
 800694a:	4298      	cmp	r0, r3
 800694c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006950:	d8f2      	bhi.n	8006938 <__lshift+0x70>
 8006952:	1b03      	subs	r3, r0, r4
 8006954:	3b15      	subs	r3, #21
 8006956:	f023 0303 	bic.w	r3, r3, #3
 800695a:	3304      	adds	r3, #4
 800695c:	f104 0215 	add.w	r2, r4, #21
 8006960:	4290      	cmp	r0, r2
 8006962:	bf38      	it	cc
 8006964:	2304      	movcc	r3, #4
 8006966:	f841 c003 	str.w	ip, [r1, r3]
 800696a:	f1bc 0f00 	cmp.w	ip, #0
 800696e:	d001      	beq.n	8006974 <__lshift+0xac>
 8006970:	f108 0602 	add.w	r6, r8, #2
 8006974:	3e01      	subs	r6, #1
 8006976:	4638      	mov	r0, r7
 8006978:	4621      	mov	r1, r4
 800697a:	612e      	str	r6, [r5, #16]
 800697c:	f7ff fdd6 	bl	800652c <_Bfree>
 8006980:	4628      	mov	r0, r5
 8006982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006986:	f842 0f04 	str.w	r0, [r2, #4]!
 800698a:	3301      	adds	r3, #1
 800698c:	e7c1      	b.n	8006912 <__lshift+0x4a>
 800698e:	3904      	subs	r1, #4
 8006990:	f853 2b04 	ldr.w	r2, [r3], #4
 8006994:	4298      	cmp	r0, r3
 8006996:	f841 2f04 	str.w	r2, [r1, #4]!
 800699a:	d8f9      	bhi.n	8006990 <__lshift+0xc8>
 800699c:	e7ea      	b.n	8006974 <__lshift+0xac>
 800699e:	bf00      	nop
 80069a0:	0800744b 	.word	0x0800744b
 80069a4:	080074bc 	.word	0x080074bc

080069a8 <__mcmp>:
 80069a8:	4603      	mov	r3, r0
 80069aa:	690a      	ldr	r2, [r1, #16]
 80069ac:	6900      	ldr	r0, [r0, #16]
 80069ae:	b530      	push	{r4, r5, lr}
 80069b0:	1a80      	subs	r0, r0, r2
 80069b2:	d10d      	bne.n	80069d0 <__mcmp+0x28>
 80069b4:	3314      	adds	r3, #20
 80069b6:	3114      	adds	r1, #20
 80069b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069c8:	4295      	cmp	r5, r2
 80069ca:	d002      	beq.n	80069d2 <__mcmp+0x2a>
 80069cc:	d304      	bcc.n	80069d8 <__mcmp+0x30>
 80069ce:	2001      	movs	r0, #1
 80069d0:	bd30      	pop	{r4, r5, pc}
 80069d2:	42a3      	cmp	r3, r4
 80069d4:	d3f4      	bcc.n	80069c0 <__mcmp+0x18>
 80069d6:	e7fb      	b.n	80069d0 <__mcmp+0x28>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	e7f8      	b.n	80069d0 <__mcmp+0x28>
	...

080069e0 <__mdiff>:
 80069e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	460d      	mov	r5, r1
 80069e6:	4607      	mov	r7, r0
 80069e8:	4611      	mov	r1, r2
 80069ea:	4628      	mov	r0, r5
 80069ec:	4614      	mov	r4, r2
 80069ee:	f7ff ffdb 	bl	80069a8 <__mcmp>
 80069f2:	1e06      	subs	r6, r0, #0
 80069f4:	d111      	bne.n	8006a1a <__mdiff+0x3a>
 80069f6:	4631      	mov	r1, r6
 80069f8:	4638      	mov	r0, r7
 80069fa:	f7ff fd57 	bl	80064ac <_Balloc>
 80069fe:	4602      	mov	r2, r0
 8006a00:	b928      	cbnz	r0, 8006a0e <__mdiff+0x2e>
 8006a02:	f240 2132 	movw	r1, #562	; 0x232
 8006a06:	4b3a      	ldr	r3, [pc, #232]	; (8006af0 <__mdiff+0x110>)
 8006a08:	483a      	ldr	r0, [pc, #232]	; (8006af4 <__mdiff+0x114>)
 8006a0a:	f000 fa27 	bl	8006e5c <__assert_func>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a14:	4610      	mov	r0, r2
 8006a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1a:	bfa4      	itt	ge
 8006a1c:	4623      	movge	r3, r4
 8006a1e:	462c      	movge	r4, r5
 8006a20:	4638      	mov	r0, r7
 8006a22:	6861      	ldr	r1, [r4, #4]
 8006a24:	bfa6      	itte	ge
 8006a26:	461d      	movge	r5, r3
 8006a28:	2600      	movge	r6, #0
 8006a2a:	2601      	movlt	r6, #1
 8006a2c:	f7ff fd3e 	bl	80064ac <_Balloc>
 8006a30:	4602      	mov	r2, r0
 8006a32:	b918      	cbnz	r0, 8006a3c <__mdiff+0x5c>
 8006a34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a38:	4b2d      	ldr	r3, [pc, #180]	; (8006af0 <__mdiff+0x110>)
 8006a3a:	e7e5      	b.n	8006a08 <__mdiff+0x28>
 8006a3c:	f102 0814 	add.w	r8, r2, #20
 8006a40:	46c2      	mov	sl, r8
 8006a42:	f04f 0c00 	mov.w	ip, #0
 8006a46:	6927      	ldr	r7, [r4, #16]
 8006a48:	60c6      	str	r6, [r0, #12]
 8006a4a:	692e      	ldr	r6, [r5, #16]
 8006a4c:	f104 0014 	add.w	r0, r4, #20
 8006a50:	f105 0914 	add.w	r9, r5, #20
 8006a54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006a58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a5c:	3410      	adds	r4, #16
 8006a5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006a62:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a66:	fa1f f18b 	uxth.w	r1, fp
 8006a6a:	448c      	add	ip, r1
 8006a6c:	b299      	uxth	r1, r3
 8006a6e:	0c1b      	lsrs	r3, r3, #16
 8006a70:	ebac 0101 	sub.w	r1, ip, r1
 8006a74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a7c:	b289      	uxth	r1, r1
 8006a7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006a82:	454e      	cmp	r6, r9
 8006a84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a88:	f84a 3b04 	str.w	r3, [sl], #4
 8006a8c:	d8e7      	bhi.n	8006a5e <__mdiff+0x7e>
 8006a8e:	1b73      	subs	r3, r6, r5
 8006a90:	3b15      	subs	r3, #21
 8006a92:	f023 0303 	bic.w	r3, r3, #3
 8006a96:	3515      	adds	r5, #21
 8006a98:	3304      	adds	r3, #4
 8006a9a:	42ae      	cmp	r6, r5
 8006a9c:	bf38      	it	cc
 8006a9e:	2304      	movcc	r3, #4
 8006aa0:	4418      	add	r0, r3
 8006aa2:	4443      	add	r3, r8
 8006aa4:	461e      	mov	r6, r3
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	4575      	cmp	r5, lr
 8006aaa:	d30e      	bcc.n	8006aca <__mdiff+0xea>
 8006aac:	f10e 0103 	add.w	r1, lr, #3
 8006ab0:	1a09      	subs	r1, r1, r0
 8006ab2:	f021 0103 	bic.w	r1, r1, #3
 8006ab6:	3803      	subs	r0, #3
 8006ab8:	4586      	cmp	lr, r0
 8006aba:	bf38      	it	cc
 8006abc:	2100      	movcc	r1, #0
 8006abe:	4419      	add	r1, r3
 8006ac0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ac4:	b18b      	cbz	r3, 8006aea <__mdiff+0x10a>
 8006ac6:	6117      	str	r7, [r2, #16]
 8006ac8:	e7a4      	b.n	8006a14 <__mdiff+0x34>
 8006aca:	f855 8b04 	ldr.w	r8, [r5], #4
 8006ace:	fa1f f188 	uxth.w	r1, r8
 8006ad2:	4461      	add	r1, ip
 8006ad4:	140c      	asrs	r4, r1, #16
 8006ad6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ada:	b289      	uxth	r1, r1
 8006adc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ae0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006ae4:	f846 1b04 	str.w	r1, [r6], #4
 8006ae8:	e7de      	b.n	8006aa8 <__mdiff+0xc8>
 8006aea:	3f01      	subs	r7, #1
 8006aec:	e7e8      	b.n	8006ac0 <__mdiff+0xe0>
 8006aee:	bf00      	nop
 8006af0:	0800744b 	.word	0x0800744b
 8006af4:	080074bc 	.word	0x080074bc

08006af8 <__d2b>:
 8006af8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006afc:	2101      	movs	r1, #1
 8006afe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006b02:	4690      	mov	r8, r2
 8006b04:	461d      	mov	r5, r3
 8006b06:	f7ff fcd1 	bl	80064ac <_Balloc>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	b930      	cbnz	r0, 8006b1c <__d2b+0x24>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	f240 310a 	movw	r1, #778	; 0x30a
 8006b14:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <__d2b+0xb0>)
 8006b16:	4825      	ldr	r0, [pc, #148]	; (8006bac <__d2b+0xb4>)
 8006b18:	f000 f9a0 	bl	8006e5c <__assert_func>
 8006b1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006b20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006b24:	bb2d      	cbnz	r5, 8006b72 <__d2b+0x7a>
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	f1b8 0300 	subs.w	r3, r8, #0
 8006b2c:	d026      	beq.n	8006b7c <__d2b+0x84>
 8006b2e:	4668      	mov	r0, sp
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	f7ff fd83 	bl	800663c <__lo0bits>
 8006b36:	9900      	ldr	r1, [sp, #0]
 8006b38:	b1f0      	cbz	r0, 8006b78 <__d2b+0x80>
 8006b3a:	9a01      	ldr	r2, [sp, #4]
 8006b3c:	f1c0 0320 	rsb	r3, r0, #32
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	430b      	orrs	r3, r1
 8006b46:	40c2      	lsrs	r2, r0
 8006b48:	6163      	str	r3, [r4, #20]
 8006b4a:	9201      	str	r2, [sp, #4]
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bf14      	ite	ne
 8006b52:	2102      	movne	r1, #2
 8006b54:	2101      	moveq	r1, #1
 8006b56:	61a3      	str	r3, [r4, #24]
 8006b58:	6121      	str	r1, [r4, #16]
 8006b5a:	b1c5      	cbz	r5, 8006b8e <__d2b+0x96>
 8006b5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b60:	4405      	add	r5, r0
 8006b62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b66:	603d      	str	r5, [r7, #0]
 8006b68:	6030      	str	r0, [r6, #0]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	b002      	add	sp, #8
 8006b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b76:	e7d6      	b.n	8006b26 <__d2b+0x2e>
 8006b78:	6161      	str	r1, [r4, #20]
 8006b7a:	e7e7      	b.n	8006b4c <__d2b+0x54>
 8006b7c:	a801      	add	r0, sp, #4
 8006b7e:	f7ff fd5d 	bl	800663c <__lo0bits>
 8006b82:	2101      	movs	r1, #1
 8006b84:	9b01      	ldr	r3, [sp, #4]
 8006b86:	6121      	str	r1, [r4, #16]
 8006b88:	6163      	str	r3, [r4, #20]
 8006b8a:	3020      	adds	r0, #32
 8006b8c:	e7e5      	b.n	8006b5a <__d2b+0x62>
 8006b8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006b92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b96:	6038      	str	r0, [r7, #0]
 8006b98:	6918      	ldr	r0, [r3, #16]
 8006b9a:	f7ff fd2f 	bl	80065fc <__hi0bits>
 8006b9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006ba2:	6031      	str	r1, [r6, #0]
 8006ba4:	e7e1      	b.n	8006b6a <__d2b+0x72>
 8006ba6:	bf00      	nop
 8006ba8:	0800744b 	.word	0x0800744b
 8006bac:	080074bc 	.word	0x080074bc

08006bb0 <_calloc_r>:
 8006bb0:	b570      	push	{r4, r5, r6, lr}
 8006bb2:	fba1 5402 	umull	r5, r4, r1, r2
 8006bb6:	b934      	cbnz	r4, 8006bc6 <_calloc_r+0x16>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f000 f875 	bl	8006ca8 <_malloc_r>
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	b928      	cbnz	r0, 8006bce <_calloc_r+0x1e>
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	220c      	movs	r2, #12
 8006bc8:	2600      	movs	r6, #0
 8006bca:	6002      	str	r2, [r0, #0]
 8006bcc:	e7f9      	b.n	8006bc2 <_calloc_r+0x12>
 8006bce:	462a      	mov	r2, r5
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f7fd fe0d 	bl	80047f0 <memset>
 8006bd6:	e7f4      	b.n	8006bc2 <_calloc_r+0x12>

08006bd8 <_free_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4605      	mov	r5, r0
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d040      	beq.n	8006c62 <_free_r+0x8a>
 8006be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be4:	1f0c      	subs	r4, r1, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfb8      	it	lt
 8006bea:	18e4      	addlt	r4, r4, r3
 8006bec:	f000 f9bc 	bl	8006f68 <__malloc_lock>
 8006bf0:	4a1c      	ldr	r2, [pc, #112]	; (8006c64 <_free_r+0x8c>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	b933      	cbnz	r3, 8006c04 <_free_r+0x2c>
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	6014      	str	r4, [r2, #0]
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c00:	f000 b9b8 	b.w	8006f74 <__malloc_unlock>
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	d908      	bls.n	8006c1a <_free_r+0x42>
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	1821      	adds	r1, r4, r0
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	bf01      	itttt	eq
 8006c10:	6819      	ldreq	r1, [r3, #0]
 8006c12:	685b      	ldreq	r3, [r3, #4]
 8006c14:	1809      	addeq	r1, r1, r0
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	e7ed      	b.n	8006bf6 <_free_r+0x1e>
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	b10b      	cbz	r3, 8006c24 <_free_r+0x4c>
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	d9fa      	bls.n	8006c1a <_free_r+0x42>
 8006c24:	6811      	ldr	r1, [r2, #0]
 8006c26:	1850      	adds	r0, r2, r1
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d10b      	bne.n	8006c44 <_free_r+0x6c>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	4401      	add	r1, r0
 8006c30:	1850      	adds	r0, r2, r1
 8006c32:	4283      	cmp	r3, r0
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	d1e0      	bne.n	8006bfa <_free_r+0x22>
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	4401      	add	r1, r0
 8006c3e:	6011      	str	r1, [r2, #0]
 8006c40:	6053      	str	r3, [r2, #4]
 8006c42:	e7da      	b.n	8006bfa <_free_r+0x22>
 8006c44:	d902      	bls.n	8006c4c <_free_r+0x74>
 8006c46:	230c      	movs	r3, #12
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	e7d6      	b.n	8006bfa <_free_r+0x22>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	1821      	adds	r1, r4, r0
 8006c50:	428b      	cmp	r3, r1
 8006c52:	bf01      	itttt	eq
 8006c54:	6819      	ldreq	r1, [r3, #0]
 8006c56:	685b      	ldreq	r3, [r3, #4]
 8006c58:	1809      	addeq	r1, r1, r0
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	6063      	str	r3, [r4, #4]
 8006c5e:	6054      	str	r4, [r2, #4]
 8006c60:	e7cb      	b.n	8006bfa <_free_r+0x22>
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	20000364 	.word	0x20000364

08006c68 <sbrk_aligned>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	4e0e      	ldr	r6, [pc, #56]	; (8006ca4 <sbrk_aligned+0x3c>)
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	6831      	ldr	r1, [r6, #0]
 8006c70:	4605      	mov	r5, r0
 8006c72:	b911      	cbnz	r1, 8006c7a <sbrk_aligned+0x12>
 8006c74:	f000 f88c 	bl	8006d90 <_sbrk_r>
 8006c78:	6030      	str	r0, [r6, #0]
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f000 f887 	bl	8006d90 <_sbrk_r>
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	d00a      	beq.n	8006c9c <sbrk_aligned+0x34>
 8006c86:	1cc4      	adds	r4, r0, #3
 8006c88:	f024 0403 	bic.w	r4, r4, #3
 8006c8c:	42a0      	cmp	r0, r4
 8006c8e:	d007      	beq.n	8006ca0 <sbrk_aligned+0x38>
 8006c90:	1a21      	subs	r1, r4, r0
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f87c 	bl	8006d90 <_sbrk_r>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d101      	bne.n	8006ca0 <sbrk_aligned+0x38>
 8006c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	20000368 	.word	0x20000368

08006ca8 <_malloc_r>:
 8006ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cac:	1ccd      	adds	r5, r1, #3
 8006cae:	f025 0503 	bic.w	r5, r5, #3
 8006cb2:	3508      	adds	r5, #8
 8006cb4:	2d0c      	cmp	r5, #12
 8006cb6:	bf38      	it	cc
 8006cb8:	250c      	movcc	r5, #12
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	db01      	blt.n	8006cc4 <_malloc_r+0x1c>
 8006cc0:	42a9      	cmp	r1, r5
 8006cc2:	d905      	bls.n	8006cd0 <_malloc_r+0x28>
 8006cc4:	230c      	movs	r3, #12
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	4630      	mov	r0, r6
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	4e2e      	ldr	r6, [pc, #184]	; (8006d8c <_malloc_r+0xe4>)
 8006cd2:	f000 f949 	bl	8006f68 <__malloc_lock>
 8006cd6:	6833      	ldr	r3, [r6, #0]
 8006cd8:	461c      	mov	r4, r3
 8006cda:	bb34      	cbnz	r4, 8006d2a <_malloc_r+0x82>
 8006cdc:	4629      	mov	r1, r5
 8006cde:	4638      	mov	r0, r7
 8006ce0:	f7ff ffc2 	bl	8006c68 <sbrk_aligned>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	d14d      	bne.n	8006d86 <_malloc_r+0xde>
 8006cea:	6834      	ldr	r4, [r6, #0]
 8006cec:	4626      	mov	r6, r4
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d140      	bne.n	8006d74 <_malloc_r+0xcc>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	eb04 0803 	add.w	r8, r4, r3
 8006cfc:	f000 f848 	bl	8006d90 <_sbrk_r>
 8006d00:	4580      	cmp	r8, r0
 8006d02:	d13a      	bne.n	8006d7a <_malloc_r+0xd2>
 8006d04:	6821      	ldr	r1, [r4, #0]
 8006d06:	3503      	adds	r5, #3
 8006d08:	1a6d      	subs	r5, r5, r1
 8006d0a:	f025 0503 	bic.w	r5, r5, #3
 8006d0e:	3508      	adds	r5, #8
 8006d10:	2d0c      	cmp	r5, #12
 8006d12:	bf38      	it	cc
 8006d14:	250c      	movcc	r5, #12
 8006d16:	4638      	mov	r0, r7
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7ff ffa5 	bl	8006c68 <sbrk_aligned>
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d02b      	beq.n	8006d7a <_malloc_r+0xd2>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	442b      	add	r3, r5
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	e00e      	b.n	8006d48 <_malloc_r+0xa0>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	1b52      	subs	r2, r2, r5
 8006d2e:	d41e      	bmi.n	8006d6e <_malloc_r+0xc6>
 8006d30:	2a0b      	cmp	r2, #11
 8006d32:	d916      	bls.n	8006d62 <_malloc_r+0xba>
 8006d34:	1961      	adds	r1, r4, r5
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	6025      	str	r5, [r4, #0]
 8006d3a:	bf18      	it	ne
 8006d3c:	6059      	strne	r1, [r3, #4]
 8006d3e:	6863      	ldr	r3, [r4, #4]
 8006d40:	bf08      	it	eq
 8006d42:	6031      	streq	r1, [r6, #0]
 8006d44:	5162      	str	r2, [r4, r5]
 8006d46:	604b      	str	r3, [r1, #4]
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f104 060b 	add.w	r6, r4, #11
 8006d4e:	f000 f911 	bl	8006f74 <__malloc_unlock>
 8006d52:	f026 0607 	bic.w	r6, r6, #7
 8006d56:	1d23      	adds	r3, r4, #4
 8006d58:	1af2      	subs	r2, r6, r3
 8006d5a:	d0b6      	beq.n	8006cca <_malloc_r+0x22>
 8006d5c:	1b9b      	subs	r3, r3, r6
 8006d5e:	50a3      	str	r3, [r4, r2]
 8006d60:	e7b3      	b.n	8006cca <_malloc_r+0x22>
 8006d62:	6862      	ldr	r2, [r4, #4]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	bf0c      	ite	eq
 8006d68:	6032      	streq	r2, [r6, #0]
 8006d6a:	605a      	strne	r2, [r3, #4]
 8006d6c:	e7ec      	b.n	8006d48 <_malloc_r+0xa0>
 8006d6e:	4623      	mov	r3, r4
 8006d70:	6864      	ldr	r4, [r4, #4]
 8006d72:	e7b2      	b.n	8006cda <_malloc_r+0x32>
 8006d74:	4634      	mov	r4, r6
 8006d76:	6876      	ldr	r6, [r6, #4]
 8006d78:	e7b9      	b.n	8006cee <_malloc_r+0x46>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	f000 f8f8 	bl	8006f74 <__malloc_unlock>
 8006d84:	e7a1      	b.n	8006cca <_malloc_r+0x22>
 8006d86:	6025      	str	r5, [r4, #0]
 8006d88:	e7de      	b.n	8006d48 <_malloc_r+0xa0>
 8006d8a:	bf00      	nop
 8006d8c:	20000364 	.word	0x20000364

08006d90 <_sbrk_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	2300      	movs	r3, #0
 8006d94:	4d05      	ldr	r5, [pc, #20]	; (8006dac <_sbrk_r+0x1c>)
 8006d96:	4604      	mov	r4, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	f7fa fafc 	bl	8001398 <_sbrk>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_sbrk_r+0x1a>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_sbrk_r+0x1a>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	2000036c 	.word	0x2000036c

08006db0 <__sread>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	460c      	mov	r4, r1
 8006db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db8:	f000 fa3a 	bl	8007230 <_read_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	bfab      	itete	ge
 8006dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006dc4:	181b      	addge	r3, r3, r0
 8006dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dca:	bfac      	ite	ge
 8006dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dce:	81a3      	strhlt	r3, [r4, #12]
 8006dd0:	bd10      	pop	{r4, pc}

08006dd2 <__swrite>:
 8006dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd6:	461f      	mov	r7, r3
 8006dd8:	898b      	ldrh	r3, [r1, #12]
 8006dda:	4605      	mov	r5, r0
 8006ddc:	05db      	lsls	r3, r3, #23
 8006dde:	460c      	mov	r4, r1
 8006de0:	4616      	mov	r6, r2
 8006de2:	d505      	bpl.n	8006df0 <__swrite+0x1e>
 8006de4:	2302      	movs	r3, #2
 8006de6:	2200      	movs	r2, #0
 8006de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dec:	f000 f898 	bl	8006f20 <_lseek_r>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	4632      	mov	r2, r6
 8006df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006df8:	81a3      	strh	r3, [r4, #12]
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	463b      	mov	r3, r7
 8006dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e06:	f000 b817 	b.w	8006e38 <_write_r>

08006e0a <__sseek>:
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e12:	f000 f885 	bl	8006f20 <_lseek_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	bf15      	itete	ne
 8006e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e26:	81a3      	strheq	r3, [r4, #12]
 8006e28:	bf18      	it	ne
 8006e2a:	81a3      	strhne	r3, [r4, #12]
 8006e2c:	bd10      	pop	{r4, pc}

08006e2e <__sclose>:
 8006e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e32:	f000 b831 	b.w	8006e98 <_close_r>
	...

08006e38 <_write_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	2200      	movs	r2, #0
 8006e42:	4d05      	ldr	r5, [pc, #20]	; (8006e58 <_write_r+0x20>)
 8006e44:	602a      	str	r2, [r5, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	f7fa fa5a 	bl	8001300 <_write>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_write_r+0x1e>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_write_r+0x1e>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	2000036c 	.word	0x2000036c

08006e5c <__assert_func>:
 8006e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e5e:	4614      	mov	r4, r2
 8006e60:	461a      	mov	r2, r3
 8006e62:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <__assert_func+0x2c>)
 8006e64:	4605      	mov	r5, r0
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68d8      	ldr	r0, [r3, #12]
 8006e6a:	b14c      	cbz	r4, 8006e80 <__assert_func+0x24>
 8006e6c:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <__assert_func+0x30>)
 8006e6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e72:	9100      	str	r1, [sp, #0]
 8006e74:	462b      	mov	r3, r5
 8006e76:	4906      	ldr	r1, [pc, #24]	; (8006e90 <__assert_func+0x34>)
 8006e78:	f000 f81e 	bl	8006eb8 <fiprintf>
 8006e7c:	f000 f9f7 	bl	800726e <abort>
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <__assert_func+0x38>)
 8006e82:	461c      	mov	r4, r3
 8006e84:	e7f3      	b.n	8006e6e <__assert_func+0x12>
 8006e86:	bf00      	nop
 8006e88:	2000000c 	.word	0x2000000c
 8006e8c:	08007614 	.word	0x08007614
 8006e90:	08007621 	.word	0x08007621
 8006e94:	0800764f 	.word	0x0800764f

08006e98 <_close_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4d05      	ldr	r5, [pc, #20]	; (8006eb4 <_close_r+0x1c>)
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	602b      	str	r3, [r5, #0]
 8006ea4:	f7fa fa48 	bl	8001338 <_close>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_close_r+0x1a>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_close_r+0x1a>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	2000036c 	.word	0x2000036c

08006eb8 <fiprintf>:
 8006eb8:	b40e      	push	{r1, r2, r3}
 8006eba:	b503      	push	{r0, r1, lr}
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	ab03      	add	r3, sp, #12
 8006ec0:	4805      	ldr	r0, [pc, #20]	; (8006ed8 <fiprintf+0x20>)
 8006ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec6:	6800      	ldr	r0, [r0, #0]
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	f000 f881 	bl	8006fd0 <_vfiprintf_r>
 8006ece:	b002      	add	sp, #8
 8006ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed4:	b003      	add	sp, #12
 8006ed6:	4770      	bx	lr
 8006ed8:	2000000c 	.word	0x2000000c

08006edc <_fstat_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4d06      	ldr	r5, [pc, #24]	; (8006efc <_fstat_r+0x20>)
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	f7fa fa30 	bl	800134e <_fstat>
 8006eee:	1c43      	adds	r3, r0, #1
 8006ef0:	d102      	bne.n	8006ef8 <_fstat_r+0x1c>
 8006ef2:	682b      	ldr	r3, [r5, #0]
 8006ef4:	b103      	cbz	r3, 8006ef8 <_fstat_r+0x1c>
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	bd38      	pop	{r3, r4, r5, pc}
 8006efa:	bf00      	nop
 8006efc:	2000036c 	.word	0x2000036c

08006f00 <_isatty_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	2300      	movs	r3, #0
 8006f04:	4d05      	ldr	r5, [pc, #20]	; (8006f1c <_isatty_r+0x1c>)
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	f7fa fa2e 	bl	800136c <_isatty>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_isatty_r+0x1a>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_isatty_r+0x1a>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	2000036c 	.word	0x2000036c

08006f20 <_lseek_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4d05      	ldr	r5, [pc, #20]	; (8006f40 <_lseek_r+0x20>)
 8006f2c:	602a      	str	r2, [r5, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f7fa fa26 	bl	8001380 <_lseek>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_lseek_r+0x1e>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_lseek_r+0x1e>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	2000036c 	.word	0x2000036c

08006f44 <__ascii_mbtowc>:
 8006f44:	b082      	sub	sp, #8
 8006f46:	b901      	cbnz	r1, 8006f4a <__ascii_mbtowc+0x6>
 8006f48:	a901      	add	r1, sp, #4
 8006f4a:	b142      	cbz	r2, 8006f5e <__ascii_mbtowc+0x1a>
 8006f4c:	b14b      	cbz	r3, 8006f62 <__ascii_mbtowc+0x1e>
 8006f4e:	7813      	ldrb	r3, [r2, #0]
 8006f50:	600b      	str	r3, [r1, #0]
 8006f52:	7812      	ldrb	r2, [r2, #0]
 8006f54:	1e10      	subs	r0, r2, #0
 8006f56:	bf18      	it	ne
 8006f58:	2001      	movne	r0, #1
 8006f5a:	b002      	add	sp, #8
 8006f5c:	4770      	bx	lr
 8006f5e:	4610      	mov	r0, r2
 8006f60:	e7fb      	b.n	8006f5a <__ascii_mbtowc+0x16>
 8006f62:	f06f 0001 	mvn.w	r0, #1
 8006f66:	e7f8      	b.n	8006f5a <__ascii_mbtowc+0x16>

08006f68 <__malloc_lock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__malloc_lock+0x8>)
 8006f6a:	f7ff ba14 	b.w	8006396 <__retarget_lock_acquire_recursive>
 8006f6e:	bf00      	nop
 8006f70:	20000360 	.word	0x20000360

08006f74 <__malloc_unlock>:
 8006f74:	4801      	ldr	r0, [pc, #4]	; (8006f7c <__malloc_unlock+0x8>)
 8006f76:	f7ff ba0f 	b.w	8006398 <__retarget_lock_release_recursive>
 8006f7a:	bf00      	nop
 8006f7c:	20000360 	.word	0x20000360

08006f80 <__sfputc_r>:
 8006f80:	6893      	ldr	r3, [r2, #8]
 8006f82:	b410      	push	{r4}
 8006f84:	3b01      	subs	r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	6093      	str	r3, [r2, #8]
 8006f8a:	da07      	bge.n	8006f9c <__sfputc_r+0x1c>
 8006f8c:	6994      	ldr	r4, [r2, #24]
 8006f8e:	42a3      	cmp	r3, r4
 8006f90:	db01      	blt.n	8006f96 <__sfputc_r+0x16>
 8006f92:	290a      	cmp	r1, #10
 8006f94:	d102      	bne.n	8006f9c <__sfputc_r+0x1c>
 8006f96:	bc10      	pop	{r4}
 8006f98:	f7fe b908 	b.w	80051ac <__swbuf_r>
 8006f9c:	6813      	ldr	r3, [r2, #0]
 8006f9e:	1c58      	adds	r0, r3, #1
 8006fa0:	6010      	str	r0, [r2, #0]
 8006fa2:	7019      	strb	r1, [r3, #0]
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	bc10      	pop	{r4}
 8006fa8:	4770      	bx	lr

08006faa <__sfputs_r>:
 8006faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fac:	4606      	mov	r6, r0
 8006fae:	460f      	mov	r7, r1
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	18d5      	adds	r5, r2, r3
 8006fb4:	42ac      	cmp	r4, r5
 8006fb6:	d101      	bne.n	8006fbc <__sfputs_r+0x12>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	e007      	b.n	8006fcc <__sfputs_r+0x22>
 8006fbc:	463a      	mov	r2, r7
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc4:	f7ff ffdc 	bl	8006f80 <__sfputc_r>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d1f3      	bne.n	8006fb4 <__sfputs_r+0xa>
 8006fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fd0 <_vfiprintf_r>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	460d      	mov	r5, r1
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	4698      	mov	r8, r3
 8006fda:	4606      	mov	r6, r0
 8006fdc:	b09d      	sub	sp, #116	; 0x74
 8006fde:	b118      	cbz	r0, 8006fe8 <_vfiprintf_r+0x18>
 8006fe0:	6983      	ldr	r3, [r0, #24]
 8006fe2:	b90b      	cbnz	r3, 8006fe8 <_vfiprintf_r+0x18>
 8006fe4:	f7ff f934 	bl	8006250 <__sinit>
 8006fe8:	4b89      	ldr	r3, [pc, #548]	; (8007210 <_vfiprintf_r+0x240>)
 8006fea:	429d      	cmp	r5, r3
 8006fec:	d11b      	bne.n	8007026 <_vfiprintf_r+0x56>
 8006fee:	6875      	ldr	r5, [r6, #4]
 8006ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ff2:	07d9      	lsls	r1, r3, #31
 8006ff4:	d405      	bmi.n	8007002 <_vfiprintf_r+0x32>
 8006ff6:	89ab      	ldrh	r3, [r5, #12]
 8006ff8:	059a      	lsls	r2, r3, #22
 8006ffa:	d402      	bmi.n	8007002 <_vfiprintf_r+0x32>
 8006ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ffe:	f7ff f9ca 	bl	8006396 <__retarget_lock_acquire_recursive>
 8007002:	89ab      	ldrh	r3, [r5, #12]
 8007004:	071b      	lsls	r3, r3, #28
 8007006:	d501      	bpl.n	800700c <_vfiprintf_r+0x3c>
 8007008:	692b      	ldr	r3, [r5, #16]
 800700a:	b9eb      	cbnz	r3, 8007048 <_vfiprintf_r+0x78>
 800700c:	4629      	mov	r1, r5
 800700e:	4630      	mov	r0, r6
 8007010:	f7fe f91e 	bl	8005250 <__swsetup_r>
 8007014:	b1c0      	cbz	r0, 8007048 <_vfiprintf_r+0x78>
 8007016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007018:	07dc      	lsls	r4, r3, #31
 800701a:	d50e      	bpl.n	800703a <_vfiprintf_r+0x6a>
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	b01d      	add	sp, #116	; 0x74
 8007022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007026:	4b7b      	ldr	r3, [pc, #492]	; (8007214 <_vfiprintf_r+0x244>)
 8007028:	429d      	cmp	r5, r3
 800702a:	d101      	bne.n	8007030 <_vfiprintf_r+0x60>
 800702c:	68b5      	ldr	r5, [r6, #8]
 800702e:	e7df      	b.n	8006ff0 <_vfiprintf_r+0x20>
 8007030:	4b79      	ldr	r3, [pc, #484]	; (8007218 <_vfiprintf_r+0x248>)
 8007032:	429d      	cmp	r5, r3
 8007034:	bf08      	it	eq
 8007036:	68f5      	ldreq	r5, [r6, #12]
 8007038:	e7da      	b.n	8006ff0 <_vfiprintf_r+0x20>
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	0598      	lsls	r0, r3, #22
 800703e:	d4ed      	bmi.n	800701c <_vfiprintf_r+0x4c>
 8007040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007042:	f7ff f9a9 	bl	8006398 <__retarget_lock_release_recursive>
 8007046:	e7e9      	b.n	800701c <_vfiprintf_r+0x4c>
 8007048:	2300      	movs	r3, #0
 800704a:	9309      	str	r3, [sp, #36]	; 0x24
 800704c:	2320      	movs	r3, #32
 800704e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007052:	2330      	movs	r3, #48	; 0x30
 8007054:	f04f 0901 	mov.w	r9, #1
 8007058:	f8cd 800c 	str.w	r8, [sp, #12]
 800705c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800721c <_vfiprintf_r+0x24c>
 8007060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007064:	4623      	mov	r3, r4
 8007066:	469a      	mov	sl, r3
 8007068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800706c:	b10a      	cbz	r2, 8007072 <_vfiprintf_r+0xa2>
 800706e:	2a25      	cmp	r2, #37	; 0x25
 8007070:	d1f9      	bne.n	8007066 <_vfiprintf_r+0x96>
 8007072:	ebba 0b04 	subs.w	fp, sl, r4
 8007076:	d00b      	beq.n	8007090 <_vfiprintf_r+0xc0>
 8007078:	465b      	mov	r3, fp
 800707a:	4622      	mov	r2, r4
 800707c:	4629      	mov	r1, r5
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff ff93 	bl	8006faa <__sfputs_r>
 8007084:	3001      	adds	r0, #1
 8007086:	f000 80aa 	beq.w	80071de <_vfiprintf_r+0x20e>
 800708a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800708c:	445a      	add	r2, fp
 800708e:	9209      	str	r2, [sp, #36]	; 0x24
 8007090:	f89a 3000 	ldrb.w	r3, [sl]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80a2 	beq.w	80071de <_vfiprintf_r+0x20e>
 800709a:	2300      	movs	r3, #0
 800709c:	f04f 32ff 	mov.w	r2, #4294967295
 80070a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070a4:	f10a 0a01 	add.w	sl, sl, #1
 80070a8:	9304      	str	r3, [sp, #16]
 80070aa:	9307      	str	r3, [sp, #28]
 80070ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070b0:	931a      	str	r3, [sp, #104]	; 0x68
 80070b2:	4654      	mov	r4, sl
 80070b4:	2205      	movs	r2, #5
 80070b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ba:	4858      	ldr	r0, [pc, #352]	; (800721c <_vfiprintf_r+0x24c>)
 80070bc:	f7ff f9da 	bl	8006474 <memchr>
 80070c0:	9a04      	ldr	r2, [sp, #16]
 80070c2:	b9d8      	cbnz	r0, 80070fc <_vfiprintf_r+0x12c>
 80070c4:	06d1      	lsls	r1, r2, #27
 80070c6:	bf44      	itt	mi
 80070c8:	2320      	movmi	r3, #32
 80070ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ce:	0713      	lsls	r3, r2, #28
 80070d0:	bf44      	itt	mi
 80070d2:	232b      	movmi	r3, #43	; 0x2b
 80070d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070d8:	f89a 3000 	ldrb.w	r3, [sl]
 80070dc:	2b2a      	cmp	r3, #42	; 0x2a
 80070de:	d015      	beq.n	800710c <_vfiprintf_r+0x13c>
 80070e0:	4654      	mov	r4, sl
 80070e2:	2000      	movs	r0, #0
 80070e4:	f04f 0c0a 	mov.w	ip, #10
 80070e8:	9a07      	ldr	r2, [sp, #28]
 80070ea:	4621      	mov	r1, r4
 80070ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070f0:	3b30      	subs	r3, #48	; 0x30
 80070f2:	2b09      	cmp	r3, #9
 80070f4:	d94e      	bls.n	8007194 <_vfiprintf_r+0x1c4>
 80070f6:	b1b0      	cbz	r0, 8007126 <_vfiprintf_r+0x156>
 80070f8:	9207      	str	r2, [sp, #28]
 80070fa:	e014      	b.n	8007126 <_vfiprintf_r+0x156>
 80070fc:	eba0 0308 	sub.w	r3, r0, r8
 8007100:	fa09 f303 	lsl.w	r3, r9, r3
 8007104:	4313      	orrs	r3, r2
 8007106:	46a2      	mov	sl, r4
 8007108:	9304      	str	r3, [sp, #16]
 800710a:	e7d2      	b.n	80070b2 <_vfiprintf_r+0xe2>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	1d19      	adds	r1, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	9103      	str	r1, [sp, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bfbb      	ittet	lt
 8007118:	425b      	neglt	r3, r3
 800711a:	f042 0202 	orrlt.w	r2, r2, #2
 800711e:	9307      	strge	r3, [sp, #28]
 8007120:	9307      	strlt	r3, [sp, #28]
 8007122:	bfb8      	it	lt
 8007124:	9204      	strlt	r2, [sp, #16]
 8007126:	7823      	ldrb	r3, [r4, #0]
 8007128:	2b2e      	cmp	r3, #46	; 0x2e
 800712a:	d10c      	bne.n	8007146 <_vfiprintf_r+0x176>
 800712c:	7863      	ldrb	r3, [r4, #1]
 800712e:	2b2a      	cmp	r3, #42	; 0x2a
 8007130:	d135      	bne.n	800719e <_vfiprintf_r+0x1ce>
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	3402      	adds	r4, #2
 8007136:	1d1a      	adds	r2, r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	9203      	str	r2, [sp, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	bfb8      	it	lt
 8007140:	f04f 33ff 	movlt.w	r3, #4294967295
 8007144:	9305      	str	r3, [sp, #20]
 8007146:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007220 <_vfiprintf_r+0x250>
 800714a:	2203      	movs	r2, #3
 800714c:	4650      	mov	r0, sl
 800714e:	7821      	ldrb	r1, [r4, #0]
 8007150:	f7ff f990 	bl	8006474 <memchr>
 8007154:	b140      	cbz	r0, 8007168 <_vfiprintf_r+0x198>
 8007156:	2340      	movs	r3, #64	; 0x40
 8007158:	eba0 000a 	sub.w	r0, r0, sl
 800715c:	fa03 f000 	lsl.w	r0, r3, r0
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	3401      	adds	r4, #1
 8007164:	4303      	orrs	r3, r0
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716c:	2206      	movs	r2, #6
 800716e:	482d      	ldr	r0, [pc, #180]	; (8007224 <_vfiprintf_r+0x254>)
 8007170:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007174:	f7ff f97e 	bl	8006474 <memchr>
 8007178:	2800      	cmp	r0, #0
 800717a:	d03f      	beq.n	80071fc <_vfiprintf_r+0x22c>
 800717c:	4b2a      	ldr	r3, [pc, #168]	; (8007228 <_vfiprintf_r+0x258>)
 800717e:	bb1b      	cbnz	r3, 80071c8 <_vfiprintf_r+0x1f8>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	3307      	adds	r3, #7
 8007184:	f023 0307 	bic.w	r3, r3, #7
 8007188:	3308      	adds	r3, #8
 800718a:	9303      	str	r3, [sp, #12]
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	443b      	add	r3, r7
 8007190:	9309      	str	r3, [sp, #36]	; 0x24
 8007192:	e767      	b.n	8007064 <_vfiprintf_r+0x94>
 8007194:	460c      	mov	r4, r1
 8007196:	2001      	movs	r0, #1
 8007198:	fb0c 3202 	mla	r2, ip, r2, r3
 800719c:	e7a5      	b.n	80070ea <_vfiprintf_r+0x11a>
 800719e:	2300      	movs	r3, #0
 80071a0:	f04f 0c0a 	mov.w	ip, #10
 80071a4:	4619      	mov	r1, r3
 80071a6:	3401      	adds	r4, #1
 80071a8:	9305      	str	r3, [sp, #20]
 80071aa:	4620      	mov	r0, r4
 80071ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071b0:	3a30      	subs	r2, #48	; 0x30
 80071b2:	2a09      	cmp	r2, #9
 80071b4:	d903      	bls.n	80071be <_vfiprintf_r+0x1ee>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0c5      	beq.n	8007146 <_vfiprintf_r+0x176>
 80071ba:	9105      	str	r1, [sp, #20]
 80071bc:	e7c3      	b.n	8007146 <_vfiprintf_r+0x176>
 80071be:	4604      	mov	r4, r0
 80071c0:	2301      	movs	r3, #1
 80071c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071c6:	e7f0      	b.n	80071aa <_vfiprintf_r+0x1da>
 80071c8:	ab03      	add	r3, sp, #12
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	462a      	mov	r2, r5
 80071ce:	4630      	mov	r0, r6
 80071d0:	4b16      	ldr	r3, [pc, #88]	; (800722c <_vfiprintf_r+0x25c>)
 80071d2:	a904      	add	r1, sp, #16
 80071d4:	f7fd fbb2 	bl	800493c <_printf_float>
 80071d8:	4607      	mov	r7, r0
 80071da:	1c78      	adds	r0, r7, #1
 80071dc:	d1d6      	bne.n	800718c <_vfiprintf_r+0x1bc>
 80071de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e0:	07d9      	lsls	r1, r3, #31
 80071e2:	d405      	bmi.n	80071f0 <_vfiprintf_r+0x220>
 80071e4:	89ab      	ldrh	r3, [r5, #12]
 80071e6:	059a      	lsls	r2, r3, #22
 80071e8:	d402      	bmi.n	80071f0 <_vfiprintf_r+0x220>
 80071ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ec:	f7ff f8d4 	bl	8006398 <__retarget_lock_release_recursive>
 80071f0:	89ab      	ldrh	r3, [r5, #12]
 80071f2:	065b      	lsls	r3, r3, #25
 80071f4:	f53f af12 	bmi.w	800701c <_vfiprintf_r+0x4c>
 80071f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071fa:	e711      	b.n	8007020 <_vfiprintf_r+0x50>
 80071fc:	ab03      	add	r3, sp, #12
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	462a      	mov	r2, r5
 8007202:	4630      	mov	r0, r6
 8007204:	4b09      	ldr	r3, [pc, #36]	; (800722c <_vfiprintf_r+0x25c>)
 8007206:	a904      	add	r1, sp, #16
 8007208:	f7fd fe34 	bl	8004e74 <_printf_i>
 800720c:	e7e4      	b.n	80071d8 <_vfiprintf_r+0x208>
 800720e:	bf00      	nop
 8007210:	0800747c 	.word	0x0800747c
 8007214:	0800749c 	.word	0x0800749c
 8007218:	0800745c 	.word	0x0800745c
 800721c:	0800765a 	.word	0x0800765a
 8007220:	08007660 	.word	0x08007660
 8007224:	08007664 	.word	0x08007664
 8007228:	0800493d 	.word	0x0800493d
 800722c:	08006fab 	.word	0x08006fab

08007230 <_read_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4604      	mov	r4, r0
 8007234:	4608      	mov	r0, r1
 8007236:	4611      	mov	r1, r2
 8007238:	2200      	movs	r2, #0
 800723a:	4d05      	ldr	r5, [pc, #20]	; (8007250 <_read_r+0x20>)
 800723c:	602a      	str	r2, [r5, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	f7fa f841 	bl	80012c6 <_read>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d102      	bne.n	800724e <_read_r+0x1e>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	b103      	cbz	r3, 800724e <_read_r+0x1e>
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	2000036c 	.word	0x2000036c

08007254 <__ascii_wctomb>:
 8007254:	4603      	mov	r3, r0
 8007256:	4608      	mov	r0, r1
 8007258:	b141      	cbz	r1, 800726c <__ascii_wctomb+0x18>
 800725a:	2aff      	cmp	r2, #255	; 0xff
 800725c:	d904      	bls.n	8007268 <__ascii_wctomb+0x14>
 800725e:	228a      	movs	r2, #138	; 0x8a
 8007260:	f04f 30ff 	mov.w	r0, #4294967295
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	4770      	bx	lr
 8007268:	2001      	movs	r0, #1
 800726a:	700a      	strb	r2, [r1, #0]
 800726c:	4770      	bx	lr

0800726e <abort>:
 800726e:	2006      	movs	r0, #6
 8007270:	b508      	push	{r3, lr}
 8007272:	f000 f82b 	bl	80072cc <raise>
 8007276:	2001      	movs	r0, #1
 8007278:	f7fa f81b 	bl	80012b2 <_exit>

0800727c <_raise_r>:
 800727c:	291f      	cmp	r1, #31
 800727e:	b538      	push	{r3, r4, r5, lr}
 8007280:	4604      	mov	r4, r0
 8007282:	460d      	mov	r5, r1
 8007284:	d904      	bls.n	8007290 <_raise_r+0x14>
 8007286:	2316      	movs	r3, #22
 8007288:	6003      	str	r3, [r0, #0]
 800728a:	f04f 30ff 	mov.w	r0, #4294967295
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007292:	b112      	cbz	r2, 800729a <_raise_r+0x1e>
 8007294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007298:	b94b      	cbnz	r3, 80072ae <_raise_r+0x32>
 800729a:	4620      	mov	r0, r4
 800729c:	f000 f830 	bl	8007300 <_getpid_r>
 80072a0:	462a      	mov	r2, r5
 80072a2:	4601      	mov	r1, r0
 80072a4:	4620      	mov	r0, r4
 80072a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072aa:	f000 b817 	b.w	80072dc <_kill_r>
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d00a      	beq.n	80072c8 <_raise_r+0x4c>
 80072b2:	1c59      	adds	r1, r3, #1
 80072b4:	d103      	bne.n	80072be <_raise_r+0x42>
 80072b6:	2316      	movs	r3, #22
 80072b8:	6003      	str	r3, [r0, #0]
 80072ba:	2001      	movs	r0, #1
 80072bc:	e7e7      	b.n	800728e <_raise_r+0x12>
 80072be:	2400      	movs	r4, #0
 80072c0:	4628      	mov	r0, r5
 80072c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072c6:	4798      	blx	r3
 80072c8:	2000      	movs	r0, #0
 80072ca:	e7e0      	b.n	800728e <_raise_r+0x12>

080072cc <raise>:
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <raise+0xc>)
 80072ce:	4601      	mov	r1, r0
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f7ff bfd3 	b.w	800727c <_raise_r>
 80072d6:	bf00      	nop
 80072d8:	2000000c 	.word	0x2000000c

080072dc <_kill_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	2300      	movs	r3, #0
 80072e0:	4d06      	ldr	r5, [pc, #24]	; (80072fc <_kill_r+0x20>)
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	f7f9 ffd2 	bl	8001292 <_kill>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d102      	bne.n	80072f8 <_kill_r+0x1c>
 80072f2:	682b      	ldr	r3, [r5, #0]
 80072f4:	b103      	cbz	r3, 80072f8 <_kill_r+0x1c>
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	bf00      	nop
 80072fc:	2000036c 	.word	0x2000036c

08007300 <_getpid_r>:
 8007300:	f7f9 bfc0 	b.w	8001284 <_getpid>

08007304 <_init>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr

08007310 <_fini>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr
